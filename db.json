{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/robots.txt","path":"robots.txt","modified":0,"renderable":0},{"_id":"themes/next/source/404.html","path":"404.html","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon.ico","path":"images/favicon.ico","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/uploads/avatar.png","path":"uploads/avatar.png","modified":0,"renderable":1},{"_id":"themes/next/source/V1/index.html","path":"V1/index.html","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/V1/images/backTop.png","path":"V1/images/backTop.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/V1/css/index.css","path":"V1/css/index.css","modified":0,"renderable":1},{"_id":"themes/next/source/V1/css/reset.css","path":"V1/css/reset.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/V1/js/index.js","path":"V1/js/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/V1/js/data.js","path":"V1/js/data.js","modified":0,"renderable":1},{"_id":"themes/next/source/V1/js/jquery.js","path":"V1/js/jquery.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1487210727311},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1487210727312},{"_id":"themes/next/.gitignore","hash":"de5b9b9e5b313b4a86e805b02f334d35c87bfe56","modified":1487210727316},{"_id":"themes/next/.javascript_ignore","hash":"74b54cf920cbbf4038a68e54b7138af8b8f45588","modified":1487210727317},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1487210727317},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1487210727318},{"_id":"themes/next/gulpfile.coffee","hash":"e549561461642051d195550ec49d793e44ee22a0","modified":1487210727322},{"_id":"themes/next/README.en.md","hash":"953873fe2ee79bfc567b16dcdf8f91c1410444f8","modified":1487210727319},{"_id":"themes/next/bower.json","hash":"bd70cf5988bbfc8cbcf13adae659151a55466524","modified":1487210727321},{"_id":"themes/next/package.json","hash":"48e2352f8e41f2b6bbf55254d10f3192ee206d5a","modified":1487210727377},{"_id":"source/CNAME","hash":"5735cff25598ab0ec6aaec3d3bbeb39cc7ae807c","modified":1487296451772},{"_id":"source/baidu_verify_AZ3Xok9oZV.html","hash":"656fa009a8cc280ac2af0e60e2b54de88d4c77a2","modified":1487344484695},{"_id":"source/googled4d8acf007d35fa4.html","hash":"9303b60e78bd5ab7d6956f9c03a2ebe849edd2dd","modified":1487344498066},{"_id":"source/robots.txt","hash":"f0f2f0a85b62b68df6e4aeb7982e97c8bb5a18f0","modified":1487552855649},{"_id":"themes/next/README.md","hash":"06aaf1241e9e1619956c86d8b1397a643840a9d1","modified":1487210727320},{"_id":"themes/next/_config.yml","hash":"534067ad752e8fb1c01a06cfdc9849f462972234","modified":1511250637426},{"_id":"themes/next/languages/default.yml","hash":"0a3672575cc99a77e413a45cd635ca2e096a176e","modified":1487210727324},{"_id":"themes/next/languages/fr-FR.yml","hash":"91cf55b9d75879e72c8008d2659fe2ea993a4cca","modified":1487210727326},{"_id":"themes/next/languages/de.yml","hash":"db6a9d669f4b6282cda6c0a2d4e03d3e308a4846","modified":1487210727324},{"_id":"themes/next/languages/id.yml","hash":"d8b9dc017da0be7f71fda1cacd8064cbc38963b9","modified":1487210727327},{"_id":"themes/next/languages/en.yml","hash":"0a3672575cc99a77e413a45cd635ca2e096a176e","modified":1487210727325},{"_id":"themes/next/languages/ko.yml","hash":"c59676f2af80c3c594c34c4a0fcbf65fd8864ff3","modified":1487210727328},{"_id":"themes/next/languages/ja.yml","hash":"bc89436a2a015ef72f43f265e56e37d94e73c0cd","modified":1487210727328},{"_id":"themes/next/languages/pt-BR.yml","hash":"4b91f96b07e05705b28964df7460466c9b522e2c","modified":1487210727329},{"_id":"themes/next/languages/pt.yml","hash":"f364905121a816c9797acce07c0a4f248965b29a","modified":1487210727331},{"_id":"themes/next/languages/ru.yml","hash":"40f4260866eab5c28ba715c3be495d7e81c73df7","modified":1487210727331},{"_id":"themes/next/languages/zh-Hans.yml","hash":"fca21fd2d5075a4f42ec86a0c45e9f83ab3bafd2","modified":1487515946847},{"_id":"themes/next/languages/zh-hk.yml","hash":"a59f3f3114f5eb4d170a76da4359307e8f5159a7","modified":1487210727333},{"_id":"themes/next/languages/zh-tw.yml","hash":"18da1324d2212faca9a6e5e6ce98b419c86d4b0c","modified":1487210727334},{"_id":"themes/next/layout/_layout.swig","hash":"2262ac16ec86165b0bd689c77edeac7f6342c83f","modified":1509517573393},{"_id":"themes/next/layout/archive.swig","hash":"b867a08f6b43de8b5d700c84b943df55917407ae","modified":1487210727373},{"_id":"themes/next/layout/schedule.swig","hash":"595013860078799d455af4965b3a7c5c4fd3923c","modified":1487210727376},{"_id":"themes/next/layout/index.swig","hash":"f21ef57fdf27159139ac924ac521eed4f25c8342","modified":1487388255918},{"_id":"themes/next/scripts/merge-configs.js","hash":"f8cde6953939802f92da5b7a2458c6c539e9be69","modified":1487210727377},{"_id":"themes/next/layout/category.swig","hash":"58cf08388901f7549b1fca95548b2c79173aa840","modified":1487210727373},{"_id":"themes/next/layout/page.swig","hash":"2a13804aa186f6062738d136e430870c53789bf4","modified":1487210727375},{"_id":"themes/next/source/404.html","hash":"b8bfc9fb51c02c88d43c97b3c7dffccf07478964","modified":1487493861617},{"_id":"themes/next/layout/tag.swig","hash":"6f764ea3ab11eeb7c530df45528d449b14f5dc62","modified":1487210727376},{"_id":"themes/next/layout/post.swig","hash":"b8334c479840b7724638eec71971cbd8512ae58d","modified":1487210727375},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1487210727527},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1487210727528},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1487210727528},{"_id":"source/_posts/2017-02-17-travis部署Hexo之填坑日记.md","hash":"040c509067198307c837c46995a2f15618161764","modified":1519610986532},{"_id":"source/_posts/2017-02-21-js之promise.md","hash":"4cf18e247bf5f8013a016c715638fe0fe03f2aaa","modified":1509528748828},{"_id":"source/_posts/2017-11-01-新的开始.md","hash":"cf726a7f1a8331e6ae771f7d5def5bf4f124eda1","modified":1519639227539},{"_id":"source/_posts/2017-11-06-大话设计模式——读后感（2）.md","hash":"23150d8e5140f66d95f386e0a39d988fe75a2d8d","modified":1519639243480},{"_id":"source/_posts/2017-06-08-Let-s-Encrypt证书使用.md","hash":"fb41a2dc8f6675e9144cf2e4def059ac264be076","modified":1519639163494},{"_id":"source/_posts/2017-11-13-IM即时通讯资料整理.md","hash":"2b53ebb547c04c35b1fadd7b03fc294b12627bb8","modified":1511250855079},{"_id":"source/_posts/2017-11-10-即时通讯开源软件归纳.md","hash":"2969608d85a241c994413a8eb6195ee3cfe974d1","modified":1512883680913},{"_id":"source/_posts/2017-11-27-Docker-初识.md","hash":"50dce15847819c5fdacdc0c68136b06b9acc064e","modified":1519639277560},{"_id":"source/_posts/2018-01-16-concurrent并发包总结.md","hash":"9dc8f6695cf3c73cb44f941274a86412e95dfe75","modified":1519639298256},{"_id":"source/_posts/2018-02-23-并发包总结（二）.md","hash":"45d91b3989a93dfe8660b22cb26e74927db73166","modified":1519639322387},{"_id":"source/_posts/2018-02-25-博客更新步骤.md","hash":"b2290968a69c175ef6a8efd9b4bbc27308285add","modified":1519639365885},{"_id":"source/_posts/2017-11-09-记推送失败——git命令之ssh-add学习.md","hash":"bb3de209f2bc95d3e34207b6d66d6f07a0707977","modified":1519639254927},{"_id":"source/_posts/2018-02-26-java面试题.md","hash":"601bcb8859c933a719c8bd313ff274a2e10883a9","modified":1519639378695},{"_id":"source/_posts/2018-03-01-18书单与学习计划.md","hash":"7fa1c70a80ec935ce88aed4eb489a14b9132623c","modified":1520221388508},{"_id":"source/categories/index.md","hash":"64c6aaa5b6f6c65acd1330dc5f8dc22b885ddbea","modified":1487230207278},{"_id":"source/tags/index.md","hash":"36cf368a60254983ca5741e6921ead6a4ba844b4","modified":1487230205439},{"_id":"source/_posts/2018-02-24-java23种设计模式概括.md","hash":"851f05cfb7b7368538c1199df6f9533ad250e3d8","modified":1519639332628},{"_id":"source/_posts/2018-02-25-JVM垃圾回收算法及回收器详解.md","hash":"7d0abdcef9bf0cdbf5d9754c509068478662b203","modified":1519639356958},{"_id":"source/_posts/spring ioc 控制反转.md","hash":"a9dcf96908e577f98afe98c02ea6b8feb0d4e5cd","modified":1519639381263},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1487210727437},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1487210727338},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1487210727338},{"_id":"themes/next/layout/_macro/passage-end-tag.swig","hash":"396feef13c2f0a2241d70b28a304e6583d3d32f8","modified":1509517799676},{"_id":"themes/next/layout/_macro/my-copyright.swig","hash":"a5305452bd1931374c036d74e0de8b552de024e8","modified":1509518545916},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"6d40652784585d263c37b8a3723e43e04b926ca7","modified":1487210727341},{"_id":"themes/next/layout/_macro/reward.swig","hash":"b6cb171f0ed227b82b8f7601814af2df93f3a09a","modified":1487210727343},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"c5cc0070ca7c9a8dbd4b09e0398db536c3cdbe8a","modified":1487210727344},{"_id":"themes/next/layout/_macro/post.swig","hash":"3976b5aee3227b5b54fd47785ba543d662b477ba","modified":1509521947875},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1487210727346},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"a42851e17d8961e5cae8b588d95a4a5456964972","modified":1487210727344},{"_id":"themes/next/layout/_partials/comments.swig","hash":"cd74d7d0aa2097de0e73e8e53cca5d022cec8c43","modified":1487210727345},{"_id":"themes/next/layout/_partials/footer.swig","hash":"6b954584106fbc8158b3a0aa6012d76faf17a760","modified":1509585576733},{"_id":"themes/next/layout/_partials/head.swig","hash":"da8cd9a0dcb9ad54d6151999bd0dde8a475273cd","modified":1509518467267},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1487210727350},{"_id":"themes/next/layout/_partials/header.swig","hash":"8985089c950d6df0efab9cd549a6b9ee50708ee2","modified":1487210727349},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"dfbb6e9692333166aa78231ad12b2a40c153cbcb","modified":1487210727349},{"_id":"themes/next/layout/_partials/search.swig","hash":"952b7b8d9ce2c81d4002a9dc2331f1e710f99616","modified":1487210727350},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1487210727355},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1487210727356},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"e9beddda9758d8739c41fc8c67b2e72fc29c1244","modified":1487210727372},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1487210727355},{"_id":"themes/next/scripts/tags/button.js","hash":"aaf71be6b483fca7a65cd6296c2cf1c2271c26a6","modified":1487210727378},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1487210727378},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1487210727379},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1487210727380},{"_id":"themes/next/scripts/tags/note.js","hash":"7dc14db08f2c74f8f1952534b424f220f5c000c6","modified":1487210727380},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"16505f61f19ba65f629dfd033f14ee9abcf18756","modified":1487210727438},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1487210727436},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1487210727439},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1487210727440},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1487210727440},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1487210727442},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1487210727442},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1487210727443},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1487210727460},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1487210727443},{"_id":"themes/next/source/images/favicon.ico","hash":"fe0c8bfc7c6ddc92f1cc27a6dfa3afaea7f48f7a","modified":1487489631679},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1487210727444},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1487210727461},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1487210727462},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1487210727462},{"_id":"themes/next/source/uploads/avatar.png","hash":"6e9fc74f352d248667c2b30c0558a83dd5e64501","modified":1487211409531},{"_id":"themes/next/source/V1/index.html","hash":"311e122819d0b26fad20881b6202d9922f33550d","modified":1487552335758},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1487210727441},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1487210727357},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1487210727357},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1487210727418},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1487210727418},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1487210727420},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1487210727433},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1487210727436},{"_id":"themes/next/layout/_components/algolia-search/dom.swig","hash":"bb2c3a926bb7f8fea54d424882b25d93dfde7ae6","modified":1487210727337},{"_id":"themes/next/layout/_components/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1487210727336},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1487210727348},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1487210727348},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1487210727351},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1487210727352},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1487210727352},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"efa7efcbb575381b508f9aa0e0c53140eef72a7b","modified":1487210727351},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1487210727353},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1487210727357},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"12684840de632eb16e53ffa863166306a756fd4f","modified":1487210727354},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1487210727358},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1487210727353},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"8b34af99cb673853fd948c02d07eb11eb3fb41b4","modified":1487210727359},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"03d259066399c1eb4a436ea4e5e7a4802426d72c","modified":1487210727365},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"e495aed8fb36bf8015ddbd64366270a7debad2b0","modified":1487210727370},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"f592adff22628b271ec9657b080cf6b9cc200615","modified":1487210727370},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1487210727371},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1487210727372},{"_id":"themes/next/layout/_scripts/third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1487210727371},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"a0f23e75a137d8c996c70e2059e0074f1e97a127","modified":1487210727419},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"531934ea21ef4dc9f0978512050f54834f0a6cff","modified":1487210727419},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"fd3d152b61d7dfbaf0fd1aca342c3c5144c72933","modified":1509518191605},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1487210727464},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"84bdc8a4fe127849a5c99bdefe1d0b65ee1a4a0a","modified":1487210727464},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"4a0da1bed19e65bd7db42421b447061bc1618710","modified":1487210727465},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1487210727465},{"_id":"themes/next/source/js/src/post-details.js","hash":"458af3b1bd7783c1950808e66cedfa9fb68bf21f","modified":1487210727466},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1487210727467},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"e55265c8a8a6ae0c3c08e3509de92ee62c3cb5f6","modified":1487210727433},{"_id":"themes/next/source/js/src/utils.js","hash":"e34f83848883732ddd7a34a3e3ed2a293f0f76a7","modified":1487210727468},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"c666e352c3b8e4ad0a16cc757b08f44ef9172182","modified":1487210727434},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1487210727469},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1487210727474},{"_id":"themes/next/source/js/src/motion.js","hash":"ff9ea37d05c269e3a140c4ab448af03efc4bcc76","modified":1487210727466},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1487210727491},{"_id":"themes/next/source/css/_variables/base.styl","hash":"d87c580203b035b5b4084dac71a73fb161fd8d22","modified":1509519253232},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1487210727493},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1487210727491},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1487210727475},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"9be892a4e14e0da18ff9cb962c9ef71f163b1b22","modified":1487210727475},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1487210727496},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1487210727492},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1487210727496},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1487210727497},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1487210727497},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"8868275e8b6340c87a81c69a54ed138d11fb3c3e","modified":1487210727495},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1487210727512},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1487210727514},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1487210727515},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1487210727517},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1487210727513},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1487210727514},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1487210727515},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1487210727520},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1487210727520},{"_id":"themes/next/source/V1/images/backTop.png","hash":"d1786c51ffeb37663a57973ac5f592149a31f828","modified":1475623604000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1487210727524},{"_id":"themes/next/source/V1/css/index.css","hash":"4398d9c603a67c7bd80f3034b2ff67ed07bb2090","modified":1475623604000},{"_id":"themes/next/source/V1/css/reset.css","hash":"559d610d1aa00ba07ec47db1b60d91612829688c","modified":1475623604000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1487210727525},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1487210727525},{"_id":"themes/next/source/V1/js/index.js","hash":"83328bb93c04e68466e16b8a1915b95f6d802c0f","modified":1475623604000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1487210727513},{"_id":"themes/next/source/V1/js/data.js","hash":"186b624c666387e0b4fa6ebf8c8eddd152b2ae1d","modified":1475623604000},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1487210727360},{"_id":"themes/next/source/V1/js/jquery.js","hash":"66954fe621b0fee76d72d6c201d2bde2c0167ccf","modified":1475623604000},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1487210727361},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"a79e7e0d809fcf407593dd7ed9e023db21c3cbd6","modified":1487210727362},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1487210727363},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-mta.swig","hash":"e9a0590dafde1046356620dd2b81e83b6b3b0936","modified":1487210727364},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"1b6af02fd0ba3f729675cd95429a0cea4aebf358","modified":1487210727362},{"_id":"themes/next/layout/_scripts/third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1487210727359},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"e4a13e8cd19762ef3aea0e59dfae8b3c1f251f11","modified":1487210727367},{"_id":"themes/next/layout/_scripts/third-party/analytics/vkontakte-api.swig","hash":"0506bcaf3dff28088bac6fdb8c8dbb4dc8915dfa","modified":1487210727364},{"_id":"themes/next/layout/_scripts/third-party/comments/gentie.swig","hash":"0f38f053841ef77cdce56a84cfbb4dd4c3329486","modified":1487210727368},{"_id":"themes/next/layout/_scripts/third-party/comments/livere.swig","hash":"5830a52c2a555d3a1f19b67d7bf3d072376cdea9","modified":1487210727369},{"_id":"themes/next/layout/_scripts/third-party/comments/youyan.swig","hash":"de95ec8920d1660680078451008f8bd69f14d082","modified":1487210727369},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"38d6dfd1c86bdea9e652e359f40806b2c99cd987","modified":1509523711198},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1487210727367},{"_id":"themes/next/layout/_scripts/third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1487210727368},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"22828f5141c0cecb9ef25a110e194cdfa3a36423","modified":1487210727382},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"ad69cbf94eedacc27e756cdb9c7073416db697d0","modified":1487210727382},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1487210727383},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"b7d5cc29586ac796a50d90974ad99d24a5982137","modified":1487210727383},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"88559b13ce94311405b170a0506ded91273beceb","modified":1487210727392},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1487210727414},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5a35aa0381b0e1d465b952a997194441020446ea","modified":1487210727415},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1487210727404},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"b6ee5fefa6046086a76ddbcfafc82482816fa3e0","modified":1487210727415},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"c9218b48c56e52c06af9ce3cc8fbdae737cf16fe","modified":1487210727416},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1487210727417},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1487210727421},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1487210727422},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1487210727423},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1487210727416},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1487210727424},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1487210727427},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1487210727422},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"ce272226a1570f5f7c70243b751a5b0fe1671a88","modified":1487210727423},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"f23ac53ab901c48859dd29eee6e386b60ff956ba","modified":1487210727428},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1487210727428},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1487210727429},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"34acb45007229b299951ce35d8eef642ea16fbe9","modified":1487210727430},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1487210727432},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1487210727425},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"221d3dbc04ff6c211ba9382397c4977e9f493153","modified":1487210727431},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1487210727427},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"173f3aa31c41782591b7abeadd4f88f68d59b042","modified":1487210727431},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"86197902dfd3bededba10ba62b8f9f22e0420bde","modified":1487210727433},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"c2390263a298a2b78c5f941e6827c13f02e1ee85","modified":1487210727467},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"1be4ef3f97f329e2531bfd2dfdc40c0e46df35c8","modified":1487210727432},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1487210727477},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1487210727494},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1487210727480},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1487210727481},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1487210727482},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1487210727494},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1487210727488},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1487210727478},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1487210727479},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1487210727489},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1487210727490},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1487210727499},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"a02674d823c7b577d38c3cdb91953993b6e4b3a0","modified":1487210727498},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"3c1d63dd1176c77f9f4cdb1616fbb08c31b9822f","modified":1487210727500},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1487210727518},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1487210727519},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1487210727502},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1487210727503},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1487210727510},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1487210727511},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1487210727522},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1487210727385},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1487210727385},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"852fd77500bda2c1a6651a14aa48d7d6222adc9d","modified":1487210727385},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1487210727386},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1487210727387},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1487210727390},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1487210727390},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1487210727391},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"104b5c79cd891506e0beaf938b083685f1da8637","modified":1487210727389},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1487210727386},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"3705cad785f252bed32e720f13b9a758ba39ef1b","modified":1487238622605},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"4783f85872bc7e218c1522a5c1c68cd27a5922db","modified":1487210727393},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1487210727389},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1487210727391},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1487210727394},{"_id":"themes/next/source/css/_common/components/post/my-post-copyright.styl","hash":"e954bf95842945b196bbb0de7b8098950a780129","modified":1509518606131},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1487210727395},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"a45f5fce643eec4e1b927165229d560364bcace1","modified":1487210727394},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"4866fb9453d7d4c83a1c4e55d74e4afed336eb8b","modified":1487210727395},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"61ec8a8481e8b76f2943235256c6d4f89c751c1c","modified":1487210727396},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1487210727397},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1487210727398},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"ed855f7bdd986f2b781cf5e56183c56ce960fe30","modified":1509521260447},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1487210727396},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"7f2bdd6109614d35408ee5ac3335aad4464c69c7","modified":1487210727400},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"350469437b20ecfd6f3ca45e400478f8e3f71cfb","modified":1487210727398},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"821991c0890966a512b43e8b1cf9537e738a09a0","modified":1487210727401},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1487210727401},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"7387eaa5efd5617eaa99cd05083bca68db716de1","modified":1509518730555},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"184a9f9ee2d1fd3c6ea5df86c2fdab9f928f6ef7","modified":1487238703046},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1487210727401},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"394888efec32749b353292a59ec7f1b609d6325e","modified":1487210727402},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"06b9a99d63b4d57fdbf70b88ab7036fbc47e3f52","modified":1487210727402},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1487210727403},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"702be9e57dd6ff5fa99642a1f6e3df26215b8805","modified":1487210727403},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"3159b55f35c40bd08e55b00148c523760a708c51","modified":1487210727405},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1487210727406},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"8420b4be386469337243336aee694297875bd439","modified":1487210727406},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1487210727404},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"c8a05ce90784db9744c22fab22019eb637df1f2f","modified":1487210727407},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"7f7e9df15148608a9c29326dd880d8e8e8efc0ec","modified":1487210727410},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"3b1aabbab57b0b1fafa311feb1212f59e78e7928","modified":1487210727408},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1487210727408},{"_id":"themes/next/source/css/_common/components/third-party/gentie.styl","hash":"cd526e814f9323a79fe835085d64867d34b3715d","modified":1487210727411},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1487210727411},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1487210727412},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"dc944a01dd59f5ed2d44bb22fdb21fc3f455948f","modified":1487210727413},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"4c4ef6e997d0c6e21de39c2daa0c768e12c8c6fa","modified":1487210727384},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"cf900c5026ab36f31118317d0ae32a213e3ec2a9","modified":1487210727426},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1487210727425},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"cf900c5026ab36f31118317d0ae32a213e3ec2a9","modified":1487210727429},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"eb4ede7d7446d8a2f2ddeef3b17f497a6ad30756","modified":1487210727413},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1487210727485},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1487210727484},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1487210727485},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1487210727486},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1487210727487},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1487210727509},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1487210727486},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1487210727473},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"964e8dac2cee79c4b49b5bc300675773f6518812","modified":1487210727506},{"_id":"public/googled4d8acf007d35fa4.html","hash":"0c23713c81be829c73defe9cdcff7de55b2b9dbe","modified":1519875278689},{"_id":"public/baidu_verify_AZ3Xok9oZV.html","hash":"b60c7f4768bf55ee7485febb76a08ab94896a5da","modified":1519875278707},{"_id":"public/search.xml","hash":"2eee16345bc87ecb1526533c0ca857e3d15b9bc9","modified":1519875378156},{"_id":"public/baidusitemap.xml","hash":"04e16e497cc8866e4ce292bcd3defcd4640dd03f","modified":1520221590840},{"_id":"public/atom.xml","hash":"584cbe71a6e8e78482c66bc78dd83cd10e227ad2","modified":1520221590843},{"_id":"public/sitemap.xml","hash":"5603351dfabc937700c3481c0d352a0fc33c7d58","modified":1520221590843},{"_id":"public/categories/index.html","hash":"67b36a1f8954c4b54204770722b78ac4d2b7f2a4","modified":1519875279013},{"_id":"public/tags/index.html","hash":"dd4b2b72889db7731736df04dbaf9c112ed11044","modified":1519875279015},{"_id":"public/archives/1491d7b8.html","hash":"77c6a3bffbc6608df4655f98dc10c4eed7ee8848","modified":1519875279015},{"_id":"public/archives/aeaaf0d9.html","hash":"5544017d9836785bafde0c255d70b8e486db245e","modified":1519875279015},{"_id":"public/archives/5c9c5ce0.html","hash":"67d6906627e6bab1b12511f08cbb55f6b34eaf08","modified":1519875279016},{"_id":"public/archives/62414ee6.html","hash":"3db29152e095d6e2dff65aa2308f940a165cf1c5","modified":1519875279016},{"_id":"public/archives/3699126a.html","hash":"694f20a8c4f5941a409d0aa351847f4339a81c18","modified":1519875279016},{"_id":"public/archives/9880a961.html","hash":"a445b3edd24a16537bb5673d7beeb9175b5be460","modified":1519875279016},{"_id":"public/archives/fd0b65d2.html","hash":"4abccde94824fb98921e8560366c4826768ec535","modified":1519875279016},{"_id":"public/archives/a5d8a8b7.html","hash":"264268c9b7abf9dce0e92fb5599085ba373c9b15","modified":1519875279016},{"_id":"public/archives/b971456b.html","hash":"797ad3cb4f20f07de178962f39717f02d8ee41d5","modified":1519875279016},{"_id":"public/archives/d1e9f0a5.html","hash":"a8fa7d9e02707743d30ddb185c4fa186a1c42a31","modified":1519875279016},{"_id":"public/archives/e8996bd7.html","hash":"d8f1534cc3ae07f2ac4fdb3d8bc1f97c7a961f8f","modified":1519875279016},{"_id":"public/archives/b585e161.html","hash":"dfee900cefbcd1127f525d17f2c67f4a7bff1181","modified":1519875279016},{"_id":"public/archives/ec1907ff.html","hash":"eac42d546b25fe7c794cdab6cfff546b8de39627","modified":1519875279016},{"_id":"public/archives/50de3585.html","hash":"0c1e9527bd5fddc3d946adcfde2c7caa1bf51c18","modified":1519875279017},{"_id":"public/archives/fddbb00f.html","hash":"ca5ad701c9f2f1ac88f7f32fe597bfbe816dd4dc","modified":1519875279017},{"_id":"public/archives/a8653e18.html","hash":"5e9b43f6aee29a58eef39e118f85ff9c99148566","modified":1519875279017},{"_id":"public/archives/index.html","hash":"2c6b6131c3dda65d158b57814d124cf54ddba2cc","modified":1519875279017},{"_id":"public/archives/page/2/index.html","hash":"732e9ef6fa366e4559627f855b26238f014f5d65","modified":1519875279017},{"_id":"public/archives/page/4/index.html","hash":"403366339f0adbedccb995185d56e18bd5286872","modified":1519875279017},{"_id":"public/archives/page/6/index.html","hash":"7c404bc668dc582ace14ef28b263ec5e229030fe","modified":1519875279017},{"_id":"public/archives/2017/index.html","hash":"17d758de400d3b48c0b520771daec41aad2f89f1","modified":1519875279017},{"_id":"public/archives/2017/page/2/index.html","hash":"6bb7900f2dc23dd2c20c883233a80d380adab186","modified":1519875279017},{"_id":"public/archives/2017/page/4/index.html","hash":"f2fbcd277fbaf818b075ab0a5cfa74ee05837828","modified":1519875279017},{"_id":"public/archives/page/3/index.html","hash":"2d4cabb2a3819ade5d34346182429b07b671089c","modified":1519875279017},{"_id":"public/archives/2017/02/index.html","hash":"a9e4c87ce2fa9c5a300cbd0454d82d3d2e200e4a","modified":1519875279017},{"_id":"public/archives/2017/03/index.html","hash":"cc8a1012548a7388b0dfcd6f16bb2ce5f359bb1b","modified":1519875279017},{"_id":"public/archives/2017/06/index.html","hash":"d1359fce4c250afabfe80cdffb44f251b5d709f0","modified":1519875279018},{"_id":"public/archives/2017/11/index.html","hash":"ef1972a65a1f6f2719b6c123084129ce57136aea","modified":1519875279018},{"_id":"public/archives/2017/page/3/index.html","hash":"19cec417e9c531d344da15b173c97e88c34d8e26","modified":1519875279018},{"_id":"public/archives/page/5/index.html","hash":"dc5e2652b0297ef304bfe050182c37eebf0d1c5d","modified":1519875279018},{"_id":"public/archives/2017/11/page/2/index.html","hash":"87e63cd9a67387f247fc68f4e485592e0cc4a5a5","modified":1519875279018},{"_id":"public/archives/2018/index.html","hash":"10af655bf8353b3891aa4dc6b6cf8c4db0b166aa","modified":1519875279018},{"_id":"public/archives/2018/page/2/index.html","hash":"74be53230cfe1832bc810495349ff2a0e466be14","modified":1519875279018},{"_id":"public/archives/2018/01/index.html","hash":"5b656a67a4ee3a4bd5dfec4394d4a98fb7160960","modified":1519875279018},{"_id":"public/archives/2018/02/page/2/index.html","hash":"6476463cb53f2150426bec973f048c7d7a3a2e47","modified":1519875279018},{"_id":"public/archives/2018/02/index.html","hash":"dd7aeb284b52b0dc576a4970691d857462883bf8","modified":1519875279018},{"_id":"public/categories/Hexo/index.html","hash":"6fd9ca3466a94a9f6ce93061418732c20d301e39","modified":1519875279018},{"_id":"public/categories/技术随记/index.html","hash":"946cf7c8695e1e7d0a8c4476cf0a5040fca58316","modified":1519875279019},{"_id":"public/categories/设计模式/index.html","hash":"1abec968bf897353072fbf0690806c0b2d968d16","modified":1519875279019},{"_id":"public/categories/Docker/index.html","hash":"4d750af8effd97c0d7f43f35820a93842cd414b4","modified":1519875279019},{"_id":"public/categories/js学习之路/index.html","hash":"6cf03199d98bcd1c25dd9917d42b24af3ff50090","modified":1519875279019},{"_id":"public/categories/java/index.html","hash":"5c16c2b7813c5167da9f72431769af8aa6cdffcd","modified":1519875279019},{"_id":"public/categories/随笔/index.html","hash":"3d04d9c87c28fdb85e4d98b12278fd6d67899590","modified":1519875279019},{"_id":"public/categories/java学习之路/index.html","hash":"e9b9e4ea8e91a894d01b9e78dc8aec6045443f05","modified":1519875279019},{"_id":"public/categories/java/page/2/index.html","hash":"35d3ce8193eb75eda1d8dc36075102a8ef4d3052","modified":1519875279019},{"_id":"public/categories/随笔/page/2/index.html","hash":"597490db35f982755c6bccd9da75bd211e259950","modified":1519875279019},{"_id":"public/page/2/index.html","hash":"39909dda6b8d8d41f5873371328e6836ec567102","modified":1519883434379},{"_id":"public/index.html","hash":"28ec814c8b5ac9d3b8e239263640e9e78d543f18","modified":1520221594327},{"_id":"public/page/3/index.html","hash":"c6dfa60c613d89c32b229ff3e6a0353648686c68","modified":1519883434379},{"_id":"public/page/4/index.html","hash":"d942c2aba4e2856aa0223b26ae0eedd411fed64c","modified":1519883434379},{"_id":"public/tags/hexo/index.html","hash":"3d83ce7ce1c05ae6bf1e1be6814bfab3466b48fd","modified":1519875279020},{"_id":"public/page/6/index.html","hash":"e116db1c86c64a2ecfed69497c2a1b0286002f39","modified":1519875279020},{"_id":"public/tags/js/index.html","hash":"71eea4582e3040ba38e8fea2e8622c8807f182a7","modified":1519875279020},{"_id":"public/tags/nodejs/index.html","hash":"0da670613542c5f3844fe4bbb7f298a979b11a7b","modified":1519875279020},{"_id":"public/page/5/index.html","hash":"1238ac3639e0d9fcde660d7778964fb8717105a0","modified":1519875279020},{"_id":"public/tags/IM即时通讯/index.html","hash":"2e6cebe9ac4d963f2f98811d9dc97d4585c543dd","modified":1519875279020},{"_id":"public/tags/开源项目/index.html","hash":"bc575fe1812fe77a30a0cd65579f0ebac7d731c6","modified":1519875279020},{"_id":"public/tags/设计模式/index.html","hash":"927c6654f7cc2832314b1a26a081ec56716250ce","modified":1519875279020},{"_id":"public/tags/Let-s-Encrypt/index.html","hash":"6e39b7c32e26c1476a6d49f98cb6253afc52b337","modified":1519875279021},{"_id":"public/tags/Docker/index.html","hash":"92858e0b286ecd201db13edc1bf009bf0aa60157","modified":1519875279021},{"_id":"public/tags/concurrent并发包/index.html","hash":"483d3a517d97c4cca824996896ac98f19a09e806","modified":1519875279021},{"_id":"public/tags/java/index.html","hash":"36bf84db6d643a202ff1bf57611a2643fc9cef11","modified":1519875279021},{"_id":"public/tags/IOC（Inversion-of-Control）控制反转/index.html","hash":"3efbf2ea48c4ef97724944c77d58c1fbbabf7ba1","modified":1519875279021},{"_id":"public/tags/java面试/index.html","hash":"83514f5ea24a240e1ea5ea0bdb734e52b4f203f4","modified":1519875279021},{"_id":"public/tags/JVM垃圾回收/index.html","hash":"726a86f91a688094378c453c2ad44d4d38327fdf","modified":1519875279021},{"_id":"public/archives/5e98de26.html","hash":"9bd29b35bbaa1f78e2f118ef7ddb137084850612","modified":1520221594259},{"_id":"public/archives/2018/page/3/index.html","hash":"0bc401b7ba278d6bcdcb022d01ca19a424526e5f","modified":1519875279029},{"_id":"public/archives/2018/03/index.html","hash":"6f008fa4c3cc845f1344aabb26062c972f584592","modified":1519875279029},{"_id":"public/tags/计划/index.html","hash":"a32c0101a75b5b1916ff9bf9b0158c62191eccf4","modified":1519875279030},{"_id":"public/tags/书单/index.html","hash":"36d954f25453f2c06cb98e4d4e1876a703712002","modified":1519875279030},{"_id":"public/CNAME","hash":"5735cff25598ab0ec6aaec3d3bbeb39cc7ae807c","modified":1519875279030},{"_id":"public/robots.txt","hash":"f0f2f0a85b62b68df6e4aeb7982e97c8bb5a18f0","modified":1519875279030},{"_id":"public/images/algolia_logo.svg","hash":"16505f61f19ba65f629dfd033f14ee9abcf18756","modified":1519875279030},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1519875279030},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1519875279030},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1519875279030},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1519875279030},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1519875279030},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1519875279030},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1519875279030},{"_id":"public/images/favicon.ico","hash":"fe0c8bfc7c6ddc92f1cc27a6dfa3afaea7f48f7a","modified":1519875279030},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1519875279030},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1519875279031},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1519875279031},{"_id":"public/uploads/avatar.png","hash":"6e9fc74f352d248667c2b30c0558a83dd5e64501","modified":1519875279031},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1519875279031},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1519875279031},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1519875279031},{"_id":"public/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1519875279031},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1519875279652},{"_id":"public/V1/images/backTop.png","hash":"d1786c51ffeb37663a57973ac5f592149a31f828","modified":1519875279652},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1519875279655},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1519875279655},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1519875279655},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1519875279655},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1519875279655},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1519875279656},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1519875279656},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1519875279656},{"_id":"public/404.html","hash":"d76a76ed4ae90d22ee1689fdc8a310f0395ce24d","modified":1519875279713},{"_id":"public/V1/index.html","hash":"311e122819d0b26fad20881b6202d9922f33550d","modified":1519875279714},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1519875279725},{"_id":"public/js/src/algolia-search.js","hash":"96b29f69b8b916b22f62c9959a117b5a968200a5","modified":1519875279725},{"_id":"public/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1519875279726},{"_id":"public/js/src/utils.js","hash":"384e17ff857f073060f5bf8c6e4f4b7353236331","modified":1519875279726},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1519875279726},{"_id":"public/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1519875279728},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1519875279729},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1519875279729},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1519875279729},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1519875279729},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1519875279729},{"_id":"public/css/main.css","hash":"3106e2b90ad99694b77ab414250163a477cb9efc","modified":1519875279729},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1519875279729},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1519875279729},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1519875279729},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1519875279729},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1519875279756},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1519875279756},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1519875279756},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1519875279756},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1519875279756},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1519875279756},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1519875279756},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1519875279757},{"_id":"public/V1/css/index.css","hash":"4398d9c603a67c7bd80f3034b2ff67ed07bb2090","modified":1519875279757},{"_id":"public/V1/css/reset.css","hash":"559d610d1aa00ba07ec47db1b60d91612829688c","modified":1519875279757},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1519875279757},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1519875279757},{"_id":"public/js/src/schemes/pisces.js","hash":"9ccee9189c910b8a264802d7b2ec305d12dedcd0","modified":1519875279757},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1519875279757},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1519875279757},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1519875279758},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1519875279758},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1519875279758},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1519875279761},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1519875279762},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1519875279762},{"_id":"public/V1/js/index.js","hash":"83328bb93c04e68466e16b8a1915b95f6d802c0f","modified":1519875279762},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1519875279762},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1519875279762},{"_id":"public/V1/js/data.js","hash":"186b624c666387e0b4fa6ebf8c8eddd152b2ae1d","modified":1519875279763},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1519875279763},{"_id":"public/V1/js/jquery.js","hash":"66954fe621b0fee76d72d6c201d2bde2c0167ccf","modified":1519875279763},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1519875279763},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1519875279765},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"4eda182cbcc046dbf449aef97c02c230cf80a494","modified":1519875279765},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"fb5b49426dee7f1508500e698d1b3c6b04c8fcce","modified":1519875279766},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1519875279766},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1519875279766},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1519875279767},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1519875279767},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"964e8dac2cee79c4b49b5bc300675773f6518812","modified":1519875279803}],"Category":[{"name":"Hexo","_id":"cje7yhv3000067ku6a9lofg63"},{"name":"js学习之路","_id":"cje7yhv38000b7ku689dska8i"},{"name":"设计模式","_id":"cje7yhv3c000h7ku6k2jqvshz"},{"name":"技术随记","_id":"cje7yhv3m000t7ku6sdqbwceh"},{"name":"随笔","_id":"cje7yhv3r00107ku6vx31mfsd"},{"name":"Docker","_id":"cje7yhv45001d7ku63tju0y96"},{"name":"java","_id":"cje7yhv46001i7ku6wqpe2d08"},{"name":"java学习之路","_id":"cje7yhv6n002h7ku64b99ff7q"}],"Data":[],"Page":[{"layout":"false","_content":"AZ3Xok9oZV","source":"baidu_verify_AZ3Xok9oZV.html","raw":"layout: false\n---\nAZ3Xok9oZV","date":"2017-06-19T02:23:12.113Z","updated":"2017-02-17T15:14:44.695Z","path":"baidu_verify_AZ3Xok9oZV.html","title":"","comments":1,"_id":"cje7yhuvu00007ku6xv8f2e40","content":"AZ3Xok9oZV","excerpt":"","more":"AZ3Xok9oZV"},{"layout":"false","_content":"google-site-verification: googled4d8acf007d35fa4.html","source":"googled4d8acf007d35fa4.html","raw":"layout: false\n---\ngoogle-site-verification: googled4d8acf007d35fa4.html","date":"2017-06-19T02:23:12.118Z","updated":"2017-02-17T15:14:58.066Z","path":"googled4d8acf007d35fa4.html","title":"","comments":1,"_id":"cje7yhuvw00017ku6yi23gnq1","content":"google-site-verification: googled4d8acf007d35fa4.html","excerpt":"","more":"google-site-verification: googled4d8acf007d35fa4.html"},{"title":"分类","date":"2017-02-16T07:29:20.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2017-02-16 15:29:20\ntype: \"categories\"\ncomments: false\n---\n","updated":"2017-02-16T07:30:07.278Z","path":"categories/index.html","layout":"page","_id":"cje7yhv2x00037ku63liofe7a","content":"","excerpt":"","more":""},{"title":"标签","date":"2017-02-16T07:18:16.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2017-02-16 15:18:16\ntype: \"tags\"\ncomments: false\n---\n","updated":"2017-02-16T07:30:05.439Z","path":"tags/index.html","layout":"page","_id":"cje7yhv2z00057ku6cew3gdnl","content":"","excerpt":"","more":""}],"Post":[{"title":"travis部署Hexo之填坑日记","comments":1,"abbrlink":"a8653e18","date":"2017-02-17T08:34:46.000Z","copyright":true,"_content":"\n这个小客栈总算是被我搭起来了，前前后后遇到了不少坑。果然每一次在网上学东西都是遇坑填坑的过程，不过这都是为了我们更好的成（zhuang）长(bi)嘛。\n\n也就不重复的讲其他教程里有的内容了，只简明的记录下，我的填坑过程。\n\n### 第一个坑 travis 找不指定文件\n<!--more-->\n\n``` bash\n\n$ cd 博客项目文件夹根目录\n$ touch .travis.yml\n```\n\n* 登录 travis\n\n``` bash\ntravis login --auto\n````\n\n``` bash\n# 这里的 REPO_TOKEN 是变量名,在后面的配置文件中会用到\n# TOKEN 是上面github生成的Token\ntravis encrypt 'REPO_TOKEN=<TOKEN>' --add\n```\n\n这在很多讲解Travis部署Hexo的教程中都有的步骤，那么问题就出现了。。。。\n\n* travis 找不到指定文件\n\n\n这里是在travis encrypt 你的github创建的token的时候出现的。\n\n解决办法： 在travis encrypt 'REPO_TOKEN=<TOKEN>' --add 的时候加上 -r 你的github用户民/你的repo名。比如我的就是\n\n``` bash\ntravis encrypt 'REPO_TOKEN=<TOKEN>' --add -r Nanmen/nanmen.github.io\n```\n\n### 第二个坑 travis 构建你的工程时报2> dev/null错的问题\n\n* 当我兴高采烈的去推送到我的dev分支的时候，travis 运行测试过程中报出个 '\\<token> 2>dev/null' 的错误，一脸懵有没有，明明都是按照教程来的，怎么会是这样的呢。在我前后回想之后，一不小心测试出来了。。。。\n\n解决办法： 在你执行travis encrypt 的时候，并不是跟大部分教程写的那样，应该执行这一句\n``` bash\ntravis encrypt REPO_TOKEN=TOKEN --add -r Nanmen/nanmen.github.io\n```\n\n### 参考资料\n1.[手把手教从零开始在GitHub上使用Hexo搭建博客教程(一)-附GitHub注册及配置 - 简书](http://www.jianshu.com/p/f4cc5866946b)\n  2.[手把手教从零开始在GitHub上使用Hexo搭建博客教程(四)-使用Travis自动部署Hex... - 简书](http://www.jianshu.com/p/fff7b3384f46)\n  3.[hexo教程系列——使用Travis自动部署hexo - 张学志の博客 - 博客频道 - CSDN.NET](http://blog.csdn.net/xuezhisdc/article/details/53130423)\n","source":"_posts/2017-02-17-travis部署Hexo之填坑日记.md","raw":"---\ntitle: travis部署Hexo之填坑日记\ncategories: Hexo\ntags:\n  - hexo\ncomments: true\nabbrlink: a8653e18\ndate: 2017-02-17 16:34:46\ncopyright: true\n---\n\n这个小客栈总算是被我搭起来了，前前后后遇到了不少坑。果然每一次在网上学东西都是遇坑填坑的过程，不过这都是为了我们更好的成（zhuang）长(bi)嘛。\n\n也就不重复的讲其他教程里有的内容了，只简明的记录下，我的填坑过程。\n\n### 第一个坑 travis 找不指定文件\n<!--more-->\n\n``` bash\n\n$ cd 博客项目文件夹根目录\n$ touch .travis.yml\n```\n\n* 登录 travis\n\n``` bash\ntravis login --auto\n````\n\n``` bash\n# 这里的 REPO_TOKEN 是变量名,在后面的配置文件中会用到\n# TOKEN 是上面github生成的Token\ntravis encrypt 'REPO_TOKEN=<TOKEN>' --add\n```\n\n这在很多讲解Travis部署Hexo的教程中都有的步骤，那么问题就出现了。。。。\n\n* travis 找不到指定文件\n\n\n这里是在travis encrypt 你的github创建的token的时候出现的。\n\n解决办法： 在travis encrypt 'REPO_TOKEN=<TOKEN>' --add 的时候加上 -r 你的github用户民/你的repo名。比如我的就是\n\n``` bash\ntravis encrypt 'REPO_TOKEN=<TOKEN>' --add -r Nanmen/nanmen.github.io\n```\n\n### 第二个坑 travis 构建你的工程时报2> dev/null错的问题\n\n* 当我兴高采烈的去推送到我的dev分支的时候，travis 运行测试过程中报出个 '\\<token> 2>dev/null' 的错误，一脸懵有没有，明明都是按照教程来的，怎么会是这样的呢。在我前后回想之后，一不小心测试出来了。。。。\n\n解决办法： 在你执行travis encrypt 的时候，并不是跟大部分教程写的那样，应该执行这一句\n``` bash\ntravis encrypt REPO_TOKEN=TOKEN --add -r Nanmen/nanmen.github.io\n```\n\n### 参考资料\n1.[手把手教从零开始在GitHub上使用Hexo搭建博客教程(一)-附GitHub注册及配置 - 简书](http://www.jianshu.com/p/f4cc5866946b)\n  2.[手把手教从零开始在GitHub上使用Hexo搭建博客教程(四)-使用Travis自动部署Hex... - 简书](http://www.jianshu.com/p/fff7b3384f46)\n  3.[hexo教程系列——使用Travis自动部署hexo - 张学志の博客 - 博客频道 - CSDN.NET](http://blog.csdn.net/xuezhisdc/article/details/53130423)\n","slug":"travis部署Hexo之填坑日记","published":1,"updated":"2018-02-26T02:09:46.532Z","layout":"post","photos":[],"link":"","_id":"cje7yhv2v00027ku615l060l4","content":"<p>这个小客栈总算是被我搭起来了，前前后后遇到了不少坑。果然每一次在网上学东西都是遇坑填坑的过程，不过这都是为了我们更好的成（zhuang）长(bi)嘛。</p>\n<p>也就不重复的讲其他教程里有的内容了，只简明的记录下，我的填坑过程。</p>\n<h3 id=\"第一个坑-travis-找不指定文件\"><a href=\"#第一个坑-travis-找不指定文件\" class=\"headerlink\" title=\"第一个坑 travis 找不指定文件\"></a>第一个坑 travis 找不指定文件</h3><a id=\"more\"></a>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">$ <span class=\"built_in\">cd</span> 博客项目文件夹根目录</div><div class=\"line\">$ touch .travis.yml</div></pre></td></tr></table></figure>\n<ul>\n<li>登录 travis</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">travis login --auto</div><div class=\"line\">`</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 这里的 REPO_TOKEN 是变量名,在后面的配置文件中会用到</span></div><div class=\"line\"><span class=\"comment\"># TOKEN 是上面github生成的Token</span></div><div class=\"line\">travis encrypt <span class=\"string\">'REPO_TOKEN=&lt;TOKEN&gt;'</span> --add</div></pre></td></tr></table></figure>\n<p>这在很多讲解Travis部署Hexo的教程中都有的步骤，那么问题就出现了。。。。</p>\n<ul>\n<li>travis 找不到指定文件</li>\n</ul>\n<p>这里是在travis encrypt 你的github创建的token的时候出现的。</p>\n<p>解决办法： 在travis encrypt ‘REPO_TOKEN=<token>‘ –add 的时候加上 -r 你的github用户民/你的repo名。比如我的就是</token></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">travis encrypt <span class=\"string\">'REPO_TOKEN=&lt;TOKEN&gt;'</span> --add -r Nanmen/nanmen.github.io</div></pre></td></tr></table></figure>\n<h3 id=\"第二个坑-travis-构建你的工程时报2-gt-dev-null错的问题\"><a href=\"#第二个坑-travis-构建你的工程时报2-gt-dev-null错的问题\" class=\"headerlink\" title=\"第二个坑 travis 构建你的工程时报2&gt; dev/null错的问题\"></a>第二个坑 travis 构建你的工程时报2&gt; dev/null错的问题</h3><ul>\n<li>当我兴高采烈的去推送到我的dev分支的时候，travis 运行测试过程中报出个 ‘\\<token> 2&gt;dev/null’ 的错误，一脸懵有没有，明明都是按照教程来的，怎么会是这样的呢。在我前后回想之后，一不小心测试出来了。。。。</token></li>\n</ul>\n<p>解决办法： 在你执行travis encrypt 的时候，并不是跟大部分教程写的那样，应该执行这一句<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">travis encrypt REPO_TOKEN=TOKEN --add -r Nanmen/nanmen.github.io</div></pre></td></tr></table></figure></p>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><p>1.<a href=\"http://www.jianshu.com/p/f4cc5866946b\" target=\"_blank\" rel=\"external\">手把手教从零开始在GitHub上使用Hexo搭建博客教程(一)-附GitHub注册及配置 - 简书</a><br>  2.<a href=\"http://www.jianshu.com/p/fff7b3384f46\" target=\"_blank\" rel=\"external\">手把手教从零开始在GitHub上使用Hexo搭建博客教程(四)-使用Travis自动部署Hex… - 简书</a><br>  3.<a href=\"http://blog.csdn.net/xuezhisdc/article/details/53130423\" target=\"_blank\" rel=\"external\">hexo教程系列——使用Travis自动部署hexo - 张学志の博客 - 博客频道 - CSDN.NET</a></p>\n","excerpt":"<p>这个小客栈总算是被我搭起来了，前前后后遇到了不少坑。果然每一次在网上学东西都是遇坑填坑的过程，不过这都是为了我们更好的成（zhuang）长(bi)嘛。</p>\n<p>也就不重复的讲其他教程里有的内容了，只简明的记录下，我的填坑过程。</p>\n<h3 id=\"第一个坑-travis-找不指定文件\"><a href=\"#第一个坑-travis-找不指定文件\" class=\"headerlink\" title=\"第一个坑 travis 找不指定文件\"></a>第一个坑 travis 找不指定文件</h3>","more":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">$ <span class=\"built_in\">cd</span> 博客项目文件夹根目录</div><div class=\"line\">$ touch .travis.yml</div></pre></td></tr></table></figure>\n<ul>\n<li>登录 travis</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">travis login --auto</div><div class=\"line\">`</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 这里的 REPO_TOKEN 是变量名,在后面的配置文件中会用到</span></div><div class=\"line\"><span class=\"comment\"># TOKEN 是上面github生成的Token</span></div><div class=\"line\">travis encrypt <span class=\"string\">'REPO_TOKEN=&lt;TOKEN&gt;'</span> --add</div></pre></td></tr></table></figure>\n<p>这在很多讲解Travis部署Hexo的教程中都有的步骤，那么问题就出现了。。。。</p>\n<ul>\n<li>travis 找不到指定文件</li>\n</ul>\n<p>这里是在travis encrypt 你的github创建的token的时候出现的。</p>\n<p>解决办法： 在travis encrypt ‘REPO_TOKEN=<TOKEN>‘ –add 的时候加上 -r 你的github用户民/你的repo名。比如我的就是</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">travis encrypt <span class=\"string\">'REPO_TOKEN=&lt;TOKEN&gt;'</span> --add -r Nanmen/nanmen.github.io</div></pre></td></tr></table></figure>\n<h3 id=\"第二个坑-travis-构建你的工程时报2-gt-dev-null错的问题\"><a href=\"#第二个坑-travis-构建你的工程时报2-gt-dev-null错的问题\" class=\"headerlink\" title=\"第二个坑 travis 构建你的工程时报2&gt; dev/null错的问题\"></a>第二个坑 travis 构建你的工程时报2&gt; dev/null错的问题</h3><ul>\n<li>当我兴高采烈的去推送到我的dev分支的时候，travis 运行测试过程中报出个 ‘\\<token> 2&gt;dev/null’ 的错误，一脸懵有没有，明明都是按照教程来的，怎么会是这样的呢。在我前后回想之后，一不小心测试出来了。。。。</li>\n</ul>\n<p>解决办法： 在你执行travis encrypt 的时候，并不是跟大部分教程写的那样，应该执行这一句<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">travis encrypt REPO_TOKEN=TOKEN --add -r Nanmen/nanmen.github.io</div></pre></td></tr></table></figure></p>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><p>1.<a href=\"http://www.jianshu.com/p/f4cc5866946b\">手把手教从零开始在GitHub上使用Hexo搭建博客教程(一)-附GitHub注册及配置 - 简书</a><br>  2.<a href=\"http://www.jianshu.com/p/fff7b3384f46\">手把手教从零开始在GitHub上使用Hexo搭建博客教程(四)-使用Travis自动部署Hex… - 简书</a><br>  3.<a href=\"http://blog.csdn.net/xuezhisdc/article/details/53130423\">hexo教程系列——使用Travis自动部署hexo - 张学志の博客 - 博客频道 - CSDN.NET</a></p>"},{"title":"js学习之promise","comments":1,"abbrlink":"fddbb00f","date":"2017-02-21T11:01:28.000Z","copyright":true,"_content":"\n## <center>js学习之promise<center>\n\n### Promise的初步认识\n\n我们之前在完成异步执行都是利用的回调函数去实现的，例如ajax的调用：\n```javascript\nvar request = new XMLHttpRequest(); // 新建XMLHttpRequest对象\n\nrequest.onreadystatechange = function () { // 状态发生变化时，函数被回调\n    if (request.readyState === 4) { // 成功完成\n        // 判断响应结果:\n        if (request.status === 200) {\n            // 成功，通过responseText拿到响应的文本:\n            return success(request.responseText);\n        } else {\n            // 失败，根据响应码判断失败原因:\n            return fail(request.status);\n        }\n    } else {\n        // HTTP请求还在继续...\n    }\n}\n\n// 发送请求:\nrequest.open('GET', '/api/categories');\nrequest.send();\n\nalert('请求已发送，请等待响应...');\n```\n<!--more--> \n当然我们可以封装起来，改成另外的写法：\n```javascript\nvar ajax = ajaxGet('http://...');\najax.ifSuccess(success)\n    .ifFail(fail);\n```\n\n但是我们从ES6后我们有了新的写法\n\n```javascript\nnew Promise(test).then(function (result) {\n    console.log('成功：' + result);\n}).catch(function (reason) {\n    console.log('失败：' + reason);\n});\n```\n\n当然这只是简单的promise的利用，进阶版本请看参考链接。\n\n### 参考链接\n\n>\n1.[Promise - 廖雪峰的官方网站](http://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/0014345008539155e93fc16046d4bb7854943814c4f9dc2000)\n2.[[翻译] We have a problem with promises - FEX](http://fex.baidu.com/blog/2015/07/we-have-a-problem-with-promises/)\n3.[JavaScript Promise迷你书（中文版）](http://liubin.org/promises-book/)\n\n\n---\n### 前方的路很长，还需努力啊\n","source":"_posts/2017-02-21-js之promise.md","raw":"---\ntitle: js学习之promise\ncategories: js学习之路\ntags:\n  - js\n  - nodejs\ncomments: true\nabbrlink: fddbb00f\ndate: 2017-02-21 19:01:28\ncopyright: true\n---\n\n## <center>js学习之promise<center>\n\n### Promise的初步认识\n\n我们之前在完成异步执行都是利用的回调函数去实现的，例如ajax的调用：\n```javascript\nvar request = new XMLHttpRequest(); // 新建XMLHttpRequest对象\n\nrequest.onreadystatechange = function () { // 状态发生变化时，函数被回调\n    if (request.readyState === 4) { // 成功完成\n        // 判断响应结果:\n        if (request.status === 200) {\n            // 成功，通过responseText拿到响应的文本:\n            return success(request.responseText);\n        } else {\n            // 失败，根据响应码判断失败原因:\n            return fail(request.status);\n        }\n    } else {\n        // HTTP请求还在继续...\n    }\n}\n\n// 发送请求:\nrequest.open('GET', '/api/categories');\nrequest.send();\n\nalert('请求已发送，请等待响应...');\n```\n<!--more--> \n当然我们可以封装起来，改成另外的写法：\n```javascript\nvar ajax = ajaxGet('http://...');\najax.ifSuccess(success)\n    .ifFail(fail);\n```\n\n但是我们从ES6后我们有了新的写法\n\n```javascript\nnew Promise(test).then(function (result) {\n    console.log('成功：' + result);\n}).catch(function (reason) {\n    console.log('失败：' + reason);\n});\n```\n\n当然这只是简单的promise的利用，进阶版本请看参考链接。\n\n### 参考链接\n\n>\n1.[Promise - 廖雪峰的官方网站](http://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/0014345008539155e93fc16046d4bb7854943814c4f9dc2000)\n2.[[翻译] We have a problem with promises - FEX](http://fex.baidu.com/blog/2015/07/we-have-a-problem-with-promises/)\n3.[JavaScript Promise迷你书（中文版）](http://liubin.org/promises-book/)\n\n\n---\n### 前方的路很长，还需努力啊\n","slug":"js之promise","published":1,"updated":"2017-11-01T09:32:28.828Z","layout":"post","photos":[],"link":"","_id":"cje7yhv2y00047ku60sf92kds","content":"<h2 id=\"js学习之promise\"><a href=\"#js学习之promise\" class=\"headerlink\" title=\"js学习之promise\"></a><center>js学习之promise<center></center></center></h2><h3 id=\"Promise的初步认识\"><a href=\"#Promise的初步认识\" class=\"headerlink\" title=\"Promise的初步认识\"></a>Promise的初步认识</h3><p>我们之前在完成异步执行都是利用的回调函数去实现的，例如ajax的调用：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> request = <span class=\"keyword\">new</span> XMLHttpRequest(); <span class=\"comment\">// 新建XMLHttpRequest对象</span></div><div class=\"line\"></div><div class=\"line\">request.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">// 状态发生变化时，函数被回调</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (request.readyState === <span class=\"number\">4</span>) &#123; <span class=\"comment\">// 成功完成</span></div><div class=\"line\">        <span class=\"comment\">// 判断响应结果:</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (request.status === <span class=\"number\">200</span>) &#123;</div><div class=\"line\">            <span class=\"comment\">// 成功，通过responseText拿到响应的文本:</span></div><div class=\"line\">            <span class=\"keyword\">return</span> success(request.responseText);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"comment\">// 失败，根据响应码判断失败原因:</span></div><div class=\"line\">            <span class=\"keyword\">return</span> fail(request.status);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"comment\">// HTTP请求还在继续...</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 发送请求:</span></div><div class=\"line\">request.open(<span class=\"string\">'GET'</span>, <span class=\"string\">'/api/categories'</span>);</div><div class=\"line\">request.send();</div><div class=\"line\"></div><div class=\"line\">alert(<span class=\"string\">'请求已发送，请等待响应...'</span>);</div></pre></td></tr></table></figure></p>\n<a id=\"more\"></a> \n<p>当然我们可以封装起来，改成另外的写法：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> ajax = ajaxGet(<span class=\"string\">'http://...'</span>);</div><div class=\"line\">ajax.ifSuccess(success)</div><div class=\"line\">    .ifFail(fail);</div></pre></td></tr></table></figure></p>\n<p>但是我们从ES6后我们有了新的写法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(test).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">result</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'成功：'</span> + result);</div><div class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">reason</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'失败：'</span> + reason);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>当然这只是简单的promise的利用，进阶版本请看参考链接。</p>\n<h3 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h3><p>&gt;<br>1.<a href=\"http://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/0014345008539155e93fc16046d4bb7854943814c4f9dc2000\" target=\"_blank\" rel=\"external\">Promise - 廖雪峰的官方网站</a><br>2.<a href=\"http://fex.baidu.com/blog/2015/07/we-have-a-problem-with-promises/\" target=\"_blank\" rel=\"external\">[翻译] We have a problem with promises - FEX</a><br>3.<a href=\"http://liubin.org/promises-book/\" target=\"_blank\" rel=\"external\">JavaScript Promise迷你书（中文版）</a></p>\n<hr>\n<h3 id=\"前方的路很长，还需努力啊\"><a href=\"#前方的路很长，还需努力啊\" class=\"headerlink\" title=\"前方的路很长，还需努力啊\"></a>前方的路很长，还需努力啊</h3>","excerpt":"<h2 id=\"js学习之promise\"><a href=\"#js学习之promise\" class=\"headerlink\" title=\"js学习之promise\"></a><center>js学习之promise<center></h2><h3 id=\"Promise的初步认识\"><a href=\"#Promise的初步认识\" class=\"headerlink\" title=\"Promise的初步认识\"></a>Promise的初步认识</h3><p>我们之前在完成异步执行都是利用的回调函数去实现的，例如ajax的调用：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> request = <span class=\"keyword\">new</span> XMLHttpRequest(); <span class=\"comment\">// 新建XMLHttpRequest对象</span></div><div class=\"line\"></div><div class=\"line\">request.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">// 状态发生变化时，函数被回调</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (request.readyState === <span class=\"number\">4</span>) &#123; <span class=\"comment\">// 成功完成</span></div><div class=\"line\">        <span class=\"comment\">// 判断响应结果:</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (request.status === <span class=\"number\">200</span>) &#123;</div><div class=\"line\">            <span class=\"comment\">// 成功，通过responseText拿到响应的文本:</span></div><div class=\"line\">            <span class=\"keyword\">return</span> success(request.responseText);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"comment\">// 失败，根据响应码判断失败原因:</span></div><div class=\"line\">            <span class=\"keyword\">return</span> fail(request.status);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"comment\">// HTTP请求还在继续...</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 发送请求:</span></div><div class=\"line\">request.open(<span class=\"string\">'GET'</span>, <span class=\"string\">'/api/categories'</span>);</div><div class=\"line\">request.send();</div><div class=\"line\"></div><div class=\"line\">alert(<span class=\"string\">'请求已发送，请等待响应...'</span>);</div></pre></td></tr></table></figure></p>","more":"<p>当然我们可以封装起来，改成另外的写法：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> ajax = ajaxGet(<span class=\"string\">'http://...'</span>);</div><div class=\"line\">ajax.ifSuccess(success)</div><div class=\"line\">    .ifFail(fail);</div></pre></td></tr></table></figure></p>\n<p>但是我们从ES6后我们有了新的写法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(test).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">result</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'成功：'</span> + result);</div><div class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">reason</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'失败：'</span> + reason);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>当然这只是简单的promise的利用，进阶版本请看参考链接。</p>\n<h3 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h3><p>&gt;<br>1.<a href=\"http://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/0014345008539155e93fc16046d4bb7854943814c4f9dc2000\">Promise - 廖雪峰的官方网站</a><br>2.<a href=\"http://fex.baidu.com/blog/2015/07/we-have-a-problem-with-promises/\">[翻译] We have a problem with promises - FEX</a><br>3.<a href=\"http://liubin.org/promises-book/\">JavaScript Promise迷你书（中文版）</a></p>\n<hr>\n<h3 id=\"前方的路很长，还需努力啊\"><a href=\"#前方的路很长，还需努力啊\" class=\"headerlink\" title=\"前方的路很长，还需努力啊\"></a>前方的路很长，还需努力啊</h3>"},{"title":"大话设计模式——读后感（2）","comments":0,"copyright":true,"top":10,"abbrlink":"d1e9f0a5","date":"2017-11-06T07:51:42.000Z","_content":"\n## <center>大话设计模式——读后感（2）</center>\n\n### Tip2\n\n#### 备忘录模式\n\n> 备忘录模式：在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。这样以后就可将该对象恢复到原先保存的状态。\n\n![](http://images2015.cnblogs.com/blog/527668/201601/527668-20160109144237450-356010664.jpg)\n\nOriginator（发起人）：负责创建一个备忘录Memento，用以记录当前时刻它的内部状态，并可使用备忘录恢复内部状态。\n\nOriginator可根据需要决定Memento存储Originator的哪些内部状态\n\nMemento（备忘录）：负责存储Originator对象的内部状态，并可防止Originator以外的其他对象访问备忘录Memento。\n\n备忘录有两个接口，Caretaker只能看到备忘录的窄接口，它只能将备忘录传递给其他对象。Originator能够看到一个宽接口，允许它访问返回到\n\n先前状态所需的所有数据。\n\nCaretaker（管理者）：负责保存好备忘录Memento，不能对备忘录的内存进行操作或检查。\n<!--more-->\n#### 备忘录模式代码实现\n\n以一个Emp实体对象来作为例子\n\n首先，创建一个发起人：发起人内部保存着需要备忘的属性，它负责创建一个备忘录Memento，用以记录当前时刻它的内部状态，并可使用备忘录恢复内部状态。\n\n```java\n//发起人：发起人内部有自身的内部状态，并且发起人可以创建备忘录和恢复备忘录\npublic class EmpOriginator {\n    //需要备份的自身属性\n    private String ename;\n    private int age;\n    private double salary;\n    //备份\n    public EmpMemento memento(){\n        return new EmpMemento(this);//将当前自身对象备份\n    }\n    //恢复\n    public void recovery(EmpMemento emp){\n        this.ename = emp.getEname();\n        this.age = emp.getAge();\n        this.salary = emp.getSalary();\n    }\n    //省略get，set和带参构造器\n}\n```\n\n创建备忘录对象：<font color=\"red\">备忘录就是用来备份发起人的数据，所以构造器需要提供一个发起人对象</font>\n\n```java\n//备忘录对象\npublic class EmpMemento {\n    //自身属性\n    private String ename;\n    private int age;\n    private double salary; \n    //构造备忘录对象时，需要传入一个需要备忘的对象（发起人）\n    public EmpMemento(EmpOriginator emp) {\n        this.ename = emp.getEname();\n        this.age = emp.getAge();\n        this.salary = emp.getSalary();\n    }\n    //省略3个属性的set,get方法\n}\n```\n\n开始创建一个备忘录的管理者\n\n```java\n//管理者：管理备忘录对象\npublic class CareTaker {\n    //需要管理的备忘录对象，这里也可以使用一个list容器来存储。这样可以备份多个点  \n    private EmpMemento empMemento;\n    public EmpMemento getEmpMemento() {\n        return empMemento;\n    }\n    public void setEmpMemento(EmpMemento empMemento) {\n        this.empMemento = empMemento;\n    }\n}\n```\n\n单次备份测试：测试只能备份一次的备忘录\n\n```java\npublic static void main(String[] args) {\n    CareTaker taker = new CareTaker();//构建一个备忘录管理者\n    //构建发起人\n    EmpOriginator emp = new EmpOriginator(\"张三\", 20, 4000);\n    System.out.println(\"第一次：\"+emp.getEname()+\"---\"+emp.getAge()+\"---\"+emp.getSalary());\n    //备份\n    taker.setEmpMemento(emp.memento());\n\n    //备份完了后再修改\n    emp.setEname(\"李四\");\n    emp.setAge(30);\n    emp.setSalary(50000);\n    //然后再次打印\n    System.out.println(\"修改后：\"+emp.getEname()+\"---\"+emp.getAge()+\"---\"+emp.getSalary());\n\n    //开始恢复\n    emp.recovery(taker.getEmpMemento());\n    System.out.println(\"恢复后：\"+emp.getEname()+\"---\"+emp.getAge()+\"---\"+emp.getSalary());\n}\n```\n\n测试结果如下：\n\n                第一次：张三---20---4000.0\n\n                修改后：李四---30---50000.0\n\n                恢复后：张三---20---4000.0\n\n但是，这样的效果是只能备份一次。有时候我们需要备份多个点，根据需要来还原具体哪次的数据\n\n##### 多次备份\n\n使用Stack来存储备份数据，进行多次备份。用Stack的好处是<font color=\"red\">Stack是后进先出的</font>，也就是说：**你最近一次备份的数据会优先获取到**。\n\n修改管理者中的代码：\n\n```java\nimport java.util.Stack;\n\n//管理者：管理备忘录对象\npublic class CareTaker {\n    //需要管理的备忘录对象，这里也可以使用一个list容器来存储。这样可以备份多个点\n    //或者使用一个Stack栈来保存，因为Stack是后进先出的\n    private Stack<EmpMemento> stack = new Stack<EmpMemento>();\n    //备份emp数据到栈中\n    public void mementoEmp(EmpMemento emp){\n        stack.push(emp);\n    }\n    //从栈中获取最近一次备份的emp数据\n    public EmpMemento getEmpForStack(){    \n        if (!stack.empty()) {\n            return stack.peek();//peek只获取，不删除\n        }else{\n            return null;\n        }\n    }\n    //从栈中获取最近一次备份的emp数据,并且从栈中删除该数据\n    public EmpMemento getEmpForStackAndRemove(){\n        if (!stack.empty()) {\n            return stack.pop();//pop获取后删除该元素\n        }else{\n            return null;\n        }\n    }\n}\n```\n\n再次测试：后进先出，也就是说。恢复的话恢复的是最后一次备份的数据\n\n```java\npublic static void main(String[] args) {\n    CareTaker taker = new CareTaker();//构建一个备忘录管理者\n    //构建发起人\n    EmpOriginator emp = new EmpOriginator(\"张三\", 20, 4000);\n    System.out.println(\"第一次：\"+emp.getEname()+\"---\"+emp.getAge()+\"---\"+emp.getSalary());\n    //第1次备份\n    taker.mementoEmp(emp.memento());\n\n    //备份完了后再修改\n    emp.setEname(\"李四\");\n    emp.setAge(30);\n    emp.setSalary(50000);\n    //然后再次打印\n    System.out.println(\"1修改后：\"+emp.getEname()+\"---\"+emp.getAge()+\"---\"+emp.getSalary());\n    //第2次备份\n    taker.mementoEmp(emp.memento());\n\n    //备份完了后再修改\n    emp.setEname(\"李四2\");\n    emp.setAge(32);\n    emp.setSalary(52000);\n    //然后再次打印\n    System.out.println(\"2修改后：\"+emp.getEname()+\"---\"+emp.getAge()+\"---\"+emp.getSalary());\n    //第3次备份\n    taker.mementoEmp(emp.memento());\n\n    //备份完了后再修改\n    emp.setEname(\"李四3\");\n    emp.setAge(33);\n    emp.setSalary(32000);\n    //然后再次打印\n    System.out.println(\"3修改后：\"+emp.getEname()+\"---\"+emp.getAge()+\"---\"+emp.getSalary());\n    //第4次备份\n    taker.mementoEmp(emp.memento());\n\n    //开始恢复\n    emp.recovery(taker.getEmpForStack());//恢复的是第4次备份的数据（3修改后）\n    System.out.println(\"恢复后：\"+emp.getEname()+\"---\"+emp.getAge()+\"---\"+emp.getSalary());\n}\n```\n\n测试结果如下：\n\n            第一次：张三---20---4000.0\n\n            1修改后：李四---30---50000.0\n\n            2修改后：李四2---32---52000.0\n\n            3修改后：李四3---33---32000.0\n\n            恢复后：李四3---33---32000.0\n\n当然，也可以恢复之后把它从栈中删除。\n\n测试：恢复之前从栈中删除两个最近的数据\n\n```java\n//开始恢复\ntaker.getEmpForStackAndRemove();//删除最近一次的备份\ntaker.getEmpForStackAndRemove();//删除最近一次的备份\nemp.recovery(taker.getEmpForStack());//此时获取的是原来未删除时倒数第二次的备份\nSystem.out.println(\"恢复后：\"+emp.getEname()+\"---\"+emp.getAge()+\"---\"+emp.getSalary());\n```\n\n此时的结果就是如下：可见，这里已经把2和3给删除了\n\n                第一次：张三---20---4000.0\n\n                1修改后：李四---30---50000.0\n\n                2修改后：李四2---32---52000.0\n\n                3修改后：李四3---33---32000.0\n\n                恢复后：李四---30---50000.0\n\n#### 总结-应用场景\n1. 棋类游戏中的悔棋操作\n\n2. 软件中的撤销操作\n\n3. 数据库中的事务回滚操作\n\n4. 常用软件中的历史记录功能\n\n#### 参考资料\n- 大话设计模式(带目录完整版).pdf\n- [备忘录模式（Memento） - FangZheng - 博客园](http://www.cnblogs.com/meet/p/5116407.html)","source":"_posts/2017-11-06-大话设计模式——读后感（2）.md","raw":"---\ntitle: 大话设计模式——读后感（2）\ncategories: 设计模式\ntags:\n  - 设计模式\ncomments: false\ncopyright: true\ntop: 10\nabbrlink: d1e9f0a5\ndate: 2017-11-06 15:51:42\n---\n\n## <center>大话设计模式——读后感（2）</center>\n\n### Tip2\n\n#### 备忘录模式\n\n> 备忘录模式：在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。这样以后就可将该对象恢复到原先保存的状态。\n\n![](http://images2015.cnblogs.com/blog/527668/201601/527668-20160109144237450-356010664.jpg)\n\nOriginator（发起人）：负责创建一个备忘录Memento，用以记录当前时刻它的内部状态，并可使用备忘录恢复内部状态。\n\nOriginator可根据需要决定Memento存储Originator的哪些内部状态\n\nMemento（备忘录）：负责存储Originator对象的内部状态，并可防止Originator以外的其他对象访问备忘录Memento。\n\n备忘录有两个接口，Caretaker只能看到备忘录的窄接口，它只能将备忘录传递给其他对象。Originator能够看到一个宽接口，允许它访问返回到\n\n先前状态所需的所有数据。\n\nCaretaker（管理者）：负责保存好备忘录Memento，不能对备忘录的内存进行操作或检查。\n<!--more-->\n#### 备忘录模式代码实现\n\n以一个Emp实体对象来作为例子\n\n首先，创建一个发起人：发起人内部保存着需要备忘的属性，它负责创建一个备忘录Memento，用以记录当前时刻它的内部状态，并可使用备忘录恢复内部状态。\n\n```java\n//发起人：发起人内部有自身的内部状态，并且发起人可以创建备忘录和恢复备忘录\npublic class EmpOriginator {\n    //需要备份的自身属性\n    private String ename;\n    private int age;\n    private double salary;\n    //备份\n    public EmpMemento memento(){\n        return new EmpMemento(this);//将当前自身对象备份\n    }\n    //恢复\n    public void recovery(EmpMemento emp){\n        this.ename = emp.getEname();\n        this.age = emp.getAge();\n        this.salary = emp.getSalary();\n    }\n    //省略get，set和带参构造器\n}\n```\n\n创建备忘录对象：<font color=\"red\">备忘录就是用来备份发起人的数据，所以构造器需要提供一个发起人对象</font>\n\n```java\n//备忘录对象\npublic class EmpMemento {\n    //自身属性\n    private String ename;\n    private int age;\n    private double salary; \n    //构造备忘录对象时，需要传入一个需要备忘的对象（发起人）\n    public EmpMemento(EmpOriginator emp) {\n        this.ename = emp.getEname();\n        this.age = emp.getAge();\n        this.salary = emp.getSalary();\n    }\n    //省略3个属性的set,get方法\n}\n```\n\n开始创建一个备忘录的管理者\n\n```java\n//管理者：管理备忘录对象\npublic class CareTaker {\n    //需要管理的备忘录对象，这里也可以使用一个list容器来存储。这样可以备份多个点  \n    private EmpMemento empMemento;\n    public EmpMemento getEmpMemento() {\n        return empMemento;\n    }\n    public void setEmpMemento(EmpMemento empMemento) {\n        this.empMemento = empMemento;\n    }\n}\n```\n\n单次备份测试：测试只能备份一次的备忘录\n\n```java\npublic static void main(String[] args) {\n    CareTaker taker = new CareTaker();//构建一个备忘录管理者\n    //构建发起人\n    EmpOriginator emp = new EmpOriginator(\"张三\", 20, 4000);\n    System.out.println(\"第一次：\"+emp.getEname()+\"---\"+emp.getAge()+\"---\"+emp.getSalary());\n    //备份\n    taker.setEmpMemento(emp.memento());\n\n    //备份完了后再修改\n    emp.setEname(\"李四\");\n    emp.setAge(30);\n    emp.setSalary(50000);\n    //然后再次打印\n    System.out.println(\"修改后：\"+emp.getEname()+\"---\"+emp.getAge()+\"---\"+emp.getSalary());\n\n    //开始恢复\n    emp.recovery(taker.getEmpMemento());\n    System.out.println(\"恢复后：\"+emp.getEname()+\"---\"+emp.getAge()+\"---\"+emp.getSalary());\n}\n```\n\n测试结果如下：\n\n                第一次：张三---20---4000.0\n\n                修改后：李四---30---50000.0\n\n                恢复后：张三---20---4000.0\n\n但是，这样的效果是只能备份一次。有时候我们需要备份多个点，根据需要来还原具体哪次的数据\n\n##### 多次备份\n\n使用Stack来存储备份数据，进行多次备份。用Stack的好处是<font color=\"red\">Stack是后进先出的</font>，也就是说：**你最近一次备份的数据会优先获取到**。\n\n修改管理者中的代码：\n\n```java\nimport java.util.Stack;\n\n//管理者：管理备忘录对象\npublic class CareTaker {\n    //需要管理的备忘录对象，这里也可以使用一个list容器来存储。这样可以备份多个点\n    //或者使用一个Stack栈来保存，因为Stack是后进先出的\n    private Stack<EmpMemento> stack = new Stack<EmpMemento>();\n    //备份emp数据到栈中\n    public void mementoEmp(EmpMemento emp){\n        stack.push(emp);\n    }\n    //从栈中获取最近一次备份的emp数据\n    public EmpMemento getEmpForStack(){    \n        if (!stack.empty()) {\n            return stack.peek();//peek只获取，不删除\n        }else{\n            return null;\n        }\n    }\n    //从栈中获取最近一次备份的emp数据,并且从栈中删除该数据\n    public EmpMemento getEmpForStackAndRemove(){\n        if (!stack.empty()) {\n            return stack.pop();//pop获取后删除该元素\n        }else{\n            return null;\n        }\n    }\n}\n```\n\n再次测试：后进先出，也就是说。恢复的话恢复的是最后一次备份的数据\n\n```java\npublic static void main(String[] args) {\n    CareTaker taker = new CareTaker();//构建一个备忘录管理者\n    //构建发起人\n    EmpOriginator emp = new EmpOriginator(\"张三\", 20, 4000);\n    System.out.println(\"第一次：\"+emp.getEname()+\"---\"+emp.getAge()+\"---\"+emp.getSalary());\n    //第1次备份\n    taker.mementoEmp(emp.memento());\n\n    //备份完了后再修改\n    emp.setEname(\"李四\");\n    emp.setAge(30);\n    emp.setSalary(50000);\n    //然后再次打印\n    System.out.println(\"1修改后：\"+emp.getEname()+\"---\"+emp.getAge()+\"---\"+emp.getSalary());\n    //第2次备份\n    taker.mementoEmp(emp.memento());\n\n    //备份完了后再修改\n    emp.setEname(\"李四2\");\n    emp.setAge(32);\n    emp.setSalary(52000);\n    //然后再次打印\n    System.out.println(\"2修改后：\"+emp.getEname()+\"---\"+emp.getAge()+\"---\"+emp.getSalary());\n    //第3次备份\n    taker.mementoEmp(emp.memento());\n\n    //备份完了后再修改\n    emp.setEname(\"李四3\");\n    emp.setAge(33);\n    emp.setSalary(32000);\n    //然后再次打印\n    System.out.println(\"3修改后：\"+emp.getEname()+\"---\"+emp.getAge()+\"---\"+emp.getSalary());\n    //第4次备份\n    taker.mementoEmp(emp.memento());\n\n    //开始恢复\n    emp.recovery(taker.getEmpForStack());//恢复的是第4次备份的数据（3修改后）\n    System.out.println(\"恢复后：\"+emp.getEname()+\"---\"+emp.getAge()+\"---\"+emp.getSalary());\n}\n```\n\n测试结果如下：\n\n            第一次：张三---20---4000.0\n\n            1修改后：李四---30---50000.0\n\n            2修改后：李四2---32---52000.0\n\n            3修改后：李四3---33---32000.0\n\n            恢复后：李四3---33---32000.0\n\n当然，也可以恢复之后把它从栈中删除。\n\n测试：恢复之前从栈中删除两个最近的数据\n\n```java\n//开始恢复\ntaker.getEmpForStackAndRemove();//删除最近一次的备份\ntaker.getEmpForStackAndRemove();//删除最近一次的备份\nemp.recovery(taker.getEmpForStack());//此时获取的是原来未删除时倒数第二次的备份\nSystem.out.println(\"恢复后：\"+emp.getEname()+\"---\"+emp.getAge()+\"---\"+emp.getSalary());\n```\n\n此时的结果就是如下：可见，这里已经把2和3给删除了\n\n                第一次：张三---20---4000.0\n\n                1修改后：李四---30---50000.0\n\n                2修改后：李四2---32---52000.0\n\n                3修改后：李四3---33---32000.0\n\n                恢复后：李四---30---50000.0\n\n#### 总结-应用场景\n1. 棋类游戏中的悔棋操作\n\n2. 软件中的撤销操作\n\n3. 数据库中的事务回滚操作\n\n4. 常用软件中的历史记录功能\n\n#### 参考资料\n- 大话设计模式(带目录完整版).pdf\n- [备忘录模式（Memento） - FangZheng - 博客园](http://www.cnblogs.com/meet/p/5116407.html)","slug":"大话设计模式——读后感（2）","published":1,"updated":"2018-02-26T10:00:43.480Z","layout":"post","photos":[],"link":"","_id":"cje7yhv3400087ku6g42sgibo","content":"<h2 id=\"大话设计模式——读后感（2）\"><a href=\"#大话设计模式——读后感（2）\" class=\"headerlink\" title=\"大话设计模式——读后感（2）\"></a><center>大话设计模式——读后感（2）</center></h2><h3 id=\"Tip2\"><a href=\"#Tip2\" class=\"headerlink\" title=\"Tip2\"></a>Tip2</h3><h4 id=\"备忘录模式\"><a href=\"#备忘录模式\" class=\"headerlink\" title=\"备忘录模式\"></a>备忘录模式</h4><blockquote>\n<p>备忘录模式：在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。这样以后就可将该对象恢复到原先保存的状态。</p>\n</blockquote>\n<p><img src=\"http://images2015.cnblogs.com/blog/527668/201601/527668-20160109144237450-356010664.jpg\" alt=\"\"></p>\n<p>Originator（发起人）：负责创建一个备忘录Memento，用以记录当前时刻它的内部状态，并可使用备忘录恢复内部状态。</p>\n<p>Originator可根据需要决定Memento存储Originator的哪些内部状态</p>\n<p>Memento（备忘录）：负责存储Originator对象的内部状态，并可防止Originator以外的其他对象访问备忘录Memento。</p>\n<p>备忘录有两个接口，Caretaker只能看到备忘录的窄接口，它只能将备忘录传递给其他对象。Originator能够看到一个宽接口，允许它访问返回到</p>\n<p>先前状态所需的所有数据。</p>\n<p>Caretaker（管理者）：负责保存好备忘录Memento，不能对备忘录的内存进行操作或检查。<br><a id=\"more\"></a></p>\n<h4 id=\"备忘录模式代码实现\"><a href=\"#备忘录模式代码实现\" class=\"headerlink\" title=\"备忘录模式代码实现\"></a>备忘录模式代码实现</h4><p>以一个Emp实体对象来作为例子</p>\n<p>首先，创建一个发起人：发起人内部保存着需要备忘的属性，它负责创建一个备忘录Memento，用以记录当前时刻它的内部状态，并可使用备忘录恢复内部状态。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//发起人：发起人内部有自身的内部状态，并且发起人可以创建备忘录和恢复备忘录</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EmpOriginator</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//需要备份的自身属性</span></div><div class=\"line\">    <span class=\"keyword\">private</span> String ename;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">double</span> salary;</div><div class=\"line\">    <span class=\"comment\">//备份</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> EmpMemento <span class=\"title\">memento</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> EmpMemento(<span class=\"keyword\">this</span>);<span class=\"comment\">//将当前自身对象备份</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//恢复</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">recovery</span><span class=\"params\">(EmpMemento emp)</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.ename = emp.getEname();</div><div class=\"line\">        <span class=\"keyword\">this</span>.age = emp.getAge();</div><div class=\"line\">        <span class=\"keyword\">this</span>.salary = emp.getSalary();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//省略get，set和带参构造器</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>创建备忘录对象：<font color=\"red\">备忘录就是用来备份发起人的数据，所以构造器需要提供一个发起人对象</font></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//备忘录对象</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EmpMemento</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//自身属性</span></div><div class=\"line\">    <span class=\"keyword\">private</span> String ename;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">double</span> salary; </div><div class=\"line\">    <span class=\"comment\">//构造备忘录对象时，需要传入一个需要备忘的对象（发起人）</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">EmpMemento</span><span class=\"params\">(EmpOriginator emp)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.ename = emp.getEname();</div><div class=\"line\">        <span class=\"keyword\">this</span>.age = emp.getAge();</div><div class=\"line\">        <span class=\"keyword\">this</span>.salary = emp.getSalary();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//省略3个属性的set,get方法</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>开始创建一个备忘录的管理者</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//管理者：管理备忘录对象</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CareTaker</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//需要管理的备忘录对象，这里也可以使用一个list容器来存储。这样可以备份多个点  </span></div><div class=\"line\">    <span class=\"keyword\">private</span> EmpMemento empMemento;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> EmpMemento <span class=\"title\">getEmpMemento</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> empMemento;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setEmpMemento</span><span class=\"params\">(EmpMemento empMemento)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.empMemento = empMemento;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>单次备份测试：测试只能备份一次的备忘录</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">    CareTaker taker = <span class=\"keyword\">new</span> CareTaker();<span class=\"comment\">//构建一个备忘录管理者</span></div><div class=\"line\">    <span class=\"comment\">//构建发起人</span></div><div class=\"line\">    EmpOriginator emp = <span class=\"keyword\">new</span> EmpOriginator(<span class=\"string\">\"张三\"</span>, <span class=\"number\">20</span>, <span class=\"number\">4000</span>);</div><div class=\"line\">    System.out.println(<span class=\"string\">\"第一次：\"</span>+emp.getEname()+<span class=\"string\">\"---\"</span>+emp.getAge()+<span class=\"string\">\"---\"</span>+emp.getSalary());</div><div class=\"line\">    <span class=\"comment\">//备份</span></div><div class=\"line\">    taker.setEmpMemento(emp.memento());</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//备份完了后再修改</span></div><div class=\"line\">    emp.setEname(<span class=\"string\">\"李四\"</span>);</div><div class=\"line\">    emp.setAge(<span class=\"number\">30</span>);</div><div class=\"line\">    emp.setSalary(<span class=\"number\">50000</span>);</div><div class=\"line\">    <span class=\"comment\">//然后再次打印</span></div><div class=\"line\">    System.out.println(<span class=\"string\">\"修改后：\"</span>+emp.getEname()+<span class=\"string\">\"---\"</span>+emp.getAge()+<span class=\"string\">\"---\"</span>+emp.getSalary());</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//开始恢复</span></div><div class=\"line\">    emp.recovery(taker.getEmpMemento());</div><div class=\"line\">    System.out.println(<span class=\"string\">\"恢复后：\"</span>+emp.getEname()+<span class=\"string\">\"---\"</span>+emp.getAge()+<span class=\"string\">\"---\"</span>+emp.getSalary());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>测试结果如下：</p>\n<pre><code>第一次：张三---20---4000.0\n\n修改后：李四---30---50000.0\n\n恢复后：张三---20---4000.0\n</code></pre><p>但是，这样的效果是只能备份一次。有时候我们需要备份多个点，根据需要来还原具体哪次的数据</p>\n<h5 id=\"多次备份\"><a href=\"#多次备份\" class=\"headerlink\" title=\"多次备份\"></a>多次备份</h5><p>使用Stack来存储备份数据，进行多次备份。用Stack的好处是<font color=\"red\">Stack是后进先出的</font>，也就是说：<strong>你最近一次备份的数据会优先获取到</strong>。</p>\n<p>修改管理者中的代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.util.Stack;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//管理者：管理备忘录对象</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CareTaker</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//需要管理的备忘录对象，这里也可以使用一个list容器来存储。这样可以备份多个点</span></div><div class=\"line\">    <span class=\"comment\">//或者使用一个Stack栈来保存，因为Stack是后进先出的</span></div><div class=\"line\">    <span class=\"keyword\">private</span> Stack&lt;EmpMemento&gt; stack = <span class=\"keyword\">new</span> Stack&lt;EmpMemento&gt;();</div><div class=\"line\">    <span class=\"comment\">//备份emp数据到栈中</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">mementoEmp</span><span class=\"params\">(EmpMemento emp)</span></span>&#123;</div><div class=\"line\">        stack.push(emp);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//从栈中获取最近一次备份的emp数据</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> EmpMemento <span class=\"title\">getEmpForStack</span><span class=\"params\">()</span></span>&#123;    </div><div class=\"line\">        <span class=\"keyword\">if</span> (!stack.empty()) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> stack.peek();<span class=\"comment\">//peek只获取，不删除</span></div><div class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//从栈中获取最近一次备份的emp数据,并且从栈中删除该数据</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> EmpMemento <span class=\"title\">getEmpForStackAndRemove</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!stack.empty()) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> stack.pop();<span class=\"comment\">//pop获取后删除该元素</span></div><div class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>再次测试：后进先出，也就是说。恢复的话恢复的是最后一次备份的数据</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">    CareTaker taker = <span class=\"keyword\">new</span> CareTaker();<span class=\"comment\">//构建一个备忘录管理者</span></div><div class=\"line\">    <span class=\"comment\">//构建发起人</span></div><div class=\"line\">    EmpOriginator emp = <span class=\"keyword\">new</span> EmpOriginator(<span class=\"string\">\"张三\"</span>, <span class=\"number\">20</span>, <span class=\"number\">4000</span>);</div><div class=\"line\">    System.out.println(<span class=\"string\">\"第一次：\"</span>+emp.getEname()+<span class=\"string\">\"---\"</span>+emp.getAge()+<span class=\"string\">\"---\"</span>+emp.getSalary());</div><div class=\"line\">    <span class=\"comment\">//第1次备份</span></div><div class=\"line\">    taker.mementoEmp(emp.memento());</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//备份完了后再修改</span></div><div class=\"line\">    emp.setEname(<span class=\"string\">\"李四\"</span>);</div><div class=\"line\">    emp.setAge(<span class=\"number\">30</span>);</div><div class=\"line\">    emp.setSalary(<span class=\"number\">50000</span>);</div><div class=\"line\">    <span class=\"comment\">//然后再次打印</span></div><div class=\"line\">    System.out.println(<span class=\"string\">\"1修改后：\"</span>+emp.getEname()+<span class=\"string\">\"---\"</span>+emp.getAge()+<span class=\"string\">\"---\"</span>+emp.getSalary());</div><div class=\"line\">    <span class=\"comment\">//第2次备份</span></div><div class=\"line\">    taker.mementoEmp(emp.memento());</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//备份完了后再修改</span></div><div class=\"line\">    emp.setEname(<span class=\"string\">\"李四2\"</span>);</div><div class=\"line\">    emp.setAge(<span class=\"number\">32</span>);</div><div class=\"line\">    emp.setSalary(<span class=\"number\">52000</span>);</div><div class=\"line\">    <span class=\"comment\">//然后再次打印</span></div><div class=\"line\">    System.out.println(<span class=\"string\">\"2修改后：\"</span>+emp.getEname()+<span class=\"string\">\"---\"</span>+emp.getAge()+<span class=\"string\">\"---\"</span>+emp.getSalary());</div><div class=\"line\">    <span class=\"comment\">//第3次备份</span></div><div class=\"line\">    taker.mementoEmp(emp.memento());</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//备份完了后再修改</span></div><div class=\"line\">    emp.setEname(<span class=\"string\">\"李四3\"</span>);</div><div class=\"line\">    emp.setAge(<span class=\"number\">33</span>);</div><div class=\"line\">    emp.setSalary(<span class=\"number\">32000</span>);</div><div class=\"line\">    <span class=\"comment\">//然后再次打印</span></div><div class=\"line\">    System.out.println(<span class=\"string\">\"3修改后：\"</span>+emp.getEname()+<span class=\"string\">\"---\"</span>+emp.getAge()+<span class=\"string\">\"---\"</span>+emp.getSalary());</div><div class=\"line\">    <span class=\"comment\">//第4次备份</span></div><div class=\"line\">    taker.mementoEmp(emp.memento());</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//开始恢复</span></div><div class=\"line\">    emp.recovery(taker.getEmpForStack());<span class=\"comment\">//恢复的是第4次备份的数据（3修改后）</span></div><div class=\"line\">    System.out.println(<span class=\"string\">\"恢复后：\"</span>+emp.getEname()+<span class=\"string\">\"---\"</span>+emp.getAge()+<span class=\"string\">\"---\"</span>+emp.getSalary());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>测试结果如下：</p>\n<pre><code>第一次：张三---20---4000.0\n\n1修改后：李四---30---50000.0\n\n2修改后：李四2---32---52000.0\n\n3修改后：李四3---33---32000.0\n\n恢复后：李四3---33---32000.0\n</code></pre><p>当然，也可以恢复之后把它从栈中删除。</p>\n<p>测试：恢复之前从栈中删除两个最近的数据</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//开始恢复</span></div><div class=\"line\">taker.getEmpForStackAndRemove();<span class=\"comment\">//删除最近一次的备份</span></div><div class=\"line\">taker.getEmpForStackAndRemove();<span class=\"comment\">//删除最近一次的备份</span></div><div class=\"line\">emp.recovery(taker.getEmpForStack());<span class=\"comment\">//此时获取的是原来未删除时倒数第二次的备份</span></div><div class=\"line\">System.out.println(<span class=\"string\">\"恢复后：\"</span>+emp.getEname()+<span class=\"string\">\"---\"</span>+emp.getAge()+<span class=\"string\">\"---\"</span>+emp.getSalary());</div></pre></td></tr></table></figure>\n<p>此时的结果就是如下：可见，这里已经把2和3给删除了</p>\n<pre><code>第一次：张三---20---4000.0\n\n1修改后：李四---30---50000.0\n\n2修改后：李四2---32---52000.0\n\n3修改后：李四3---33---32000.0\n\n恢复后：李四---30---50000.0\n</code></pre><h4 id=\"总结-应用场景\"><a href=\"#总结-应用场景\" class=\"headerlink\" title=\"总结-应用场景\"></a>总结-应用场景</h4><ol>\n<li><p>棋类游戏中的悔棋操作</p>\n</li>\n<li><p>软件中的撤销操作</p>\n</li>\n<li><p>数据库中的事务回滚操作</p>\n</li>\n<li><p>常用软件中的历史记录功能</p>\n</li>\n</ol>\n<h4 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h4><ul>\n<li>大话设计模式(带目录完整版).pdf</li>\n<li><a href=\"http://www.cnblogs.com/meet/p/5116407.html\" target=\"_blank\" rel=\"external\">备忘录模式（Memento） - FangZheng - 博客园</a></li>\n</ul>\n","excerpt":"<h2 id=\"大话设计模式——读后感（2）\"><a href=\"#大话设计模式——读后感（2）\" class=\"headerlink\" title=\"大话设计模式——读后感（2）\"></a><center>大话设计模式——读后感（2）</center></h2><h3 id=\"Tip2\"><a href=\"#Tip2\" class=\"headerlink\" title=\"Tip2\"></a>Tip2</h3><h4 id=\"备忘录模式\"><a href=\"#备忘录模式\" class=\"headerlink\" title=\"备忘录模式\"></a>备忘录模式</h4><blockquote>\n<p>备忘录模式：在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。这样以后就可将该对象恢复到原先保存的状态。</p>\n</blockquote>\n<p><img src=\"http://images2015.cnblogs.com/blog/527668/201601/527668-20160109144237450-356010664.jpg\" alt=\"\"></p>\n<p>Originator（发起人）：负责创建一个备忘录Memento，用以记录当前时刻它的内部状态，并可使用备忘录恢复内部状态。</p>\n<p>Originator可根据需要决定Memento存储Originator的哪些内部状态</p>\n<p>Memento（备忘录）：负责存储Originator对象的内部状态，并可防止Originator以外的其他对象访问备忘录Memento。</p>\n<p>备忘录有两个接口，Caretaker只能看到备忘录的窄接口，它只能将备忘录传递给其他对象。Originator能够看到一个宽接口，允许它访问返回到</p>\n<p>先前状态所需的所有数据。</p>\n<p>Caretaker（管理者）：负责保存好备忘录Memento，不能对备忘录的内存进行操作或检查。<br>","more":"</p>\n<h4 id=\"备忘录模式代码实现\"><a href=\"#备忘录模式代码实现\" class=\"headerlink\" title=\"备忘录模式代码实现\"></a>备忘录模式代码实现</h4><p>以一个Emp实体对象来作为例子</p>\n<p>首先，创建一个发起人：发起人内部保存着需要备忘的属性，它负责创建一个备忘录Memento，用以记录当前时刻它的内部状态，并可使用备忘录恢复内部状态。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//发起人：发起人内部有自身的内部状态，并且发起人可以创建备忘录和恢复备忘录</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EmpOriginator</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//需要备份的自身属性</span></div><div class=\"line\">    <span class=\"keyword\">private</span> String ename;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">double</span> salary;</div><div class=\"line\">    <span class=\"comment\">//备份</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> EmpMemento <span class=\"title\">memento</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> EmpMemento(<span class=\"keyword\">this</span>);<span class=\"comment\">//将当前自身对象备份</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//恢复</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">recovery</span><span class=\"params\">(EmpMemento emp)</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.ename = emp.getEname();</div><div class=\"line\">        <span class=\"keyword\">this</span>.age = emp.getAge();</div><div class=\"line\">        <span class=\"keyword\">this</span>.salary = emp.getSalary();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//省略get，set和带参构造器</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>创建备忘录对象：<font color=\"red\">备忘录就是用来备份发起人的数据，所以构造器需要提供一个发起人对象</font></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//备忘录对象</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EmpMemento</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//自身属性</span></div><div class=\"line\">    <span class=\"keyword\">private</span> String ename;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">double</span> salary; </div><div class=\"line\">    <span class=\"comment\">//构造备忘录对象时，需要传入一个需要备忘的对象（发起人）</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">EmpMemento</span><span class=\"params\">(EmpOriginator emp)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.ename = emp.getEname();</div><div class=\"line\">        <span class=\"keyword\">this</span>.age = emp.getAge();</div><div class=\"line\">        <span class=\"keyword\">this</span>.salary = emp.getSalary();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//省略3个属性的set,get方法</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>开始创建一个备忘录的管理者</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//管理者：管理备忘录对象</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CareTaker</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//需要管理的备忘录对象，这里也可以使用一个list容器来存储。这样可以备份多个点  </span></div><div class=\"line\">    <span class=\"keyword\">private</span> EmpMemento empMemento;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> EmpMemento <span class=\"title\">getEmpMemento</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> empMemento;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setEmpMemento</span><span class=\"params\">(EmpMemento empMemento)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.empMemento = empMemento;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>单次备份测试：测试只能备份一次的备忘录</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">    CareTaker taker = <span class=\"keyword\">new</span> CareTaker();<span class=\"comment\">//构建一个备忘录管理者</span></div><div class=\"line\">    <span class=\"comment\">//构建发起人</span></div><div class=\"line\">    EmpOriginator emp = <span class=\"keyword\">new</span> EmpOriginator(<span class=\"string\">\"张三\"</span>, <span class=\"number\">20</span>, <span class=\"number\">4000</span>);</div><div class=\"line\">    System.out.println(<span class=\"string\">\"第一次：\"</span>+emp.getEname()+<span class=\"string\">\"---\"</span>+emp.getAge()+<span class=\"string\">\"---\"</span>+emp.getSalary());</div><div class=\"line\">    <span class=\"comment\">//备份</span></div><div class=\"line\">    taker.setEmpMemento(emp.memento());</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//备份完了后再修改</span></div><div class=\"line\">    emp.setEname(<span class=\"string\">\"李四\"</span>);</div><div class=\"line\">    emp.setAge(<span class=\"number\">30</span>);</div><div class=\"line\">    emp.setSalary(<span class=\"number\">50000</span>);</div><div class=\"line\">    <span class=\"comment\">//然后再次打印</span></div><div class=\"line\">    System.out.println(<span class=\"string\">\"修改后：\"</span>+emp.getEname()+<span class=\"string\">\"---\"</span>+emp.getAge()+<span class=\"string\">\"---\"</span>+emp.getSalary());</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//开始恢复</span></div><div class=\"line\">    emp.recovery(taker.getEmpMemento());</div><div class=\"line\">    System.out.println(<span class=\"string\">\"恢复后：\"</span>+emp.getEname()+<span class=\"string\">\"---\"</span>+emp.getAge()+<span class=\"string\">\"---\"</span>+emp.getSalary());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>测试结果如下：</p>\n<pre><code>第一次：张三---20---4000.0\n\n修改后：李四---30---50000.0\n\n恢复后：张三---20---4000.0\n</code></pre><p>但是，这样的效果是只能备份一次。有时候我们需要备份多个点，根据需要来还原具体哪次的数据</p>\n<h5 id=\"多次备份\"><a href=\"#多次备份\" class=\"headerlink\" title=\"多次备份\"></a>多次备份</h5><p>使用Stack来存储备份数据，进行多次备份。用Stack的好处是<font color=\"red\">Stack是后进先出的</font>，也就是说：<strong>你最近一次备份的数据会优先获取到</strong>。</p>\n<p>修改管理者中的代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.util.Stack;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//管理者：管理备忘录对象</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CareTaker</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//需要管理的备忘录对象，这里也可以使用一个list容器来存储。这样可以备份多个点</span></div><div class=\"line\">    <span class=\"comment\">//或者使用一个Stack栈来保存，因为Stack是后进先出的</span></div><div class=\"line\">    <span class=\"keyword\">private</span> Stack&lt;EmpMemento&gt; stack = <span class=\"keyword\">new</span> Stack&lt;EmpMemento&gt;();</div><div class=\"line\">    <span class=\"comment\">//备份emp数据到栈中</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">mementoEmp</span><span class=\"params\">(EmpMemento emp)</span></span>&#123;</div><div class=\"line\">        stack.push(emp);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//从栈中获取最近一次备份的emp数据</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> EmpMemento <span class=\"title\">getEmpForStack</span><span class=\"params\">()</span></span>&#123;    </div><div class=\"line\">        <span class=\"keyword\">if</span> (!stack.empty()) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> stack.peek();<span class=\"comment\">//peek只获取，不删除</span></div><div class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//从栈中获取最近一次备份的emp数据,并且从栈中删除该数据</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> EmpMemento <span class=\"title\">getEmpForStackAndRemove</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!stack.empty()) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> stack.pop();<span class=\"comment\">//pop获取后删除该元素</span></div><div class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>再次测试：后进先出，也就是说。恢复的话恢复的是最后一次备份的数据</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">    CareTaker taker = <span class=\"keyword\">new</span> CareTaker();<span class=\"comment\">//构建一个备忘录管理者</span></div><div class=\"line\">    <span class=\"comment\">//构建发起人</span></div><div class=\"line\">    EmpOriginator emp = <span class=\"keyword\">new</span> EmpOriginator(<span class=\"string\">\"张三\"</span>, <span class=\"number\">20</span>, <span class=\"number\">4000</span>);</div><div class=\"line\">    System.out.println(<span class=\"string\">\"第一次：\"</span>+emp.getEname()+<span class=\"string\">\"---\"</span>+emp.getAge()+<span class=\"string\">\"---\"</span>+emp.getSalary());</div><div class=\"line\">    <span class=\"comment\">//第1次备份</span></div><div class=\"line\">    taker.mementoEmp(emp.memento());</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//备份完了后再修改</span></div><div class=\"line\">    emp.setEname(<span class=\"string\">\"李四\"</span>);</div><div class=\"line\">    emp.setAge(<span class=\"number\">30</span>);</div><div class=\"line\">    emp.setSalary(<span class=\"number\">50000</span>);</div><div class=\"line\">    <span class=\"comment\">//然后再次打印</span></div><div class=\"line\">    System.out.println(<span class=\"string\">\"1修改后：\"</span>+emp.getEname()+<span class=\"string\">\"---\"</span>+emp.getAge()+<span class=\"string\">\"---\"</span>+emp.getSalary());</div><div class=\"line\">    <span class=\"comment\">//第2次备份</span></div><div class=\"line\">    taker.mementoEmp(emp.memento());</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//备份完了后再修改</span></div><div class=\"line\">    emp.setEname(<span class=\"string\">\"李四2\"</span>);</div><div class=\"line\">    emp.setAge(<span class=\"number\">32</span>);</div><div class=\"line\">    emp.setSalary(<span class=\"number\">52000</span>);</div><div class=\"line\">    <span class=\"comment\">//然后再次打印</span></div><div class=\"line\">    System.out.println(<span class=\"string\">\"2修改后：\"</span>+emp.getEname()+<span class=\"string\">\"---\"</span>+emp.getAge()+<span class=\"string\">\"---\"</span>+emp.getSalary());</div><div class=\"line\">    <span class=\"comment\">//第3次备份</span></div><div class=\"line\">    taker.mementoEmp(emp.memento());</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//备份完了后再修改</span></div><div class=\"line\">    emp.setEname(<span class=\"string\">\"李四3\"</span>);</div><div class=\"line\">    emp.setAge(<span class=\"number\">33</span>);</div><div class=\"line\">    emp.setSalary(<span class=\"number\">32000</span>);</div><div class=\"line\">    <span class=\"comment\">//然后再次打印</span></div><div class=\"line\">    System.out.println(<span class=\"string\">\"3修改后：\"</span>+emp.getEname()+<span class=\"string\">\"---\"</span>+emp.getAge()+<span class=\"string\">\"---\"</span>+emp.getSalary());</div><div class=\"line\">    <span class=\"comment\">//第4次备份</span></div><div class=\"line\">    taker.mementoEmp(emp.memento());</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//开始恢复</span></div><div class=\"line\">    emp.recovery(taker.getEmpForStack());<span class=\"comment\">//恢复的是第4次备份的数据（3修改后）</span></div><div class=\"line\">    System.out.println(<span class=\"string\">\"恢复后：\"</span>+emp.getEname()+<span class=\"string\">\"---\"</span>+emp.getAge()+<span class=\"string\">\"---\"</span>+emp.getSalary());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>测试结果如下：</p>\n<pre><code>第一次：张三---20---4000.0\n\n1修改后：李四---30---50000.0\n\n2修改后：李四2---32---52000.0\n\n3修改后：李四3---33---32000.0\n\n恢复后：李四3---33---32000.0\n</code></pre><p>当然，也可以恢复之后把它从栈中删除。</p>\n<p>测试：恢复之前从栈中删除两个最近的数据</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//开始恢复</span></div><div class=\"line\">taker.getEmpForStackAndRemove();<span class=\"comment\">//删除最近一次的备份</span></div><div class=\"line\">taker.getEmpForStackAndRemove();<span class=\"comment\">//删除最近一次的备份</span></div><div class=\"line\">emp.recovery(taker.getEmpForStack());<span class=\"comment\">//此时获取的是原来未删除时倒数第二次的备份</span></div><div class=\"line\">System.out.println(<span class=\"string\">\"恢复后：\"</span>+emp.getEname()+<span class=\"string\">\"---\"</span>+emp.getAge()+<span class=\"string\">\"---\"</span>+emp.getSalary());</div></pre></td></tr></table></figure>\n<p>此时的结果就是如下：可见，这里已经把2和3给删除了</p>\n<pre><code>第一次：张三---20---4000.0\n\n1修改后：李四---30---50000.0\n\n2修改后：李四2---32---52000.0\n\n3修改后：李四3---33---32000.0\n\n恢复后：李四---30---50000.0\n</code></pre><h4 id=\"总结-应用场景\"><a href=\"#总结-应用场景\" class=\"headerlink\" title=\"总结-应用场景\"></a>总结-应用场景</h4><ol>\n<li><p>棋类游戏中的悔棋操作</p>\n</li>\n<li><p>软件中的撤销操作</p>\n</li>\n<li><p>数据库中的事务回滚操作</p>\n</li>\n<li><p>常用软件中的历史记录功能</p>\n</li>\n</ol>\n<h4 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h4><ul>\n<li>大话设计模式(带目录完整版).pdf</li>\n<li><a href=\"http://www.cnblogs.com/meet/p/5116407.html\">备忘录模式（Memento） - FangZheng - 博客园</a></li>\n</ul>"},{"title":"新的开始","comments":0,"abbrlink":"b585e161","date":"2017-11-01T04:48:10.000Z","copyright":true,"_content":"\n## <center>新的开始</center>\n\n### 初整理 ——  大话设计模式Tip1 读后笔记\n\n#### UML类图整理\n\n![Bfzu3.png](https://s1.ax2x.com/2017/11/06/Bfzu3.png)\n\n动物类 ('+' 表示public ，'-' 表示private，'#'表示protected)\n\n* 第一层类的名称 (抽象类是用斜体表示)\n* 第二层类的特性\n* 第三层类的函数方法\n\n飞翔 接口图\n+ 顶层是\\<<interface\\>>显示\n+ 第二层是方法\n<!--more-->\n另一种接口表现法是棒棒糖表示法（表现的唐老鸭实现了‘讲人话’的方法）。\n\n- 继承：空心三角形+实线 表示。\n- 实现：空心三角形+虚线 表示。\n- 关联：实线箭头 表示。\n- 聚合：空心的菱形+实线箭头 表示。（聚合表示一种弱的‘拥有关系’，体现的是A对象可以包含B对象，但B对象不是A对象的一部分[DPE]）\n- 合成：菱形+实线箭头，两端数字为基数，表示一端的类可以有几个实例。（合成是一种强的拥有关系，体现了严格的部分和整体的关系，部分和整体的生命周期一样）\n- 依赖：虚线箭头表示。\n\n#### 简单工厂模式\n\n简单工厂模式：用一个单独的类来做这个创造实例的过程。\n\n![BfO8z.png](https://s1.ax2x.com/2017/11/06/BfO8z.png)\n\n#### 策略模式\n\n策略模式：是一种定义一系列算法的方法，从概念上来看，所有这些算法完成的都是相同的工作，只是实现不同，它可以以相同的方式调用所有的算法，减少了各种算法类与使用算法类之间的耦合。\n\n策略模式的Strategy 类层次为Context 定义了一系列的可供重用的算法或行为。继承有助于析取出这些算法中的公共功能，\n\n策略模式的另一个优点是简化了单元测试，因为每个算法都有自己的类，可以通过自己的接口单独测试。\n\n当不同的行为堆砌在一个类中时，就很难避免使用条件语句来选择合适的行为。将这些行为封装在一个个独立的Strategy 类中，可以在使用这些行为的类中消除条件语句。\n\n策略模式就是用来封装算法的，但在实践中，我们发现可以用它来封装几乎任何类型的规则，只要在分析过程中听到需要在不同时间应用不同的业务规则，就可以考虑使用策略模式处理这种变化的可能性。（在基本的策略模式中，选择所用具体实现的职责由客户端对象承担，并转给策略模式的Context对象。）","source":"_posts/2017-11-01-新的开始.md","raw":"---\ntitle: 新的开始\ncategories: 设计模式\ntags:\n  - 设计模式\ncomments: false\nabbrlink: b585e161\ndate: 2017-11-01 12:48:10\ncopyright: true\n---\n\n## <center>新的开始</center>\n\n### 初整理 ——  大话设计模式Tip1 读后笔记\n\n#### UML类图整理\n\n![Bfzu3.png](https://s1.ax2x.com/2017/11/06/Bfzu3.png)\n\n动物类 ('+' 表示public ，'-' 表示private，'#'表示protected)\n\n* 第一层类的名称 (抽象类是用斜体表示)\n* 第二层类的特性\n* 第三层类的函数方法\n\n飞翔 接口图\n+ 顶层是\\<<interface\\>>显示\n+ 第二层是方法\n<!--more-->\n另一种接口表现法是棒棒糖表示法（表现的唐老鸭实现了‘讲人话’的方法）。\n\n- 继承：空心三角形+实线 表示。\n- 实现：空心三角形+虚线 表示。\n- 关联：实线箭头 表示。\n- 聚合：空心的菱形+实线箭头 表示。（聚合表示一种弱的‘拥有关系’，体现的是A对象可以包含B对象，但B对象不是A对象的一部分[DPE]）\n- 合成：菱形+实线箭头，两端数字为基数，表示一端的类可以有几个实例。（合成是一种强的拥有关系，体现了严格的部分和整体的关系，部分和整体的生命周期一样）\n- 依赖：虚线箭头表示。\n\n#### 简单工厂模式\n\n简单工厂模式：用一个单独的类来做这个创造实例的过程。\n\n![BfO8z.png](https://s1.ax2x.com/2017/11/06/BfO8z.png)\n\n#### 策略模式\n\n策略模式：是一种定义一系列算法的方法，从概念上来看，所有这些算法完成的都是相同的工作，只是实现不同，它可以以相同的方式调用所有的算法，减少了各种算法类与使用算法类之间的耦合。\n\n策略模式的Strategy 类层次为Context 定义了一系列的可供重用的算法或行为。继承有助于析取出这些算法中的公共功能，\n\n策略模式的另一个优点是简化了单元测试，因为每个算法都有自己的类，可以通过自己的接口单独测试。\n\n当不同的行为堆砌在一个类中时，就很难避免使用条件语句来选择合适的行为。将这些行为封装在一个个独立的Strategy 类中，可以在使用这些行为的类中消除条件语句。\n\n策略模式就是用来封装算法的，但在实践中，我们发现可以用它来封装几乎任何类型的规则，只要在分析过程中听到需要在不同时间应用不同的业务规则，就可以考虑使用策略模式处理这种变化的可能性。（在基本的策略模式中，选择所用具体实现的职责由客户端对象承担，并转给策略模式的Context对象。）","slug":"新的开始","published":1,"updated":"2018-02-26T10:00:27.539Z","layout":"post","photos":[],"link":"","_id":"cje7yhv3700097ku6cdei4uc0","content":"<h2 id=\"新的开始\"><a href=\"#新的开始\" class=\"headerlink\" title=\"新的开始\"></a><center>新的开始</center></h2><h3 id=\"初整理-——-大话设计模式Tip1-读后笔记\"><a href=\"#初整理-——-大话设计模式Tip1-读后笔记\" class=\"headerlink\" title=\"初整理 ——  大话设计模式Tip1 读后笔记\"></a>初整理 ——  大话设计模式Tip1 读后笔记</h3><h4 id=\"UML类图整理\"><a href=\"#UML类图整理\" class=\"headerlink\" title=\"UML类图整理\"></a>UML类图整理</h4><p><img src=\"https://s1.ax2x.com/2017/11/06/Bfzu3.png\" alt=\"Bfzu3.png\"></p>\n<p>动物类 (‘+’ 表示public ，’-‘ 表示private，’#’表示protected)</p>\n<ul>\n<li>第一层类的名称 (抽象类是用斜体表示)</li>\n<li>第二层类的特性</li>\n<li>第三层类的函数方法</li>\n</ul>\n<p>飞翔 接口图</p>\n<ul>\n<li>顶层是\\&lt;<interface\\>&gt;显示</interface\\></li>\n<li>第二层是方法<a id=\"more\"></a>\n另一种接口表现法是棒棒糖表示法（表现的唐老鸭实现了‘讲人话’的方法）。</li>\n</ul>\n<ul>\n<li>继承：空心三角形+实线 表示。</li>\n<li>实现：空心三角形+虚线 表示。</li>\n<li>关联：实线箭头 表示。</li>\n<li>聚合：空心的菱形+实线箭头 表示。（聚合表示一种弱的‘拥有关系’，体现的是A对象可以包含B对象，但B对象不是A对象的一部分[DPE]）</li>\n<li>合成：菱形+实线箭头，两端数字为基数，表示一端的类可以有几个实例。（合成是一种强的拥有关系，体现了严格的部分和整体的关系，部分和整体的生命周期一样）</li>\n<li>依赖：虚线箭头表示。</li>\n</ul>\n<h4 id=\"简单工厂模式\"><a href=\"#简单工厂模式\" class=\"headerlink\" title=\"简单工厂模式\"></a>简单工厂模式</h4><p>简单工厂模式：用一个单独的类来做这个创造实例的过程。</p>\n<p><img src=\"https://s1.ax2x.com/2017/11/06/BfO8z.png\" alt=\"BfO8z.png\"></p>\n<h4 id=\"策略模式\"><a href=\"#策略模式\" class=\"headerlink\" title=\"策略模式\"></a>策略模式</h4><p>策略模式：是一种定义一系列算法的方法，从概念上来看，所有这些算法完成的都是相同的工作，只是实现不同，它可以以相同的方式调用所有的算法，减少了各种算法类与使用算法类之间的耦合。</p>\n<p>策略模式的Strategy 类层次为Context 定义了一系列的可供重用的算法或行为。继承有助于析取出这些算法中的公共功能，</p>\n<p>策略模式的另一个优点是简化了单元测试，因为每个算法都有自己的类，可以通过自己的接口单独测试。</p>\n<p>当不同的行为堆砌在一个类中时，就很难避免使用条件语句来选择合适的行为。将这些行为封装在一个个独立的Strategy 类中，可以在使用这些行为的类中消除条件语句。</p>\n<p>策略模式就是用来封装算法的，但在实践中，我们发现可以用它来封装几乎任何类型的规则，只要在分析过程中听到需要在不同时间应用不同的业务规则，就可以考虑使用策略模式处理这种变化的可能性。（在基本的策略模式中，选择所用具体实现的职责由客户端对象承担，并转给策略模式的Context对象。）</p>\n","excerpt":"<h2 id=\"新的开始\"><a href=\"#新的开始\" class=\"headerlink\" title=\"新的开始\"></a><center>新的开始</center></h2><h3 id=\"初整理-——-大话设计模式Tip1-读后笔记\"><a href=\"#初整理-——-大话设计模式Tip1-读后笔记\" class=\"headerlink\" title=\"初整理 ——  大话设计模式Tip1 读后笔记\"></a>初整理 ——  大话设计模式Tip1 读后笔记</h3><h4 id=\"UML类图整理\"><a href=\"#UML类图整理\" class=\"headerlink\" title=\"UML类图整理\"></a>UML类图整理</h4><p><img src=\"https://s1.ax2x.com/2017/11/06/Bfzu3.png\" alt=\"Bfzu3.png\"></p>\n<p>动物类 (‘+’ 表示public ，’-‘ 表示private，’#’表示protected)</p>\n<ul>\n<li>第一层类的名称 (抽象类是用斜体表示)</li>\n<li>第二层类的特性</li>\n<li>第三层类的函数方法</li>\n</ul>\n<p>飞翔 接口图</p>\n<ul>\n<li>顶层是\\&lt;<interface\\>&gt;显示</li>\n<li>第二层是方法","more":"另一种接口表现法是棒棒糖表示法（表现的唐老鸭实现了‘讲人话’的方法）。</li>\n</ul>\n<ul>\n<li>继承：空心三角形+实线 表示。</li>\n<li>实现：空心三角形+虚线 表示。</li>\n<li>关联：实线箭头 表示。</li>\n<li>聚合：空心的菱形+实线箭头 表示。（聚合表示一种弱的‘拥有关系’，体现的是A对象可以包含B对象，但B对象不是A对象的一部分[DPE]）</li>\n<li>合成：菱形+实线箭头，两端数字为基数，表示一端的类可以有几个实例。（合成是一种强的拥有关系，体现了严格的部分和整体的关系，部分和整体的生命周期一样）</li>\n<li>依赖：虚线箭头表示。</li>\n</ul>\n<h4 id=\"简单工厂模式\"><a href=\"#简单工厂模式\" class=\"headerlink\" title=\"简单工厂模式\"></a>简单工厂模式</h4><p>简单工厂模式：用一个单独的类来做这个创造实例的过程。</p>\n<p><img src=\"https://s1.ax2x.com/2017/11/06/BfO8z.png\" alt=\"BfO8z.png\"></p>\n<h4 id=\"策略模式\"><a href=\"#策略模式\" class=\"headerlink\" title=\"策略模式\"></a>策略模式</h4><p>策略模式：是一种定义一系列算法的方法，从概念上来看，所有这些算法完成的都是相同的工作，只是实现不同，它可以以相同的方式调用所有的算法，减少了各种算法类与使用算法类之间的耦合。</p>\n<p>策略模式的Strategy 类层次为Context 定义了一系列的可供重用的算法或行为。继承有助于析取出这些算法中的公共功能，</p>\n<p>策略模式的另一个优点是简化了单元测试，因为每个算法都有自己的类，可以通过自己的接口单独测试。</p>\n<p>当不同的行为堆砌在一个类中时，就很难避免使用条件语句来选择合适的行为。将这些行为封装在一个个独立的Strategy 类中，可以在使用这些行为的类中消除条件语句。</p>\n<p>策略模式就是用来封装算法的，但在实践中，我们发现可以用它来封装几乎任何类型的规则，只要在分析过程中听到需要在不同时间应用不同的业务规则，就可以考虑使用策略模式处理这种变化的可能性。（在基本的策略模式中，选择所用具体实现的职责由客户端对象承担，并转给策略模式的Context对象。）</p>"},{"title":"Let's Encrypt证书使用","comments":0,"abbrlink":"ec1907ff","date":"2017-06-08T02:55:52.000Z","copyright":true,"_content":"\n## <center>Let's Encrypt证书使用<center>\n\n>certbot软件从Github直接下载，在CentOS6、7下执行都没有问题。\n\n### 设置yum代码库\n\n* certbot-auto运行是会自动连接下载依赖包，启用163(http://mirrors.163.com/.help/centos.html) 和epel(https://fedoraproject.org/wiki/EPEL#How_can_I_use_these_extra_packages.3F)库，提前准备好环境，更多查看https://certbot.eff.org/#centosrhel6-other\n\n``` bash\n1.wget http://mirrors.163.com/.help/CentOS6-Base-163.repo\n2.mv CentOS6-Base-163.repo /etc/yum.repos.d/\n3.wget https://dl.fedoraproject.org/pub/epel/epel-release-latest-6.noarch.rpm\n4.rpm -ivh epel-release-latest-6.noarch.rpm\n```\n\n修改CentOS6-Base-163.repo文件，将$releasever替换为6\n修改epel.repo文件，将$releasever替换为6，将http://download.fedoraproject.org/pub/epel修改为https://mirrors.tuna.tsinghua.edu.cn/epel\n运行以下命令生成缓存\n\n``` bash\nyum clean all\nyum makecache\n```\n安装git软件，也可直接从https://github.com/certbot/certbot下载\n``` bash\nyum install git\n```\n<!--more--> \n### 防火墙修改\n修改/etc/sysconfig/iptables\n``` bash\nvim /etc/sysconfig/iptables\n```\n\n查看是否有80、443端口允许访问记录\n``` bash\n-A INPUT -i eth0 -p tcp -m tcp --dport 80 -j ACCEPT\n-A INPUT -i eth0 -p tcp -m tcp --dport 443 -j ACCEPT\n```\n\n### 获取Let's Encrypt证书\n\ncertbot-auto运行是会自动连接下载依赖包，执行过程出现问题具体分析原因\n``` bash\ngit clone https://github.com/certbot/certbot\ncd certbot\n```\n\ncertbot-auto命令在root用户下执行，certbot-auto会执行更新certbot版本和安装依赖包，执行需要联网，有时较慢\n``` bash\n./certbot-auto certonly --standalone --email 你的邮箱 -d 你的域名\n```\n\n生成的证书放在/etc/letsencrypt/live/[网站域名]下，证书有效期3个月\n\n| 文件名           | 内容                             |\n| ------------- | ------------------------------ |\n| cert.pem      | 服务端证书                          |\n| chain.pem     | 浏览器需要的所有证书但不包括服务端证书，比如根证书和中间证书 |\n| fullchain.pem | 包括了cert.pem和chain.pem的内容       |\n| privkey.pem   | 证书的私钥                          |\n\n### Apache 设置\n\nApache测试版本\n\n``` bash\nServer version: Apache/2.4.6 (CentOS)\nServer built:   Nov 14 2016 18:04:44\n```\n\n修改/etc/httpd/conf.d/ssl.conf\n``` bash\nListen 443 https\n<VirtualHost _default_:443>\nHeader always set Strict-Transport-Security \"max-age=63072000; includeSubdomains; preload\"\nSSLEngine on\nSSLCertificateFile /etc/letsencrypt/live/域名/cert.pem\nSSLCertificateKeyFile /etc/letsencrypt/live/域名/privkey.pem\nSSLCertificateChainFile /etc/letsencrypt/live/域名/fullchain.pem\n</VirtualHost>\n```\n\nHSTS（HTTP Strict Transport Security）的作用是强制客户端（如浏览器）使用HTTPS与服务器创建连接。\n\n### Tomcat设置\n``` bash\ncp /etc/letsencrypt/live/域名/*.pem apache-tomcat-8.5.5/conf/\ncd apache-tomcat-8.5.5/conf/\nchown 用户:组 *.pem\n```\n\n修改conf/server.xml文件：\n\n``` bash\n<Connector port=\"8443\" protocol=\"org.apache.coyote.http11.Http11NioProtocol\"\n           maxThreads=\"150\" SSLEnabled=\"true\" >\n    <UpgradeProtocol className=\"org.apache.coyote.http2.Http2Protocol\" />\n    <SSLHostConfig>\n        <Certificate certificateKeyFile=\"conf/privkey.pem\"\n                     certificateFile=\"conf/cert.pem\"\n                     certificateChainFile=\"conf/fullchain.pem\"\n                     type=\"RSA\" />\n    </SSLHostConfig>\n</Connector>\n```\n\n### Nginx设置\n\n修改nginx的配置文件/usr/local/nginx/conf/nginx.conf，实现https转到内网tomcat的http服务，注：以下配置未实现tomcat识别来自https的请求，详细见问题3\n\n```\nserver {\n     listen 8443;\n     server_name localhost;\n     ssl on;\n     ssl_certificate /etc/letsencrypt/live/域名/fullchain.pem;\n     ssl_certificate_key /etc/letsencrypt/live/域名/privkey.pem;\n     server_name_in_redirect off;\n     proxy_set_header Host $host:$server_port;\n     proxy_connect_timeout 60s;\n     proxy_read_timeout 5400s;\n     proxy_send_timeout 5400s;\n     proxy_set_header X-Real-IP $remote_addr;\n     proxy_set_header REMOTE-HOST $remote_addr;\n     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n     index index.html index.htm index.jsp index.do;\n     location ^~ /ZhsqApp/{\n         proxy_pass  http://192.168.100.10:8080;\n         client_max_body_size    100m;\n     }\n }\n```\n\n### Weblogic 配置\n\nweblogic必须是10.3.6及以上版本，才能使用Let's Encrypt的证书，Let's Encrypt采用SHA256withRSA，低版本的不支持SHA256withRSA\n\n### 生成密钥库\n\n执行openssl命令生成fullchain_and_key.p12，执行keytool命令生成密钥库文件weblogic.jks\n\n```\nopenssl pkcs12 -export -in fullchain.pem -inkey privkey.pem -out fullchain_and_key.p12 -name weblogic -passout pass:123456\nkeytool -importkeystore -deststorepass 123456   -destkeystore weblogic.jks -srckeystore fullchain_and_key.p12 -srcstoretype PKCS12 -srcstorepass 123456  -alias weblogic\n```\n\nprivkey.pem、fullchain.pem为Let's Encrypt生成文件，密码可自行修改。注-name与-alias别名保存一致，-passout参数的pass:需保留。-passout与-srcstorepass密码保持一致， -deststorepass需记住在weblogic配置使用。\n\n### 生成信任库\n\n执行keytool命令生成信任库文件trust.jks\n```\nkeytool -importcert -alias rootCA -trustcacerts -file cert.pem -keystore trust.jks -storepass 123456\n```\n\ncert.pem为Let's Encrypt生成文件，密码可自行修改。 -storepass需记住在weblogic配置使用。\n\n### weblogic配置\n\n#### 启用SSL监听端口\n\n登录weblogic控制台 -> 服务器 -> 选择服务器管理 -> 配置标签 -> 一般信息子标签页 -> 启用 SSL 监听端口 -> 修改端口7002 -> 保存\n\n在Linux下设置端口小于1024的，需要使用管理员用户启动weblogic。\n\n\n![](http://f3e6036a.fromwiz.com/share/resources/b0c2bbb1-1a90-4b45-a09a-c7aa9804cd7c/index_files/64659649.png)\n\n#### 密钥库配置\n\n进入配置标签 -> 密钥库标签页\n\n1.密钥库点更改，选择定制标识和定制信任，点击保存。\n2.定制标识密钥库，填写weblogic.jks全路径\n定制标识密钥库类型，填写jks\n3.定制标识密钥库密码短语，填写生成密钥库时 -deststorepass写的密码\n4.确认定制标识密钥库密码短语，填写生成密钥库时 -deststorepass写的密码\n5.定制信任密钥库，填写trust.jks全路径\n6.定制信任密钥库类型，填写jks\n7.定制信任密钥库密码短语，填写生成信任库时 -storepass写的密码\n8.确认定制信任密钥库密码短语，填写生成信任库时 -storepass写的密码\n\n![](http://f3e6036a.fromwiz.com/share/resources/b0c2bbb1-1a90-4b45-a09a-c7aa9804cd7c/index_files/65091944.png)\n\n#### SSL配置\n\n进入配置标签 -> SSL标签页\n\n1.私有密钥别名，填写生成密钥库时的别名\n2.私有密钥密码短语，填写生成密钥库时 -deststorepass写的密码\n3.确认私有密钥密码短语，填写生成密钥库时 -deststorepass写的密码\n点击保存\n\n![](http://f3e6036a.fromwiz.com/share/resources/b0c2bbb1-1a90-4b45-a09a-c7aa9804cd7c/index_files/65673128.png)\n\nweblogic 10.3. 6 版本还需要做额外配置，SSL标签页中，点击高级，选中使用 JSSE SSL，点击保存\n\n![](http://f3e6036a.fromwiz.com/share/resources/b0c2bbb1-1a90-4b45-a09a-c7aa9804cd7c/index_files/65716484.png)\n\n重启weblogic服务，测试https访问。\n\n### 更新证书\n\n```\n./certbot-auto renew\n```\n\n更新证书之后，需要执行tomcat、weblogic对应配置内容。\n\n### 问题\n\n#### 问题1、Let's Encrypt安装好之后在PC端可以正常访问，但在手机端提示不受信任的\n\n主要原因是缺少中级证书。生成的LE证书后使用的需要使用fullchain.pem，打开后会发现有两段证书，第一段是LE的证书，第二段才是你网站的证书。而你只有网站的证书，而没有LE的证书。\n\n#### 问题2、如何关闭SSL3协议\n\n查看http://disablessl3.com如何关闭apache、nginx的ssl3协议\ntomcat修改，修改server.xml,\n\n\n```\n<Connector port=\"8443\" protocol=\"org.apache.coyote.http11.Http11NioProtocol\"\n               maxThreads=\"150\" SSLEnabled=\"true\"\n               sslProtocol=\"TLS\" sslEnabledProtocols=\"TLSv1,TLSv1.1,TLSv1.2\"  >\n```\n\n#### 问题3、nginx采用Let's Encrypt证书，如何实现https转http，后端识别来自https的请求\n\n1.修改nginx的配置文件\n修改nginx的配置文件/usr/local/nginx/conf/nginx.conf，实现https转到内网tomcat的http服务，注：以下配置未实现tomcat识别来自https的请求，详细见问题2\n\n```\nserver {\n    listen 8443;\n    server_name localhost;\n    ssl on;\n    ssl_certificate /etc/letsencrypt/live/域名/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/域名/privkey.pem;\n    server_name_in_redirect off;\n    proxy_set_header Host $host:$server_port;\n    proxy_connect_timeout 60s;\n    proxy_read_timeout 5400s;\n    proxy_send_timeout 5400s;\n    proxy_set_header X-Real-IP $remote_addr;\n    proxy_set_header REMOTE-HOST $remote_addr;\n    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n              proxy_set_header X-Forwarded-Proto  $scheme;\n              proxy_set_header WL-Proxy-SSL true;\n              add_header Strict-Transport-Security \"max-age=63072000; includeSubdomains;   \";\n    index index.html index.htm index.jsp index.do;\n    location ^~ /ZhsqApp/{\n        proxy_pass  http://192.168.100.10:8080;\n        client_max_body_size    100m;\n    }\n  }\n```\n\n主要增加3处配置：\n> proxy_set_header X-Forwarded-Proto  $scheme; tomcat可识别参数\n> proxy_set_header WL-Proxy-SSL true; weblogic可识别参数\n> add_header Strict-Transport-Security \"max-age=63072000; includeSubdomains; \"; 启用HSTS功能，浏览器在63072000秒时间内默认以https请求服务\n\n2.tomcat启用识别X-Forwarded-Proto设置\n修改配置文件server.xml，在Engine下添加下面内容\n\n```\n<Valve className=\"org.apache.catalina.valves.RemoteIpValve\"   remoteIpHeader=\"X-Forwarded-For\"\n           protocolHeader=\"X-Forwarded-Proto\"\n           protocolHeaderHttpsValue=\"https\"/>\n```\n\n做好上述配置，重启tomcat。request.getScheme()的值显示https\n另外，可参考Nginx SSL+tomcat集群,request.getScheme() 取到https正确的协议内容\n\n3.weblogic启用识别WL-Proxy-SSL 设置\n进入console界面，域名->配置->Web应用程序，勾选启用 WebLogic 插件，保存\n\n![](http://f3e6036a.fromwiz.com/share/resources/b0c2bbb1-1a90-4b45-a09a-c7aa9804cd7c/index_files/65317389.png)\n![](http://f3e6036a.fromwiz.com/share/resources/b0c2bbb1-1a90-4b45-a09a-c7aa9804cd7c/index_files/65382741.png)\n\n做好上述配置，重启weblogic。request.getScheme()的值显示https\n另外，可参考HTTPS/SSL/Spring Security doesn't work in both a load balancer and non-load balancer environment #424内容\n","source":"_posts/2017-06-08-Let-s-Encrypt证书使用.md","raw":"---\ntitle: Let's Encrypt证书使用\ncategories: 技术随记\ntags:\n  - Let's Encrypt\ncomments: false\nabbrlink: ec1907ff\ndate: 2017-06-08 10:55:52\ncopyright: true\n---\n\n## <center>Let's Encrypt证书使用<center>\n\n>certbot软件从Github直接下载，在CentOS6、7下执行都没有问题。\n\n### 设置yum代码库\n\n* certbot-auto运行是会自动连接下载依赖包，启用163(http://mirrors.163.com/.help/centos.html) 和epel(https://fedoraproject.org/wiki/EPEL#How_can_I_use_these_extra_packages.3F)库，提前准备好环境，更多查看https://certbot.eff.org/#centosrhel6-other\n\n``` bash\n1.wget http://mirrors.163.com/.help/CentOS6-Base-163.repo\n2.mv CentOS6-Base-163.repo /etc/yum.repos.d/\n3.wget https://dl.fedoraproject.org/pub/epel/epel-release-latest-6.noarch.rpm\n4.rpm -ivh epel-release-latest-6.noarch.rpm\n```\n\n修改CentOS6-Base-163.repo文件，将$releasever替换为6\n修改epel.repo文件，将$releasever替换为6，将http://download.fedoraproject.org/pub/epel修改为https://mirrors.tuna.tsinghua.edu.cn/epel\n运行以下命令生成缓存\n\n``` bash\nyum clean all\nyum makecache\n```\n安装git软件，也可直接从https://github.com/certbot/certbot下载\n``` bash\nyum install git\n```\n<!--more--> \n### 防火墙修改\n修改/etc/sysconfig/iptables\n``` bash\nvim /etc/sysconfig/iptables\n```\n\n查看是否有80、443端口允许访问记录\n``` bash\n-A INPUT -i eth0 -p tcp -m tcp --dport 80 -j ACCEPT\n-A INPUT -i eth0 -p tcp -m tcp --dport 443 -j ACCEPT\n```\n\n### 获取Let's Encrypt证书\n\ncertbot-auto运行是会自动连接下载依赖包，执行过程出现问题具体分析原因\n``` bash\ngit clone https://github.com/certbot/certbot\ncd certbot\n```\n\ncertbot-auto命令在root用户下执行，certbot-auto会执行更新certbot版本和安装依赖包，执行需要联网，有时较慢\n``` bash\n./certbot-auto certonly --standalone --email 你的邮箱 -d 你的域名\n```\n\n生成的证书放在/etc/letsencrypt/live/[网站域名]下，证书有效期3个月\n\n| 文件名           | 内容                             |\n| ------------- | ------------------------------ |\n| cert.pem      | 服务端证书                          |\n| chain.pem     | 浏览器需要的所有证书但不包括服务端证书，比如根证书和中间证书 |\n| fullchain.pem | 包括了cert.pem和chain.pem的内容       |\n| privkey.pem   | 证书的私钥                          |\n\n### Apache 设置\n\nApache测试版本\n\n``` bash\nServer version: Apache/2.4.6 (CentOS)\nServer built:   Nov 14 2016 18:04:44\n```\n\n修改/etc/httpd/conf.d/ssl.conf\n``` bash\nListen 443 https\n<VirtualHost _default_:443>\nHeader always set Strict-Transport-Security \"max-age=63072000; includeSubdomains; preload\"\nSSLEngine on\nSSLCertificateFile /etc/letsencrypt/live/域名/cert.pem\nSSLCertificateKeyFile /etc/letsencrypt/live/域名/privkey.pem\nSSLCertificateChainFile /etc/letsencrypt/live/域名/fullchain.pem\n</VirtualHost>\n```\n\nHSTS（HTTP Strict Transport Security）的作用是强制客户端（如浏览器）使用HTTPS与服务器创建连接。\n\n### Tomcat设置\n``` bash\ncp /etc/letsencrypt/live/域名/*.pem apache-tomcat-8.5.5/conf/\ncd apache-tomcat-8.5.5/conf/\nchown 用户:组 *.pem\n```\n\n修改conf/server.xml文件：\n\n``` bash\n<Connector port=\"8443\" protocol=\"org.apache.coyote.http11.Http11NioProtocol\"\n           maxThreads=\"150\" SSLEnabled=\"true\" >\n    <UpgradeProtocol className=\"org.apache.coyote.http2.Http2Protocol\" />\n    <SSLHostConfig>\n        <Certificate certificateKeyFile=\"conf/privkey.pem\"\n                     certificateFile=\"conf/cert.pem\"\n                     certificateChainFile=\"conf/fullchain.pem\"\n                     type=\"RSA\" />\n    </SSLHostConfig>\n</Connector>\n```\n\n### Nginx设置\n\n修改nginx的配置文件/usr/local/nginx/conf/nginx.conf，实现https转到内网tomcat的http服务，注：以下配置未实现tomcat识别来自https的请求，详细见问题3\n\n```\nserver {\n     listen 8443;\n     server_name localhost;\n     ssl on;\n     ssl_certificate /etc/letsencrypt/live/域名/fullchain.pem;\n     ssl_certificate_key /etc/letsencrypt/live/域名/privkey.pem;\n     server_name_in_redirect off;\n     proxy_set_header Host $host:$server_port;\n     proxy_connect_timeout 60s;\n     proxy_read_timeout 5400s;\n     proxy_send_timeout 5400s;\n     proxy_set_header X-Real-IP $remote_addr;\n     proxy_set_header REMOTE-HOST $remote_addr;\n     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n     index index.html index.htm index.jsp index.do;\n     location ^~ /ZhsqApp/{\n         proxy_pass  http://192.168.100.10:8080;\n         client_max_body_size    100m;\n     }\n }\n```\n\n### Weblogic 配置\n\nweblogic必须是10.3.6及以上版本，才能使用Let's Encrypt的证书，Let's Encrypt采用SHA256withRSA，低版本的不支持SHA256withRSA\n\n### 生成密钥库\n\n执行openssl命令生成fullchain_and_key.p12，执行keytool命令生成密钥库文件weblogic.jks\n\n```\nopenssl pkcs12 -export -in fullchain.pem -inkey privkey.pem -out fullchain_and_key.p12 -name weblogic -passout pass:123456\nkeytool -importkeystore -deststorepass 123456   -destkeystore weblogic.jks -srckeystore fullchain_and_key.p12 -srcstoretype PKCS12 -srcstorepass 123456  -alias weblogic\n```\n\nprivkey.pem、fullchain.pem为Let's Encrypt生成文件，密码可自行修改。注-name与-alias别名保存一致，-passout参数的pass:需保留。-passout与-srcstorepass密码保持一致， -deststorepass需记住在weblogic配置使用。\n\n### 生成信任库\n\n执行keytool命令生成信任库文件trust.jks\n```\nkeytool -importcert -alias rootCA -trustcacerts -file cert.pem -keystore trust.jks -storepass 123456\n```\n\ncert.pem为Let's Encrypt生成文件，密码可自行修改。 -storepass需记住在weblogic配置使用。\n\n### weblogic配置\n\n#### 启用SSL监听端口\n\n登录weblogic控制台 -> 服务器 -> 选择服务器管理 -> 配置标签 -> 一般信息子标签页 -> 启用 SSL 监听端口 -> 修改端口7002 -> 保存\n\n在Linux下设置端口小于1024的，需要使用管理员用户启动weblogic。\n\n\n![](http://f3e6036a.fromwiz.com/share/resources/b0c2bbb1-1a90-4b45-a09a-c7aa9804cd7c/index_files/64659649.png)\n\n#### 密钥库配置\n\n进入配置标签 -> 密钥库标签页\n\n1.密钥库点更改，选择定制标识和定制信任，点击保存。\n2.定制标识密钥库，填写weblogic.jks全路径\n定制标识密钥库类型，填写jks\n3.定制标识密钥库密码短语，填写生成密钥库时 -deststorepass写的密码\n4.确认定制标识密钥库密码短语，填写生成密钥库时 -deststorepass写的密码\n5.定制信任密钥库，填写trust.jks全路径\n6.定制信任密钥库类型，填写jks\n7.定制信任密钥库密码短语，填写生成信任库时 -storepass写的密码\n8.确认定制信任密钥库密码短语，填写生成信任库时 -storepass写的密码\n\n![](http://f3e6036a.fromwiz.com/share/resources/b0c2bbb1-1a90-4b45-a09a-c7aa9804cd7c/index_files/65091944.png)\n\n#### SSL配置\n\n进入配置标签 -> SSL标签页\n\n1.私有密钥别名，填写生成密钥库时的别名\n2.私有密钥密码短语，填写生成密钥库时 -deststorepass写的密码\n3.确认私有密钥密码短语，填写生成密钥库时 -deststorepass写的密码\n点击保存\n\n![](http://f3e6036a.fromwiz.com/share/resources/b0c2bbb1-1a90-4b45-a09a-c7aa9804cd7c/index_files/65673128.png)\n\nweblogic 10.3. 6 版本还需要做额外配置，SSL标签页中，点击高级，选中使用 JSSE SSL，点击保存\n\n![](http://f3e6036a.fromwiz.com/share/resources/b0c2bbb1-1a90-4b45-a09a-c7aa9804cd7c/index_files/65716484.png)\n\n重启weblogic服务，测试https访问。\n\n### 更新证书\n\n```\n./certbot-auto renew\n```\n\n更新证书之后，需要执行tomcat、weblogic对应配置内容。\n\n### 问题\n\n#### 问题1、Let's Encrypt安装好之后在PC端可以正常访问，但在手机端提示不受信任的\n\n主要原因是缺少中级证书。生成的LE证书后使用的需要使用fullchain.pem，打开后会发现有两段证书，第一段是LE的证书，第二段才是你网站的证书。而你只有网站的证书，而没有LE的证书。\n\n#### 问题2、如何关闭SSL3协议\n\n查看http://disablessl3.com如何关闭apache、nginx的ssl3协议\ntomcat修改，修改server.xml,\n\n\n```\n<Connector port=\"8443\" protocol=\"org.apache.coyote.http11.Http11NioProtocol\"\n               maxThreads=\"150\" SSLEnabled=\"true\"\n               sslProtocol=\"TLS\" sslEnabledProtocols=\"TLSv1,TLSv1.1,TLSv1.2\"  >\n```\n\n#### 问题3、nginx采用Let's Encrypt证书，如何实现https转http，后端识别来自https的请求\n\n1.修改nginx的配置文件\n修改nginx的配置文件/usr/local/nginx/conf/nginx.conf，实现https转到内网tomcat的http服务，注：以下配置未实现tomcat识别来自https的请求，详细见问题2\n\n```\nserver {\n    listen 8443;\n    server_name localhost;\n    ssl on;\n    ssl_certificate /etc/letsencrypt/live/域名/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/域名/privkey.pem;\n    server_name_in_redirect off;\n    proxy_set_header Host $host:$server_port;\n    proxy_connect_timeout 60s;\n    proxy_read_timeout 5400s;\n    proxy_send_timeout 5400s;\n    proxy_set_header X-Real-IP $remote_addr;\n    proxy_set_header REMOTE-HOST $remote_addr;\n    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n              proxy_set_header X-Forwarded-Proto  $scheme;\n              proxy_set_header WL-Proxy-SSL true;\n              add_header Strict-Transport-Security \"max-age=63072000; includeSubdomains;   \";\n    index index.html index.htm index.jsp index.do;\n    location ^~ /ZhsqApp/{\n        proxy_pass  http://192.168.100.10:8080;\n        client_max_body_size    100m;\n    }\n  }\n```\n\n主要增加3处配置：\n> proxy_set_header X-Forwarded-Proto  $scheme; tomcat可识别参数\n> proxy_set_header WL-Proxy-SSL true; weblogic可识别参数\n> add_header Strict-Transport-Security \"max-age=63072000; includeSubdomains; \"; 启用HSTS功能，浏览器在63072000秒时间内默认以https请求服务\n\n2.tomcat启用识别X-Forwarded-Proto设置\n修改配置文件server.xml，在Engine下添加下面内容\n\n```\n<Valve className=\"org.apache.catalina.valves.RemoteIpValve\"   remoteIpHeader=\"X-Forwarded-For\"\n           protocolHeader=\"X-Forwarded-Proto\"\n           protocolHeaderHttpsValue=\"https\"/>\n```\n\n做好上述配置，重启tomcat。request.getScheme()的值显示https\n另外，可参考Nginx SSL+tomcat集群,request.getScheme() 取到https正确的协议内容\n\n3.weblogic启用识别WL-Proxy-SSL 设置\n进入console界面，域名->配置->Web应用程序，勾选启用 WebLogic 插件，保存\n\n![](http://f3e6036a.fromwiz.com/share/resources/b0c2bbb1-1a90-4b45-a09a-c7aa9804cd7c/index_files/65317389.png)\n![](http://f3e6036a.fromwiz.com/share/resources/b0c2bbb1-1a90-4b45-a09a-c7aa9804cd7c/index_files/65382741.png)\n\n做好上述配置，重启weblogic。request.getScheme()的值显示https\n另外，可参考HTTPS/SSL/Spring Security doesn't work in both a load balancer and non-load balancer environment #424内容\n","slug":"Let-s-Encrypt证书使用","published":1,"updated":"2018-02-26T09:59:23.494Z","layout":"post","photos":[],"link":"","_id":"cje7yhv38000a7ku6l576n2gz","content":"<h2 id=\"Let’s-Encrypt证书使用\"><a href=\"#Let’s-Encrypt证书使用\" class=\"headerlink\" title=\"Let’s Encrypt证书使用\"></a><center>Let’s Encrypt证书使用<center></center></center></h2><blockquote>\n<p>certbot软件从Github直接下载，在CentOS6、7下执行都没有问题。</p>\n</blockquote>\n<h3 id=\"设置yum代码库\"><a href=\"#设置yum代码库\" class=\"headerlink\" title=\"设置yum代码库\"></a>设置yum代码库</h3><ul>\n<li>certbot-auto运行是会自动连接下载依赖包，启用163(<a href=\"http://mirrors.163.com/.help/centos.html\" target=\"_blank\" rel=\"external\">http://mirrors.163.com/.help/centos.html</a>) 和epel(<a href=\"https://fedoraproject.org/wiki/EPEL#How_can_I_use_these_extra_packages.3F)库，提前准备好环境，更多查看https://certbot.eff.org/#centosrhel6-other\" target=\"_blank\" rel=\"external\">https://fedoraproject.org/wiki/EPEL#How_can_I_use_these_extra_packages.3F)库，提前准备好环境，更多查看https://certbot.eff.org/#centosrhel6-other</a></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">1.wget http://mirrors.163.com/.help/CentOS6-Base-163.repo</div><div class=\"line\">2.mv CentOS6-Base-163.repo /etc/yum.repos.d/</div><div class=\"line\">3.wget https://dl.fedoraproject.org/pub/epel/epel-release-latest-6.noarch.rpm</div><div class=\"line\">4.rpm -ivh epel-release-latest-6.noarch.rpm</div></pre></td></tr></table></figure>\n<p>修改CentOS6-Base-163.repo文件，将$releasever替换为6<br>修改epel.repo文件，将$releasever替换为6，将<a href=\"http://download.fedoraproject.org/pub/epel修改为https://mirrors.tuna.tsinghua.edu.cn/epel\" target=\"_blank\" rel=\"external\">http://download.fedoraproject.org/pub/epel修改为https://mirrors.tuna.tsinghua.edu.cn/epel</a><br>运行以下命令生成缓存</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum clean all</div><div class=\"line\">yum makecache</div></pre></td></tr></table></figure>\n<p>安装git软件，也可直接从<a href=\"https://github.com/certbot/certbot下载\" target=\"_blank\" rel=\"external\">https://github.com/certbot/certbot下载</a><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum install git</div></pre></td></tr></table></figure></p>\n<a id=\"more\"></a> \n<h3 id=\"防火墙修改\"><a href=\"#防火墙修改\" class=\"headerlink\" title=\"防火墙修改\"></a>防火墙修改</h3><p>修改/etc/sysconfig/iptables<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vim /etc/sysconfig/iptables</div></pre></td></tr></table></figure></p>\n<p>查看是否有80、443端口允许访问记录<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">-A INPUT -i eth0 -p tcp -m tcp --dport 80 -j ACCEPT</div><div class=\"line\">-A INPUT -i eth0 -p tcp -m tcp --dport 443 -j ACCEPT</div></pre></td></tr></table></figure></p>\n<h3 id=\"获取Let’s-Encrypt证书\"><a href=\"#获取Let’s-Encrypt证书\" class=\"headerlink\" title=\"获取Let’s Encrypt证书\"></a>获取Let’s Encrypt证书</h3><p>certbot-auto运行是会自动连接下载依赖包，执行过程出现问题具体分析原因<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/certbot/certbot</div><div class=\"line\"><span class=\"built_in\">cd</span> certbot</div></pre></td></tr></table></figure></p>\n<p>certbot-auto命令在root用户下执行，certbot-auto会执行更新certbot版本和安装依赖包，执行需要联网，有时较慢<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">./certbot-auto certonly --standalone --email 你的邮箱 <span class=\"_\">-d</span> 你的域名</div></pre></td></tr></table></figure></p>\n<p>生成的证书放在/etc/letsencrypt/live/[网站域名]下，证书有效期3个月</p>\n<table>\n<thead>\n<tr>\n<th>文件名</th>\n<th>内容</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>cert.pem</td>\n<td>服务端证书</td>\n</tr>\n<tr>\n<td>chain.pem</td>\n<td>浏览器需要的所有证书但不包括服务端证书，比如根证书和中间证书</td>\n</tr>\n<tr>\n<td>fullchain.pem</td>\n<td>包括了cert.pem和chain.pem的内容</td>\n</tr>\n<tr>\n<td>privkey.pem</td>\n<td>证书的私钥</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"Apache-设置\"><a href=\"#Apache-设置\" class=\"headerlink\" title=\"Apache 设置\"></a>Apache 设置</h3><p>Apache测试版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Server version: Apache/2.4.6 (CentOS)</div><div class=\"line\">Server built:   Nov 14 2016 18:04:44</div></pre></td></tr></table></figure>\n<p>修改/etc/httpd/conf.d/ssl.conf<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">Listen 443 https</div><div class=\"line\">&lt;VirtualHost _default_:443&gt;</div><div class=\"line\">Header always <span class=\"built_in\">set</span> Strict-Transport-Security <span class=\"string\">\"max-age=63072000; includeSubdomains; preload\"</span></div><div class=\"line\">SSLEngine on</div><div class=\"line\">SSLCertificateFile /etc/letsencrypt/live/域名/cert.pem</div><div class=\"line\">SSLCertificateKeyFile /etc/letsencrypt/live/域名/privkey.pem</div><div class=\"line\">SSLCertificateChainFile /etc/letsencrypt/live/域名/fullchain.pem</div><div class=\"line\">&lt;/VirtualHost&gt;</div></pre></td></tr></table></figure></p>\n<p>HSTS（HTTP Strict Transport Security）的作用是强制客户端（如浏览器）使用HTTPS与服务器创建连接。</p>\n<h3 id=\"Tomcat设置\"><a href=\"#Tomcat设置\" class=\"headerlink\" title=\"Tomcat设置\"></a>Tomcat设置</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">cp /etc/letsencrypt/live/域名/*.pem apache-tomcat-8.5.5/conf/</div><div class=\"line\"><span class=\"built_in\">cd</span> apache-tomcat-8.5.5/conf/</div><div class=\"line\">chown 用户:组 *.pem</div></pre></td></tr></table></figure>\n<p>修改conf/server.xml文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;Connector port=<span class=\"string\">\"8443\"</span> protocol=<span class=\"string\">\"org.apache.coyote.http11.Http11NioProtocol\"</span></div><div class=\"line\">           maxThreads=<span class=\"string\">\"150\"</span> SSLEnabled=<span class=\"string\">\"true\"</span> &gt;</div><div class=\"line\">    &lt;UpgradeProtocol className=<span class=\"string\">\"org.apache.coyote.http2.Http2Protocol\"</span> /&gt;</div><div class=\"line\">    &lt;SSLHostConfig&gt;</div><div class=\"line\">        &lt;Certificate certificateKeyFile=<span class=\"string\">\"conf/privkey.pem\"</span></div><div class=\"line\">                     certificateFile=<span class=\"string\">\"conf/cert.pem\"</span></div><div class=\"line\">                     certificateChainFile=<span class=\"string\">\"conf/fullchain.pem\"</span></div><div class=\"line\">                     <span class=\"built_in\">type</span>=<span class=\"string\">\"RSA\"</span> /&gt;</div><div class=\"line\">    &lt;/SSLHostConfig&gt;</div><div class=\"line\">&lt;/Connector&gt;</div></pre></td></tr></table></figure>\n<h3 id=\"Nginx设置\"><a href=\"#Nginx设置\" class=\"headerlink\" title=\"Nginx设置\"></a>Nginx设置</h3><p>修改nginx的配置文件/usr/local/nginx/conf/nginx.conf，实现https转到内网tomcat的http服务，注：以下配置未实现tomcat识别来自https的请求，详细见问题3</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">server &#123;</div><div class=\"line\">     listen 8443;</div><div class=\"line\">     server_name localhost;</div><div class=\"line\">     ssl on;</div><div class=\"line\">     ssl_certificate /etc/letsencrypt/live/域名/fullchain.pem;</div><div class=\"line\">     ssl_certificate_key /etc/letsencrypt/live/域名/privkey.pem;</div><div class=\"line\">     server_name_in_redirect off;</div><div class=\"line\">     proxy_set_header Host $host:$server_port;</div><div class=\"line\">     proxy_connect_timeout 60s;</div><div class=\"line\">     proxy_read_timeout 5400s;</div><div class=\"line\">     proxy_send_timeout 5400s;</div><div class=\"line\">     proxy_set_header X-Real-IP $remote_addr;</div><div class=\"line\">     proxy_set_header REMOTE-HOST $remote_addr;</div><div class=\"line\">     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</div><div class=\"line\">     index index.html index.htm index.jsp index.do;</div><div class=\"line\">     location ^~ /ZhsqApp/&#123;</div><div class=\"line\">         proxy_pass  http://192.168.100.10:8080;</div><div class=\"line\">         client_max_body_size    100m;</div><div class=\"line\">     &#125;</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n<h3 id=\"Weblogic-配置\"><a href=\"#Weblogic-配置\" class=\"headerlink\" title=\"Weblogic 配置\"></a>Weblogic 配置</h3><p>weblogic必须是10.3.6及以上版本，才能使用Let’s Encrypt的证书，Let’s Encrypt采用SHA256withRSA，低版本的不支持SHA256withRSA</p>\n<h3 id=\"生成密钥库\"><a href=\"#生成密钥库\" class=\"headerlink\" title=\"生成密钥库\"></a>生成密钥库</h3><p>执行openssl命令生成fullchain_and_key.p12，执行keytool命令生成密钥库文件weblogic.jks</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">openssl pkcs12 -export -in fullchain.pem -inkey privkey.pem -out fullchain_and_key.p12 -name weblogic -passout pass:123456</div><div class=\"line\">keytool -importkeystore -deststorepass 123456   -destkeystore weblogic.jks -srckeystore fullchain_and_key.p12 -srcstoretype PKCS12 -srcstorepass 123456  -alias weblogic</div></pre></td></tr></table></figure>\n<p>privkey.pem、fullchain.pem为Let’s Encrypt生成文件，密码可自行修改。注-name与-alias别名保存一致，-passout参数的pass:需保留。-passout与-srcstorepass密码保持一致， -deststorepass需记住在weblogic配置使用。</p>\n<h3 id=\"生成信任库\"><a href=\"#生成信任库\" class=\"headerlink\" title=\"生成信任库\"></a>生成信任库</h3><p>执行keytool命令生成信任库文件trust.jks<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">keytool -importcert -alias rootCA -trustcacerts -file cert.pem -keystore trust.jks -storepass 123456</div></pre></td></tr></table></figure></p>\n<p>cert.pem为Let’s Encrypt生成文件，密码可自行修改。 -storepass需记住在weblogic配置使用。</p>\n<h3 id=\"weblogic配置\"><a href=\"#weblogic配置\" class=\"headerlink\" title=\"weblogic配置\"></a>weblogic配置</h3><h4 id=\"启用SSL监听端口\"><a href=\"#启用SSL监听端口\" class=\"headerlink\" title=\"启用SSL监听端口\"></a>启用SSL监听端口</h4><p>登录weblogic控制台 -&gt; 服务器 -&gt; 选择服务器管理 -&gt; 配置标签 -&gt; 一般信息子标签页 -&gt; 启用 SSL 监听端口 -&gt; 修改端口7002 -&gt; 保存</p>\n<p>在Linux下设置端口小于1024的，需要使用管理员用户启动weblogic。</p>\n<p><img src=\"http://f3e6036a.fromwiz.com/share/resources/b0c2bbb1-1a90-4b45-a09a-c7aa9804cd7c/index_files/64659649.png\" alt=\"\"></p>\n<h4 id=\"密钥库配置\"><a href=\"#密钥库配置\" class=\"headerlink\" title=\"密钥库配置\"></a>密钥库配置</h4><p>进入配置标签 -&gt; 密钥库标签页</p>\n<p>1.密钥库点更改，选择定制标识和定制信任，点击保存。<br>2.定制标识密钥库，填写weblogic.jks全路径<br>定制标识密钥库类型，填写jks<br>3.定制标识密钥库密码短语，填写生成密钥库时 -deststorepass写的密码<br>4.确认定制标识密钥库密码短语，填写生成密钥库时 -deststorepass写的密码<br>5.定制信任密钥库，填写trust.jks全路径<br>6.定制信任密钥库类型，填写jks<br>7.定制信任密钥库密码短语，填写生成信任库时 -storepass写的密码<br>8.确认定制信任密钥库密码短语，填写生成信任库时 -storepass写的密码</p>\n<p><img src=\"http://f3e6036a.fromwiz.com/share/resources/b0c2bbb1-1a90-4b45-a09a-c7aa9804cd7c/index_files/65091944.png\" alt=\"\"></p>\n<h4 id=\"SSL配置\"><a href=\"#SSL配置\" class=\"headerlink\" title=\"SSL配置\"></a>SSL配置</h4><p>进入配置标签 -&gt; SSL标签页</p>\n<p>1.私有密钥别名，填写生成密钥库时的别名<br>2.私有密钥密码短语，填写生成密钥库时 -deststorepass写的密码<br>3.确认私有密钥密码短语，填写生成密钥库时 -deststorepass写的密码<br>点击保存</p>\n<p><img src=\"http://f3e6036a.fromwiz.com/share/resources/b0c2bbb1-1a90-4b45-a09a-c7aa9804cd7c/index_files/65673128.png\" alt=\"\"></p>\n<p>weblogic 10.3. 6 版本还需要做额外配置，SSL标签页中，点击高级，选中使用 JSSE SSL，点击保存</p>\n<p><img src=\"http://f3e6036a.fromwiz.com/share/resources/b0c2bbb1-1a90-4b45-a09a-c7aa9804cd7c/index_files/65716484.png\" alt=\"\"></p>\n<p>重启weblogic服务，测试https访问。</p>\n<h3 id=\"更新证书\"><a href=\"#更新证书\" class=\"headerlink\" title=\"更新证书\"></a>更新证书</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">./certbot-auto renew</div></pre></td></tr></table></figure>\n<p>更新证书之后，需要执行tomcat、weblogic对应配置内容。</p>\n<h3 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h3><h4 id=\"问题1、Let’s-Encrypt安装好之后在PC端可以正常访问，但在手机端提示不受信任的\"><a href=\"#问题1、Let’s-Encrypt安装好之后在PC端可以正常访问，但在手机端提示不受信任的\" class=\"headerlink\" title=\"问题1、Let’s Encrypt安装好之后在PC端可以正常访问，但在手机端提示不受信任的\"></a>问题1、Let’s Encrypt安装好之后在PC端可以正常访问，但在手机端提示不受信任的</h4><p>主要原因是缺少中级证书。生成的LE证书后使用的需要使用fullchain.pem，打开后会发现有两段证书，第一段是LE的证书，第二段才是你网站的证书。而你只有网站的证书，而没有LE的证书。</p>\n<h4 id=\"问题2、如何关闭SSL3协议\"><a href=\"#问题2、如何关闭SSL3协议\" class=\"headerlink\" title=\"问题2、如何关闭SSL3协议\"></a>问题2、如何关闭SSL3协议</h4><p>查看<a href=\"http://disablessl3.com如何关闭apache、nginx的ssl3协议\" target=\"_blank\" rel=\"external\">http://disablessl3.com如何关闭apache、nginx的ssl3协议</a><br>tomcat修改，修改server.xml,</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;Connector port=&quot;8443&quot; protocol=&quot;org.apache.coyote.http11.Http11NioProtocol&quot;</div><div class=\"line\">               maxThreads=&quot;150&quot; SSLEnabled=&quot;true&quot;</div><div class=\"line\">               sslProtocol=&quot;TLS&quot; sslEnabledProtocols=&quot;TLSv1,TLSv1.1,TLSv1.2&quot;  &gt;</div></pre></td></tr></table></figure>\n<h4 id=\"问题3、nginx采用Let’s-Encrypt证书，如何实现https转http，后端识别来自https的请求\"><a href=\"#问题3、nginx采用Let’s-Encrypt证书，如何实现https转http，后端识别来自https的请求\" class=\"headerlink\" title=\"问题3、nginx采用Let’s Encrypt证书，如何实现https转http，后端识别来自https的请求\"></a>问题3、nginx采用Let’s Encrypt证书，如何实现https转http，后端识别来自https的请求</h4><p>1.修改nginx的配置文件<br>修改nginx的配置文件/usr/local/nginx/conf/nginx.conf，实现https转到内网tomcat的http服务，注：以下配置未实现tomcat识别来自https的请求，详细见问题2</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">server &#123;</div><div class=\"line\">    listen 8443;</div><div class=\"line\">    server_name localhost;</div><div class=\"line\">    ssl on;</div><div class=\"line\">    ssl_certificate /etc/letsencrypt/live/域名/fullchain.pem;</div><div class=\"line\">    ssl_certificate_key /etc/letsencrypt/live/域名/privkey.pem;</div><div class=\"line\">    server_name_in_redirect off;</div><div class=\"line\">    proxy_set_header Host $host:$server_port;</div><div class=\"line\">    proxy_connect_timeout 60s;</div><div class=\"line\">    proxy_read_timeout 5400s;</div><div class=\"line\">    proxy_send_timeout 5400s;</div><div class=\"line\">    proxy_set_header X-Real-IP $remote_addr;</div><div class=\"line\">    proxy_set_header REMOTE-HOST $remote_addr;</div><div class=\"line\">    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</div><div class=\"line\">              proxy_set_header X-Forwarded-Proto  $scheme;</div><div class=\"line\">              proxy_set_header WL-Proxy-SSL true;</div><div class=\"line\">              add_header Strict-Transport-Security &quot;max-age=63072000; includeSubdomains;   &quot;;</div><div class=\"line\">    index index.html index.htm index.jsp index.do;</div><div class=\"line\">    location ^~ /ZhsqApp/&#123;</div><div class=\"line\">        proxy_pass  http://192.168.100.10:8080;</div><div class=\"line\">        client_max_body_size    100m;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<p>主要增加3处配置：</p>\n<blockquote>\n<p>proxy_set_header X-Forwarded-Proto  $scheme; tomcat可识别参数<br>proxy_set_header WL-Proxy-SSL true; weblogic可识别参数<br>add_header Strict-Transport-Security “max-age=63072000; includeSubdomains; “; 启用HSTS功能，浏览器在63072000秒时间内默认以https请求服务</p>\n</blockquote>\n<p>2.tomcat启用识别X-Forwarded-Proto设置<br>修改配置文件server.xml，在Engine下添加下面内容</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;Valve className=&quot;org.apache.catalina.valves.RemoteIpValve&quot;   remoteIpHeader=&quot;X-Forwarded-For&quot;</div><div class=\"line\">           protocolHeader=&quot;X-Forwarded-Proto&quot;</div><div class=\"line\">           protocolHeaderHttpsValue=&quot;https&quot;/&gt;</div></pre></td></tr></table></figure>\n<p>做好上述配置，重启tomcat。request.getScheme()的值显示https<br>另外，可参考Nginx SSL+tomcat集群,request.getScheme() 取到https正确的协议内容</p>\n<p>3.weblogic启用识别WL-Proxy-SSL 设置<br>进入console界面，域名-&gt;配置-&gt;Web应用程序，勾选启用 WebLogic 插件，保存</p>\n<p><img src=\"http://f3e6036a.fromwiz.com/share/resources/b0c2bbb1-1a90-4b45-a09a-c7aa9804cd7c/index_files/65317389.png\" alt=\"\"><br><img src=\"http://f3e6036a.fromwiz.com/share/resources/b0c2bbb1-1a90-4b45-a09a-c7aa9804cd7c/index_files/65382741.png\" alt=\"\"></p>\n<p>做好上述配置，重启weblogic。request.getScheme()的值显示https<br>另外，可参考HTTPS/SSL/Spring Security doesn’t work in both a load balancer and non-load balancer environment #424内容</p>\n","excerpt":"<h2 id=\"Let’s-Encrypt证书使用\"><a href=\"#Let’s-Encrypt证书使用\" class=\"headerlink\" title=\"Let’s Encrypt证书使用\"></a><center>Let’s Encrypt证书使用<center></h2><blockquote>\n<p>certbot软件从Github直接下载，在CentOS6、7下执行都没有问题。</p>\n</blockquote>\n<h3 id=\"设置yum代码库\"><a href=\"#设置yum代码库\" class=\"headerlink\" title=\"设置yum代码库\"></a>设置yum代码库</h3><ul>\n<li>certbot-auto运行是会自动连接下载依赖包，启用163(<a href=\"http://mirrors.163.com/.help/centos.html\">http://mirrors.163.com/.help/centos.html</a>) 和epel(<a href=\"https://fedoraproject.org/wiki/EPEL#How_can_I_use_these_extra_packages.3F)库，提前准备好环境，更多查看https://certbot.eff.org/#centosrhel6-other\">https://fedoraproject.org/wiki/EPEL#How_can_I_use_these_extra_packages.3F)库，提前准备好环境，更多查看https://certbot.eff.org/#centosrhel6-other</a></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">1.wget http://mirrors.163.com/.help/CentOS6-Base-163.repo</div><div class=\"line\">2.mv CentOS6-Base-163.repo /etc/yum.repos.d/</div><div class=\"line\">3.wget https://dl.fedoraproject.org/pub/epel/epel-release-latest-6.noarch.rpm</div><div class=\"line\">4.rpm -ivh epel-release-latest-6.noarch.rpm</div></pre></td></tr></table></figure>\n<p>修改CentOS6-Base-163.repo文件，将$releasever替换为6<br>修改epel.repo文件，将$releasever替换为6，将<a href=\"http://download.fedoraproject.org/pub/epel修改为https://mirrors.tuna.tsinghua.edu.cn/epel\">http://download.fedoraproject.org/pub/epel修改为https://mirrors.tuna.tsinghua.edu.cn/epel</a><br>运行以下命令生成缓存</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum clean all</div><div class=\"line\">yum makecache</div></pre></td></tr></table></figure>\n<p>安装git软件，也可直接从<a href=\"https://github.com/certbot/certbot下载\">https://github.com/certbot/certbot下载</a><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum install git</div></pre></td></tr></table></figure></p>","more":"<h3 id=\"防火墙修改\"><a href=\"#防火墙修改\" class=\"headerlink\" title=\"防火墙修改\"></a>防火墙修改</h3><p>修改/etc/sysconfig/iptables<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vim /etc/sysconfig/iptables</div></pre></td></tr></table></figure></p>\n<p>查看是否有80、443端口允许访问记录<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">-A INPUT -i eth0 -p tcp -m tcp --dport 80 -j ACCEPT</div><div class=\"line\">-A INPUT -i eth0 -p tcp -m tcp --dport 443 -j ACCEPT</div></pre></td></tr></table></figure></p>\n<h3 id=\"获取Let’s-Encrypt证书\"><a href=\"#获取Let’s-Encrypt证书\" class=\"headerlink\" title=\"获取Let’s Encrypt证书\"></a>获取Let’s Encrypt证书</h3><p>certbot-auto运行是会自动连接下载依赖包，执行过程出现问题具体分析原因<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/certbot/certbot</div><div class=\"line\"><span class=\"built_in\">cd</span> certbot</div></pre></td></tr></table></figure></p>\n<p>certbot-auto命令在root用户下执行，certbot-auto会执行更新certbot版本和安装依赖包，执行需要联网，有时较慢<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">./certbot-auto certonly --standalone --email 你的邮箱 <span class=\"_\">-d</span> 你的域名</div></pre></td></tr></table></figure></p>\n<p>生成的证书放在/etc/letsencrypt/live/[网站域名]下，证书有效期3个月</p>\n<table>\n<thead>\n<tr>\n<th>文件名</th>\n<th>内容</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>cert.pem</td>\n<td>服务端证书</td>\n</tr>\n<tr>\n<td>chain.pem</td>\n<td>浏览器需要的所有证书但不包括服务端证书，比如根证书和中间证书</td>\n</tr>\n<tr>\n<td>fullchain.pem</td>\n<td>包括了cert.pem和chain.pem的内容</td>\n</tr>\n<tr>\n<td>privkey.pem</td>\n<td>证书的私钥</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"Apache-设置\"><a href=\"#Apache-设置\" class=\"headerlink\" title=\"Apache 设置\"></a>Apache 设置</h3><p>Apache测试版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Server version: Apache/2.4.6 (CentOS)</div><div class=\"line\">Server built:   Nov 14 2016 18:04:44</div></pre></td></tr></table></figure>\n<p>修改/etc/httpd/conf.d/ssl.conf<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">Listen 443 https</div><div class=\"line\">&lt;VirtualHost _default_:443&gt;</div><div class=\"line\">Header always <span class=\"built_in\">set</span> Strict-Transport-Security <span class=\"string\">\"max-age=63072000; includeSubdomains; preload\"</span></div><div class=\"line\">SSLEngine on</div><div class=\"line\">SSLCertificateFile /etc/letsencrypt/live/域名/cert.pem</div><div class=\"line\">SSLCertificateKeyFile /etc/letsencrypt/live/域名/privkey.pem</div><div class=\"line\">SSLCertificateChainFile /etc/letsencrypt/live/域名/fullchain.pem</div><div class=\"line\">&lt;/VirtualHost&gt;</div></pre></td></tr></table></figure></p>\n<p>HSTS（HTTP Strict Transport Security）的作用是强制客户端（如浏览器）使用HTTPS与服务器创建连接。</p>\n<h3 id=\"Tomcat设置\"><a href=\"#Tomcat设置\" class=\"headerlink\" title=\"Tomcat设置\"></a>Tomcat设置</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">cp /etc/letsencrypt/live/域名/*.pem apache-tomcat-8.5.5/conf/</div><div class=\"line\"><span class=\"built_in\">cd</span> apache-tomcat-8.5.5/conf/</div><div class=\"line\">chown 用户:组 *.pem</div></pre></td></tr></table></figure>\n<p>修改conf/server.xml文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;Connector port=<span class=\"string\">\"8443\"</span> protocol=<span class=\"string\">\"org.apache.coyote.http11.Http11NioProtocol\"</span></div><div class=\"line\">           maxThreads=<span class=\"string\">\"150\"</span> SSLEnabled=<span class=\"string\">\"true\"</span> &gt;</div><div class=\"line\">    &lt;UpgradeProtocol className=<span class=\"string\">\"org.apache.coyote.http2.Http2Protocol\"</span> /&gt;</div><div class=\"line\">    &lt;SSLHostConfig&gt;</div><div class=\"line\">        &lt;Certificate certificateKeyFile=<span class=\"string\">\"conf/privkey.pem\"</span></div><div class=\"line\">                     certificateFile=<span class=\"string\">\"conf/cert.pem\"</span></div><div class=\"line\">                     certificateChainFile=<span class=\"string\">\"conf/fullchain.pem\"</span></div><div class=\"line\">                     <span class=\"built_in\">type</span>=<span class=\"string\">\"RSA\"</span> /&gt;</div><div class=\"line\">    &lt;/SSLHostConfig&gt;</div><div class=\"line\">&lt;/Connector&gt;</div></pre></td></tr></table></figure>\n<h3 id=\"Nginx设置\"><a href=\"#Nginx设置\" class=\"headerlink\" title=\"Nginx设置\"></a>Nginx设置</h3><p>修改nginx的配置文件/usr/local/nginx/conf/nginx.conf，实现https转到内网tomcat的http服务，注：以下配置未实现tomcat识别来自https的请求，详细见问题3</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">server &#123;</div><div class=\"line\">     listen 8443;</div><div class=\"line\">     server_name localhost;</div><div class=\"line\">     ssl on;</div><div class=\"line\">     ssl_certificate /etc/letsencrypt/live/域名/fullchain.pem;</div><div class=\"line\">     ssl_certificate_key /etc/letsencrypt/live/域名/privkey.pem;</div><div class=\"line\">     server_name_in_redirect off;</div><div class=\"line\">     proxy_set_header Host $host:$server_port;</div><div class=\"line\">     proxy_connect_timeout 60s;</div><div class=\"line\">     proxy_read_timeout 5400s;</div><div class=\"line\">     proxy_send_timeout 5400s;</div><div class=\"line\">     proxy_set_header X-Real-IP $remote_addr;</div><div class=\"line\">     proxy_set_header REMOTE-HOST $remote_addr;</div><div class=\"line\">     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</div><div class=\"line\">     index index.html index.htm index.jsp index.do;</div><div class=\"line\">     location ^~ /ZhsqApp/&#123;</div><div class=\"line\">         proxy_pass  http://192.168.100.10:8080;</div><div class=\"line\">         client_max_body_size    100m;</div><div class=\"line\">     &#125;</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n<h3 id=\"Weblogic-配置\"><a href=\"#Weblogic-配置\" class=\"headerlink\" title=\"Weblogic 配置\"></a>Weblogic 配置</h3><p>weblogic必须是10.3.6及以上版本，才能使用Let’s Encrypt的证书，Let’s Encrypt采用SHA256withRSA，低版本的不支持SHA256withRSA</p>\n<h3 id=\"生成密钥库\"><a href=\"#生成密钥库\" class=\"headerlink\" title=\"生成密钥库\"></a>生成密钥库</h3><p>执行openssl命令生成fullchain_and_key.p12，执行keytool命令生成密钥库文件weblogic.jks</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">openssl pkcs12 -export -in fullchain.pem -inkey privkey.pem -out fullchain_and_key.p12 -name weblogic -passout pass:123456</div><div class=\"line\">keytool -importkeystore -deststorepass 123456   -destkeystore weblogic.jks -srckeystore fullchain_and_key.p12 -srcstoretype PKCS12 -srcstorepass 123456  -alias weblogic</div></pre></td></tr></table></figure>\n<p>privkey.pem、fullchain.pem为Let’s Encrypt生成文件，密码可自行修改。注-name与-alias别名保存一致，-passout参数的pass:需保留。-passout与-srcstorepass密码保持一致， -deststorepass需记住在weblogic配置使用。</p>\n<h3 id=\"生成信任库\"><a href=\"#生成信任库\" class=\"headerlink\" title=\"生成信任库\"></a>生成信任库</h3><p>执行keytool命令生成信任库文件trust.jks<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">keytool -importcert -alias rootCA -trustcacerts -file cert.pem -keystore trust.jks -storepass 123456</div></pre></td></tr></table></figure></p>\n<p>cert.pem为Let’s Encrypt生成文件，密码可自行修改。 -storepass需记住在weblogic配置使用。</p>\n<h3 id=\"weblogic配置\"><a href=\"#weblogic配置\" class=\"headerlink\" title=\"weblogic配置\"></a>weblogic配置</h3><h4 id=\"启用SSL监听端口\"><a href=\"#启用SSL监听端口\" class=\"headerlink\" title=\"启用SSL监听端口\"></a>启用SSL监听端口</h4><p>登录weblogic控制台 -&gt; 服务器 -&gt; 选择服务器管理 -&gt; 配置标签 -&gt; 一般信息子标签页 -&gt; 启用 SSL 监听端口 -&gt; 修改端口7002 -&gt; 保存</p>\n<p>在Linux下设置端口小于1024的，需要使用管理员用户启动weblogic。</p>\n<p><img src=\"http://f3e6036a.fromwiz.com/share/resources/b0c2bbb1-1a90-4b45-a09a-c7aa9804cd7c/index_files/64659649.png\" alt=\"\"></p>\n<h4 id=\"密钥库配置\"><a href=\"#密钥库配置\" class=\"headerlink\" title=\"密钥库配置\"></a>密钥库配置</h4><p>进入配置标签 -&gt; 密钥库标签页</p>\n<p>1.密钥库点更改，选择定制标识和定制信任，点击保存。<br>2.定制标识密钥库，填写weblogic.jks全路径<br>定制标识密钥库类型，填写jks<br>3.定制标识密钥库密码短语，填写生成密钥库时 -deststorepass写的密码<br>4.确认定制标识密钥库密码短语，填写生成密钥库时 -deststorepass写的密码<br>5.定制信任密钥库，填写trust.jks全路径<br>6.定制信任密钥库类型，填写jks<br>7.定制信任密钥库密码短语，填写生成信任库时 -storepass写的密码<br>8.确认定制信任密钥库密码短语，填写生成信任库时 -storepass写的密码</p>\n<p><img src=\"http://f3e6036a.fromwiz.com/share/resources/b0c2bbb1-1a90-4b45-a09a-c7aa9804cd7c/index_files/65091944.png\" alt=\"\"></p>\n<h4 id=\"SSL配置\"><a href=\"#SSL配置\" class=\"headerlink\" title=\"SSL配置\"></a>SSL配置</h4><p>进入配置标签 -&gt; SSL标签页</p>\n<p>1.私有密钥别名，填写生成密钥库时的别名<br>2.私有密钥密码短语，填写生成密钥库时 -deststorepass写的密码<br>3.确认私有密钥密码短语，填写生成密钥库时 -deststorepass写的密码<br>点击保存</p>\n<p><img src=\"http://f3e6036a.fromwiz.com/share/resources/b0c2bbb1-1a90-4b45-a09a-c7aa9804cd7c/index_files/65673128.png\" alt=\"\"></p>\n<p>weblogic 10.3. 6 版本还需要做额外配置，SSL标签页中，点击高级，选中使用 JSSE SSL，点击保存</p>\n<p><img src=\"http://f3e6036a.fromwiz.com/share/resources/b0c2bbb1-1a90-4b45-a09a-c7aa9804cd7c/index_files/65716484.png\" alt=\"\"></p>\n<p>重启weblogic服务，测试https访问。</p>\n<h3 id=\"更新证书\"><a href=\"#更新证书\" class=\"headerlink\" title=\"更新证书\"></a>更新证书</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">./certbot-auto renew</div></pre></td></tr></table></figure>\n<p>更新证书之后，需要执行tomcat、weblogic对应配置内容。</p>\n<h3 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h3><h4 id=\"问题1、Let’s-Encrypt安装好之后在PC端可以正常访问，但在手机端提示不受信任的\"><a href=\"#问题1、Let’s-Encrypt安装好之后在PC端可以正常访问，但在手机端提示不受信任的\" class=\"headerlink\" title=\"问题1、Let’s Encrypt安装好之后在PC端可以正常访问，但在手机端提示不受信任的\"></a>问题1、Let’s Encrypt安装好之后在PC端可以正常访问，但在手机端提示不受信任的</h4><p>主要原因是缺少中级证书。生成的LE证书后使用的需要使用fullchain.pem，打开后会发现有两段证书，第一段是LE的证书，第二段才是你网站的证书。而你只有网站的证书，而没有LE的证书。</p>\n<h4 id=\"问题2、如何关闭SSL3协议\"><a href=\"#问题2、如何关闭SSL3协议\" class=\"headerlink\" title=\"问题2、如何关闭SSL3协议\"></a>问题2、如何关闭SSL3协议</h4><p>查看<a href=\"http://disablessl3.com如何关闭apache、nginx的ssl3协议\">http://disablessl3.com如何关闭apache、nginx的ssl3协议</a><br>tomcat修改，修改server.xml,</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;Connector port=&quot;8443&quot; protocol=&quot;org.apache.coyote.http11.Http11NioProtocol&quot;</div><div class=\"line\">               maxThreads=&quot;150&quot; SSLEnabled=&quot;true&quot;</div><div class=\"line\">               sslProtocol=&quot;TLS&quot; sslEnabledProtocols=&quot;TLSv1,TLSv1.1,TLSv1.2&quot;  &gt;</div></pre></td></tr></table></figure>\n<h4 id=\"问题3、nginx采用Let’s-Encrypt证书，如何实现https转http，后端识别来自https的请求\"><a href=\"#问题3、nginx采用Let’s-Encrypt证书，如何实现https转http，后端识别来自https的请求\" class=\"headerlink\" title=\"问题3、nginx采用Let’s Encrypt证书，如何实现https转http，后端识别来自https的请求\"></a>问题3、nginx采用Let’s Encrypt证书，如何实现https转http，后端识别来自https的请求</h4><p>1.修改nginx的配置文件<br>修改nginx的配置文件/usr/local/nginx/conf/nginx.conf，实现https转到内网tomcat的http服务，注：以下配置未实现tomcat识别来自https的请求，详细见问题2</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">server &#123;</div><div class=\"line\">    listen 8443;</div><div class=\"line\">    server_name localhost;</div><div class=\"line\">    ssl on;</div><div class=\"line\">    ssl_certificate /etc/letsencrypt/live/域名/fullchain.pem;</div><div class=\"line\">    ssl_certificate_key /etc/letsencrypt/live/域名/privkey.pem;</div><div class=\"line\">    server_name_in_redirect off;</div><div class=\"line\">    proxy_set_header Host $host:$server_port;</div><div class=\"line\">    proxy_connect_timeout 60s;</div><div class=\"line\">    proxy_read_timeout 5400s;</div><div class=\"line\">    proxy_send_timeout 5400s;</div><div class=\"line\">    proxy_set_header X-Real-IP $remote_addr;</div><div class=\"line\">    proxy_set_header REMOTE-HOST $remote_addr;</div><div class=\"line\">    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</div><div class=\"line\">              proxy_set_header X-Forwarded-Proto  $scheme;</div><div class=\"line\">              proxy_set_header WL-Proxy-SSL true;</div><div class=\"line\">              add_header Strict-Transport-Security &quot;max-age=63072000; includeSubdomains;   &quot;;</div><div class=\"line\">    index index.html index.htm index.jsp index.do;</div><div class=\"line\">    location ^~ /ZhsqApp/&#123;</div><div class=\"line\">        proxy_pass  http://192.168.100.10:8080;</div><div class=\"line\">        client_max_body_size    100m;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<p>主要增加3处配置：</p>\n<blockquote>\n<p>proxy_set_header X-Forwarded-Proto  $scheme; tomcat可识别参数<br>proxy_set_header WL-Proxy-SSL true; weblogic可识别参数<br>add_header Strict-Transport-Security “max-age=63072000; includeSubdomains; “; 启用HSTS功能，浏览器在63072000秒时间内默认以https请求服务</p>\n</blockquote>\n<p>2.tomcat启用识别X-Forwarded-Proto设置<br>修改配置文件server.xml，在Engine下添加下面内容</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;Valve className=&quot;org.apache.catalina.valves.RemoteIpValve&quot;   remoteIpHeader=&quot;X-Forwarded-For&quot;</div><div class=\"line\">           protocolHeader=&quot;X-Forwarded-Proto&quot;</div><div class=\"line\">           protocolHeaderHttpsValue=&quot;https&quot;/&gt;</div></pre></td></tr></table></figure>\n<p>做好上述配置，重启tomcat。request.getScheme()的值显示https<br>另外，可参考Nginx SSL+tomcat集群,request.getScheme() 取到https正确的协议内容</p>\n<p>3.weblogic启用识别WL-Proxy-SSL 设置<br>进入console界面，域名-&gt;配置-&gt;Web应用程序，勾选启用 WebLogic 插件，保存</p>\n<p><img src=\"http://f3e6036a.fromwiz.com/share/resources/b0c2bbb1-1a90-4b45-a09a-c7aa9804cd7c/index_files/65317389.png\" alt=\"\"><br><img src=\"http://f3e6036a.fromwiz.com/share/resources/b0c2bbb1-1a90-4b45-a09a-c7aa9804cd7c/index_files/65382741.png\" alt=\"\"></p>\n<p>做好上述配置，重启weblogic。request.getScheme()的值显示https<br>另外，可参考HTTPS/SSL/Spring Security doesn’t work in both a load balancer and non-load balancer environment #424内容</p>"},{"title":"IM即时通讯资料整理","comments":0,"copyright":true,"top":10,"abbrlink":"a5d8a8b7","date":"2017-11-13T03:00:10.000Z","_content":"\n\n","source":"_posts/2017-11-13-IM即时通讯资料整理.md","raw":"---\ntitle: IM即时通讯资料整理\ncategories: 随笔\ntags:\n  - IM即时通讯\ncomments: false\ncopyright: true\ntop: 10\nabbrlink: a5d8a8b7\ndate: 2017-11-13 11:00:10\n---\n\n\n","slug":"IM即时通讯资料整理","published":1,"updated":"2017-11-21T07:54:15.079Z","layout":"post","photos":[],"link":"","_id":"cje7yhv39000e7ku6zcor2ybf","content":"","excerpt":"","more":""},{"title":"即时通讯开源软件归纳","comments":0,"copyright":true,"top":10,"abbrlink":"b971456b","date":"2017-11-10T01:11:45.000Z","_content":"\n## <center>即时通讯开源软件归纳</center>\n\n### 开源归纳\n\n因为需要兼容android和ios，所以一翻查找，暂时发现以下待定开源项目：\n\n- 基于**XMPP**  进行的二次开发项目，目前有基于服务端的开源项目：Openfire 。\n\n- 基于**MQTT** 进行的二次开发项目。\n\n- 基于**MobileIMSDK** 的二次开发项目。\n\n- 基于**T-IO** 的二次开发项目。\n\n<!--more-->\n\n### 优良归纳\n\nXMPP：是基于XML的,有服务器的开源项目ejabberd；\n> ejabberd是基于Jabber/XMPP协议的即时通讯服务器，由GPLv2授权（免费和开放源码），采用Erlang/OTP开发。它的特点是，跨平台，容错，集群和模块化。\nEjabberd目前是可扩展性最好的一种Jabber/XMPP服务器，支持分布多个服务器，并且具有容错处理，单台服务器失效不影响整个cluster运作。\n\n完整的XMPP IM 实现（Openfire + Spark + Smack）：\n\n>包括服务器端——Openfire，客户端——Spark，XMPP 传输协议的实现——Smack（记住，XMPP是一个协议，协议是需要实现的，Smack起到的就是这样的一个作用）。三者都是基于Java 语言的实现。\n\n缺点：其中XMPP是基于XML的,并且不支持消息质量QOS, 所以本身并没有消息重传的机制,从而会导致丢消息。\n\nMQTT：是基于二进制的,支持QOS,并且已成为物联网的协议标准。\n\nMobileIMSDK：是一个比较成熟的兼容android、IOS、java标准平台的一个开源项目。有比较成熟的基于其上的开发的demo和示例。\n\nT-IO：有一个完善比较全面的开源项目，但是文档和示例比较少，估计需要自己爬不少的坑（慎选）。\n*****\n\n### 参考文档\n\n- [XMPP协议的原理介绍](http://blog.csdn.net/wbw1985/article/details/5502272)\n\n- [基于openfire+smack的Android、Web、PC开发](https://my.oschina.net/yuanxulong/blog/348572)\n\n- [iOS和Android使用MQTT协议实现消息推送和即时通讯（替代XMPP，已经有TMS MQTT）](https://www.cnblogs.com/findumars/p/6411060.html)\n\n- [Android mqtt即时通讯方案](http://blog.csdn.net/lv_ws/article/details/50295265)\n\n- [一个专为移动端开发的原创即时通讯框架，超轻量级、高度提炼，完全基于UDP协议，支持iOS、Android、标准Java平台。](https://github.com/JackJiang2011/MobileIMSDK)\n\n- [基于Websocket的IM即时通讯技术/IM 即时通讯技术在多应用场景下的技术实现，以及性能调优（iOS视角）.md](https://github.com/ChenYilong/iOSBlog/blob/master/Tips/%E5%9F%BA%E4%BA%8EWebsocket%E7%9A%84IM%E5%8D%B3%E6%97%B6%E9%80%9A%E8%AE%AF%E6%8A%80%E6%9C%AF/IM%20%E5%8D%B3%E6%97%B6%E9%80%9A%E8%AE%AF%E6%8A%80%E6%9C%AF%E5%9C%A8%E5%A4%9A%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF%E4%B8%8B%E7%9A%84%E6%8A%80%E6%9C%AF%E5%AE%9E%E7%8E%B0%EF%BC%8C%E4%BB%A5%E5%8F%8A%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98%EF%BC%88iOS%E8%A7%86%E8%A7%92%EF%BC%89.md#%E5%9F%BA%E4%BA%8E-websocket-%E7%9A%84-im-%E7%B3%BB%E7%BB%9F)\n\n- [Lhttp个基于websocket服务端框架](https://github.com/fanux/lhttp/blob/master/doc/README_zh.md)\n\n- [t-io: 不仅仅是百万级即时通讯框架](http://t-io.org/#/)","source":"_posts/2017-11-10-即时通讯开源软件归纳.md","raw":"---\ntitle: 即时通讯开源软件归纳\ncategories: 随笔\ntags:\n  - IM即时通讯\n  - 开源项目\ncomments: false\ncopyright: true\ntop: 10\nabbrlink: b971456b\ndate: 2017-11-10 09:11:45\n---\n\n## <center>即时通讯开源软件归纳</center>\n\n### 开源归纳\n\n因为需要兼容android和ios，所以一翻查找，暂时发现以下待定开源项目：\n\n- 基于**XMPP**  进行的二次开发项目，目前有基于服务端的开源项目：Openfire 。\n\n- 基于**MQTT** 进行的二次开发项目。\n\n- 基于**MobileIMSDK** 的二次开发项目。\n\n- 基于**T-IO** 的二次开发项目。\n\n<!--more-->\n\n### 优良归纳\n\nXMPP：是基于XML的,有服务器的开源项目ejabberd；\n> ejabberd是基于Jabber/XMPP协议的即时通讯服务器，由GPLv2授权（免费和开放源码），采用Erlang/OTP开发。它的特点是，跨平台，容错，集群和模块化。\nEjabberd目前是可扩展性最好的一种Jabber/XMPP服务器，支持分布多个服务器，并且具有容错处理，单台服务器失效不影响整个cluster运作。\n\n完整的XMPP IM 实现（Openfire + Spark + Smack）：\n\n>包括服务器端——Openfire，客户端——Spark，XMPP 传输协议的实现——Smack（记住，XMPP是一个协议，协议是需要实现的，Smack起到的就是这样的一个作用）。三者都是基于Java 语言的实现。\n\n缺点：其中XMPP是基于XML的,并且不支持消息质量QOS, 所以本身并没有消息重传的机制,从而会导致丢消息。\n\nMQTT：是基于二进制的,支持QOS,并且已成为物联网的协议标准。\n\nMobileIMSDK：是一个比较成熟的兼容android、IOS、java标准平台的一个开源项目。有比较成熟的基于其上的开发的demo和示例。\n\nT-IO：有一个完善比较全面的开源项目，但是文档和示例比较少，估计需要自己爬不少的坑（慎选）。\n*****\n\n### 参考文档\n\n- [XMPP协议的原理介绍](http://blog.csdn.net/wbw1985/article/details/5502272)\n\n- [基于openfire+smack的Android、Web、PC开发](https://my.oschina.net/yuanxulong/blog/348572)\n\n- [iOS和Android使用MQTT协议实现消息推送和即时通讯（替代XMPP，已经有TMS MQTT）](https://www.cnblogs.com/findumars/p/6411060.html)\n\n- [Android mqtt即时通讯方案](http://blog.csdn.net/lv_ws/article/details/50295265)\n\n- [一个专为移动端开发的原创即时通讯框架，超轻量级、高度提炼，完全基于UDP协议，支持iOS、Android、标准Java平台。](https://github.com/JackJiang2011/MobileIMSDK)\n\n- [基于Websocket的IM即时通讯技术/IM 即时通讯技术在多应用场景下的技术实现，以及性能调优（iOS视角）.md](https://github.com/ChenYilong/iOSBlog/blob/master/Tips/%E5%9F%BA%E4%BA%8EWebsocket%E7%9A%84IM%E5%8D%B3%E6%97%B6%E9%80%9A%E8%AE%AF%E6%8A%80%E6%9C%AF/IM%20%E5%8D%B3%E6%97%B6%E9%80%9A%E8%AE%AF%E6%8A%80%E6%9C%AF%E5%9C%A8%E5%A4%9A%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF%E4%B8%8B%E7%9A%84%E6%8A%80%E6%9C%AF%E5%AE%9E%E7%8E%B0%EF%BC%8C%E4%BB%A5%E5%8F%8A%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98%EF%BC%88iOS%E8%A7%86%E8%A7%92%EF%BC%89.md#%E5%9F%BA%E4%BA%8E-websocket-%E7%9A%84-im-%E7%B3%BB%E7%BB%9F)\n\n- [Lhttp个基于websocket服务端框架](https://github.com/fanux/lhttp/blob/master/doc/README_zh.md)\n\n- [t-io: 不仅仅是百万级即时通讯框架](http://t-io.org/#/)","slug":"即时通讯开源软件归纳","published":1,"updated":"2017-12-10T05:28:00.913Z","layout":"post","photos":[],"link":"","_id":"cje7yhv3b000g7ku6bvtdvu96","content":"<h2 id=\"即时通讯开源软件归纳\"><a href=\"#即时通讯开源软件归纳\" class=\"headerlink\" title=\"即时通讯开源软件归纳\"></a><center>即时通讯开源软件归纳</center></h2><h3 id=\"开源归纳\"><a href=\"#开源归纳\" class=\"headerlink\" title=\"开源归纳\"></a>开源归纳</h3><p>因为需要兼容android和ios，所以一翻查找，暂时发现以下待定开源项目：</p>\n<ul>\n<li><p>基于<strong>XMPP</strong>  进行的二次开发项目，目前有基于服务端的开源项目：Openfire 。</p>\n</li>\n<li><p>基于<strong>MQTT</strong> 进行的二次开发项目。</p>\n</li>\n<li><p>基于<strong>MobileIMSDK</strong> 的二次开发项目。</p>\n</li>\n<li><p>基于<strong>T-IO</strong> 的二次开发项目。</p>\n</li>\n</ul>\n<a id=\"more\"></a>\n<h3 id=\"优良归纳\"><a href=\"#优良归纳\" class=\"headerlink\" title=\"优良归纳\"></a>优良归纳</h3><p>XMPP：是基于XML的,有服务器的开源项目ejabberd；</p>\n<blockquote>\n<p>ejabberd是基于Jabber/XMPP协议的即时通讯服务器，由GPLv2授权（免费和开放源码），采用Erlang/OTP开发。它的特点是，跨平台，容错，集群和模块化。<br>Ejabberd目前是可扩展性最好的一种Jabber/XMPP服务器，支持分布多个服务器，并且具有容错处理，单台服务器失效不影响整个cluster运作。</p>\n</blockquote>\n<p>完整的XMPP IM 实现（Openfire + Spark + Smack）：</p>\n<blockquote>\n<p>包括服务器端——Openfire，客户端——Spark，XMPP 传输协议的实现——Smack（记住，XMPP是一个协议，协议是需要实现的，Smack起到的就是这样的一个作用）。三者都是基于Java 语言的实现。</p>\n</blockquote>\n<p>缺点：其中XMPP是基于XML的,并且不支持消息质量QOS, 所以本身并没有消息重传的机制,从而会导致丢消息。</p>\n<p>MQTT：是基于二进制的,支持QOS,并且已成为物联网的协议标准。</p>\n<p>MobileIMSDK：是一个比较成熟的兼容android、IOS、java标准平台的一个开源项目。有比较成熟的基于其上的开发的demo和示例。</p>\n<p>T-IO：有一个完善比较全面的开源项目，但是文档和示例比较少，估计需要自己爬不少的坑（慎选）。</p>\n<hr>\n<h3 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h3><ul>\n<li><p><a href=\"http://blog.csdn.net/wbw1985/article/details/5502272\" target=\"_blank\" rel=\"external\">XMPP协议的原理介绍</a></p>\n</li>\n<li><p><a href=\"https://my.oschina.net/yuanxulong/blog/348572\" target=\"_blank\" rel=\"external\">基于openfire+smack的Android、Web、PC开发</a></p>\n</li>\n<li><p><a href=\"https://www.cnblogs.com/findumars/p/6411060.html\" target=\"_blank\" rel=\"external\">iOS和Android使用MQTT协议实现消息推送和即时通讯（替代XMPP，已经有TMS MQTT）</a></p>\n</li>\n<li><p><a href=\"http://blog.csdn.net/lv_ws/article/details/50295265\" target=\"_blank\" rel=\"external\">Android mqtt即时通讯方案</a></p>\n</li>\n<li><p><a href=\"https://github.com/JackJiang2011/MobileIMSDK\" target=\"_blank\" rel=\"external\">一个专为移动端开发的原创即时通讯框架，超轻量级、高度提炼，完全基于UDP协议，支持iOS、Android、标准Java平台。</a></p>\n</li>\n<li><p><a href=\"https://github.com/ChenYilong/iOSBlog/blob/master/Tips/%E5%9F%BA%E4%BA%8EWebsocket%E7%9A%84IM%E5%8D%B3%E6%97%B6%E9%80%9A%E8%AE%AF%E6%8A%80%E6%9C%AF/IM%20%E5%8D%B3%E6%97%B6%E9%80%9A%E8%AE%AF%E6%8A%80%E6%9C%AF%E5%9C%A8%E5%A4%9A%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF%E4%B8%8B%E7%9A%84%E6%8A%80%E6%9C%AF%E5%AE%9E%E7%8E%B0%EF%BC%8C%E4%BB%A5%E5%8F%8A%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98%EF%BC%88iOS%E8%A7%86%E8%A7%92%EF%BC%89.md#%E5%9F%BA%E4%BA%8E-websocket-%E7%9A%84-im-%E7%B3%BB%E7%BB%9F\" target=\"_blank\" rel=\"external\">基于Websocket的IM即时通讯技术/IM 即时通讯技术在多应用场景下的技术实现，以及性能调优（iOS视角）.md</a></p>\n</li>\n<li><p><a href=\"https://github.com/fanux/lhttp/blob/master/doc/README_zh.md\" target=\"_blank\" rel=\"external\">Lhttp个基于websocket服务端框架</a></p>\n</li>\n<li><p><a href=\"http://t-io.org/#/\" target=\"_blank\" rel=\"external\">t-io: 不仅仅是百万级即时通讯框架</a></p>\n</li>\n</ul>\n","excerpt":"<h2 id=\"即时通讯开源软件归纳\"><a href=\"#即时通讯开源软件归纳\" class=\"headerlink\" title=\"即时通讯开源软件归纳\"></a><center>即时通讯开源软件归纳</center></h2><h3 id=\"开源归纳\"><a href=\"#开源归纳\" class=\"headerlink\" title=\"开源归纳\"></a>开源归纳</h3><p>因为需要兼容android和ios，所以一翻查找，暂时发现以下待定开源项目：</p>\n<ul>\n<li><p>基于<strong>XMPP</strong>  进行的二次开发项目，目前有基于服务端的开源项目：Openfire 。</p>\n</li>\n<li><p>基于<strong>MQTT</strong> 进行的二次开发项目。</p>\n</li>\n<li><p>基于<strong>MobileIMSDK</strong> 的二次开发项目。</p>\n</li>\n<li><p>基于<strong>T-IO</strong> 的二次开发项目。</p>\n</li>\n</ul>","more":"<h3 id=\"优良归纳\"><a href=\"#优良归纳\" class=\"headerlink\" title=\"优良归纳\"></a>优良归纳</h3><p>XMPP：是基于XML的,有服务器的开源项目ejabberd；</p>\n<blockquote>\n<p>ejabberd是基于Jabber/XMPP协议的即时通讯服务器，由GPLv2授权（免费和开放源码），采用Erlang/OTP开发。它的特点是，跨平台，容错，集群和模块化。<br>Ejabberd目前是可扩展性最好的一种Jabber/XMPP服务器，支持分布多个服务器，并且具有容错处理，单台服务器失效不影响整个cluster运作。</p>\n</blockquote>\n<p>完整的XMPP IM 实现（Openfire + Spark + Smack）：</p>\n<blockquote>\n<p>包括服务器端——Openfire，客户端——Spark，XMPP 传输协议的实现——Smack（记住，XMPP是一个协议，协议是需要实现的，Smack起到的就是这样的一个作用）。三者都是基于Java 语言的实现。</p>\n</blockquote>\n<p>缺点：其中XMPP是基于XML的,并且不支持消息质量QOS, 所以本身并没有消息重传的机制,从而会导致丢消息。</p>\n<p>MQTT：是基于二进制的,支持QOS,并且已成为物联网的协议标准。</p>\n<p>MobileIMSDK：是一个比较成熟的兼容android、IOS、java标准平台的一个开源项目。有比较成熟的基于其上的开发的demo和示例。</p>\n<p>T-IO：有一个完善比较全面的开源项目，但是文档和示例比较少，估计需要自己爬不少的坑（慎选）。</p>\n<hr>\n<h3 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h3><ul>\n<li><p><a href=\"http://blog.csdn.net/wbw1985/article/details/5502272\">XMPP协议的原理介绍</a></p>\n</li>\n<li><p><a href=\"https://my.oschina.net/yuanxulong/blog/348572\">基于openfire+smack的Android、Web、PC开发</a></p>\n</li>\n<li><p><a href=\"https://www.cnblogs.com/findumars/p/6411060.html\">iOS和Android使用MQTT协议实现消息推送和即时通讯（替代XMPP，已经有TMS MQTT）</a></p>\n</li>\n<li><p><a href=\"http://blog.csdn.net/lv_ws/article/details/50295265\">Android mqtt即时通讯方案</a></p>\n</li>\n<li><p><a href=\"https://github.com/JackJiang2011/MobileIMSDK\">一个专为移动端开发的原创即时通讯框架，超轻量级、高度提炼，完全基于UDP协议，支持iOS、Android、标准Java平台。</a></p>\n</li>\n<li><p><a href=\"https://github.com/ChenYilong/iOSBlog/blob/master/Tips/%E5%9F%BA%E4%BA%8EWebsocket%E7%9A%84IM%E5%8D%B3%E6%97%B6%E9%80%9A%E8%AE%AF%E6%8A%80%E6%9C%AF/IM%20%E5%8D%B3%E6%97%B6%E9%80%9A%E8%AE%AF%E6%8A%80%E6%9C%AF%E5%9C%A8%E5%A4%9A%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF%E4%B8%8B%E7%9A%84%E6%8A%80%E6%9C%AF%E5%AE%9E%E7%8E%B0%EF%BC%8C%E4%BB%A5%E5%8F%8A%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98%EF%BC%88iOS%E8%A7%86%E8%A7%92%EF%BC%89.md#%E5%9F%BA%E4%BA%8E-websocket-%E7%9A%84-im-%E7%B3%BB%E7%BB%9F\">基于Websocket的IM即时通讯技术/IM 即时通讯技术在多应用场景下的技术实现，以及性能调优（iOS视角）.md</a></p>\n</li>\n<li><p><a href=\"https://github.com/fanux/lhttp/blob/master/doc/README_zh.md\">Lhttp个基于websocket服务端框架</a></p>\n</li>\n<li><p><a href=\"http://t-io.org/#/\">t-io: 不仅仅是百万级即时通讯框架</a></p>\n</li>\n</ul>"},{"title":"Docker 初识","comments":0,"copyright":true,"top":10,"abbrlink":"fd0b65d2","date":"2017-11-27T06:50:54.000Z","_content":"\n# Docker 初识\n\n### 目录\n\n[相关文档](#相关文档)\n\n[简介](#简介)\n\n[概念](#概念)\n\n[Docekr 基础环境搭建](#基础环境搭建)\n\n[Docker 运用场景](#运用场景)\n\n### <a id=\"相关文档\"></a>相关文档\n\n- [大白话Docker入门（一）](https://yq.aliyun.com/articles/63035?utm_campaign=wenzhang&utm_medium=article&utm_source=QQ-qun&utm_content=m_7538)\n- [利用Docker构建开发环境详解](http://www.linuxidc.com/Linux/2014-10/107969.htm)\n- [宋宝华：Docker 最初的2小时(Docker从入门到入门)](http://blog.csdn.net/21cnbao/article/details/56275456)\n- [初探Docker](https://aotu.io/notes/2016/02/27/docker/index.html)\n- [Docker实战--部署简单nodejs应用](https://www.cnblogs.com/liusc/p/docker_node.html)\n- [Docker 镜像加速器](https://yq.aliyun.com/articles/29941)\n\n### <a id=\"简介\"></a>简介\n\nDocker是一个开源的引擎，可以轻松的为任何应用创建一个轻量级的、可移植的、自给自足的容器。开发者在笔记本上编译测试通过的容器可以批量地在生产环境中部署，包括VMs（虚拟机）、bare metal、OpenStack 集群和其他的基础应用平台。\n\n### <a id=\"概念\"></a>概念\n\nKVM, Virtualbox, Vmware是虚拟出机器，让每个实例看到一个单独的机器；而Docker是虚拟出操作系统，实现应用之间的隔离，让各个应用觉得自己有一个自己的操作系统，而且彼此之间隔离。\n\nDocker由下面几样东西组成：\n\n- Docker Client : Docker提供给用户的客户端。Docker Client提供给用户一个终端，用户输入Docker提供的命令来管理本地或者远程的服务器。\n- Docker Daemon : Docker服务的守护进程。每台服务器（物理机或虚机）上只要安装了Docker的环境，基本上就跑了一个后台程序Docker Daemon，Docker Daemon会接收Docker Client发过来的指令,并对服务器的进行具体操作。\n- Docker Images : 俗称Docker的镜像，这个可难懂了。你暂时可以认为这个就像我们要给电脑装系统用的系统CD盘，里面有操作系统的程序，并且还有一些CD盘在系统的基础上安装了必要的软件，做成的一张 “只读” 的CD。\n- Docker Registry : 这个可认为是Docker Images的仓库，就像git的仓库一样，用来管理Docker镜像的，提供了Docker镜像的上传、下载和浏览等功能，并且提供安全的账号管理可以管理只有自己可见的私人image。就像git的仓库一样，docker也提供了官方的Registry，叫做[Dock Hub](http://hub.Docker.com)\n- Docker Container : 俗称Docker的容器，这个是最关键的东西了。Docker Container是真正跑项目程序、消耗机器资源、提供服务的地方，Docker Container通过Docker Images启动，在Docker Images的基础上运行你需要的代码。 你可以认为Docker Container提供了系统硬件环境，然后使用了Docker Images这些制作好的系统盘，再加上你的项目代码，跑起来就可以提供服务了。\n\n![](http://oyz8j0ezy.bkt.clouddn.com/docker_build.png)\n\n<!--more-->\n\nDocker Container 的示例图：\n\n![](http://oyz8j0ezy.bkt.clouddn.com/docker_container.png)\n\nContainer和Image 在Docker的世界里，Image是指一个只读的层（Layer），这里的层是AUFS里的概念，最直观的方式就是看一下docker官方给出的图：\n\n![](http://oyz8j0ezy.bkt.clouddn.com/dockercontainerandimage.png)\n\nDocker使用了一种叫AUFS的文件系统，这种文件系统可以让你一层一层地叠加修改你的文件，最底下的文件系统是只读的，如果需要修改文件，AUFS会增加一个可写的层（Layer），这样有很多好处，例如不同的Container可以共享底层的只读文件系统（同一个Kernel），使得你可以跑N多个Container而不至于你的硬盘被挤爆了！这个只读的层就是Image！而如你所看到的，一个可写的层就是Container。\n\n### <a id=\"基础环境搭建\"></a>Docker 基础环境搭建（阿里云仓库创建、提交）\n\n- 首先安装基于你的系统的Docker环境，建议参考[docker](http://www.docker.com/products/docker)的官网以及相关问题百度。\n（注：如果是win10专业版，因为自带了虚拟机Hyper-V,所以可以下载专门匹配的docker for windows 10，其他的window版本，建议下载Docker Toolbox，它包含了运行Docker时需要的一切：Docker客户端、Compose（仅Mac需要）、Kitematic、Machine以及VirtualBox。）\n\n- 安装完成后一般双击你桌面的快捷图标（Docker Quickstart Terminal），它会初始化去github下载一个虚拟机的默认的default镜像文件，一般这个下载非常慢，建议直接访问https://github.com/boot2docker/boot2docker/releases 下载对应版本的boot2docker.iso\n然后复制粘贴到C:\\Users\\LN\\.docker\\machine\\cache目录下，这样可以完成docker的首次启动。\n查看 docker version \n\n![](http://oyz8j0ezy.bkt.clouddn.com/dockerversion.png)\n\n我们也可以查看相关的一些命令，查看镜像 docker images、查看容器 docker ps -a 、查看正在运行的容器 docker ps 等。\n\n- 因为docker默认的官方仓库是https://hub.docker.com , 访问困难，所以我们在拉取镜像的时候一般选择国内的docker仓库，如网易，阿里都有对应的docker镜像仓库。我们拿[阿里](https://dev.aliyun.com/search.html)的仓库镜像做介绍。使用docker info  查看我们是否配备好了国内加速器。\n\n- 拉取镜像 docker pull centos ，使用阿里云加速。使用命令  sudo docker run -it ubuntu:14.04 /bin/bash ， 运行之后我们就有了一个Ubuntu的基础环境，我们可以把拉取下来的镜像 添加gcc和vim ，添加构建文件Dockerfile\n\n```bash\nmkdir myubuntuWithVimAndGcc\ncd myubuntuWithVimAndGcc && touch Dockerfile\nvi Dockerfile\n```\n\n```bash\n# Ubuntu 14.04 with vim and gcc\nFROM ubuntu:14.04\nMAINTAINER Barry Song<ningfan210@163.com\nRUN apt-get update && apt-get install -y vim gcc\n```\n\n然后通过命令 sudo docker build -t ubuntu/ubuntuwithvimandgcc . ，试着运行一下,\n测试下gcc 和 vim ,发现已经装好了，\n![](http://oyz8j0ezy.bkt.clouddn.com/ubuntuwithgcc.png)\n\n- 最后我们可以发布我们的镜像到阿里的自己的仓库中，可以让别人拉取。\n\n### <a id=\"运用场景\"></a>Docker 运用场景 （Docker 搭建基础项目环境）\n\n- 作为示范，我们演示下，在docker环境中搭建一个运行在nodejs环境下的hexo博客。\n首先编写构建文件Dockerfile：\n\n```bash\nFROM node\nMAINTAINER NANMEN\n\nRUN npm install -g hexo --registry=https://registry.npm.taobao.org\n\nRUN mkdir -p hexofile\n\nWORKDIR /hexofile\n\nRUN hexo init\n\nRUN hexo generate\n\nEXPOSE 4000\n\nCMD [\"hexo\",\"server\"]\n~\n```\n\n然后使用命令 sudo docker build -t hexo/node . 命令构建我们的hexo的镜像，因为hexo运行时是跑在端口4000上，所以我们在执行运行命令的时候需要运用到 -p 命令做端口映射，如 \nsudo docker run -d -p 4000:4000 hexo/node:latest ,然后在浏览器中访问 http://localhost:4000/ \n\n![](http://oyz8j0ezy.bkt.clouddn.com/dockerandhexo.png)\n","source":"_posts/2017-11-27-Docker-初识.md","raw":"---\ntitle: Docker 初识\ncategories: Docker\ntags:\n  - Docker\ncomments: false\ncopyright: true\ntop: 10\nabbrlink: fd0b65d2\ndate: 2017-11-27 14:50:54\n---\n\n# Docker 初识\n\n### 目录\n\n[相关文档](#相关文档)\n\n[简介](#简介)\n\n[概念](#概念)\n\n[Docekr 基础环境搭建](#基础环境搭建)\n\n[Docker 运用场景](#运用场景)\n\n### <a id=\"相关文档\"></a>相关文档\n\n- [大白话Docker入门（一）](https://yq.aliyun.com/articles/63035?utm_campaign=wenzhang&utm_medium=article&utm_source=QQ-qun&utm_content=m_7538)\n- [利用Docker构建开发环境详解](http://www.linuxidc.com/Linux/2014-10/107969.htm)\n- [宋宝华：Docker 最初的2小时(Docker从入门到入门)](http://blog.csdn.net/21cnbao/article/details/56275456)\n- [初探Docker](https://aotu.io/notes/2016/02/27/docker/index.html)\n- [Docker实战--部署简单nodejs应用](https://www.cnblogs.com/liusc/p/docker_node.html)\n- [Docker 镜像加速器](https://yq.aliyun.com/articles/29941)\n\n### <a id=\"简介\"></a>简介\n\nDocker是一个开源的引擎，可以轻松的为任何应用创建一个轻量级的、可移植的、自给自足的容器。开发者在笔记本上编译测试通过的容器可以批量地在生产环境中部署，包括VMs（虚拟机）、bare metal、OpenStack 集群和其他的基础应用平台。\n\n### <a id=\"概念\"></a>概念\n\nKVM, Virtualbox, Vmware是虚拟出机器，让每个实例看到一个单独的机器；而Docker是虚拟出操作系统，实现应用之间的隔离，让各个应用觉得自己有一个自己的操作系统，而且彼此之间隔离。\n\nDocker由下面几样东西组成：\n\n- Docker Client : Docker提供给用户的客户端。Docker Client提供给用户一个终端，用户输入Docker提供的命令来管理本地或者远程的服务器。\n- Docker Daemon : Docker服务的守护进程。每台服务器（物理机或虚机）上只要安装了Docker的环境，基本上就跑了一个后台程序Docker Daemon，Docker Daemon会接收Docker Client发过来的指令,并对服务器的进行具体操作。\n- Docker Images : 俗称Docker的镜像，这个可难懂了。你暂时可以认为这个就像我们要给电脑装系统用的系统CD盘，里面有操作系统的程序，并且还有一些CD盘在系统的基础上安装了必要的软件，做成的一张 “只读” 的CD。\n- Docker Registry : 这个可认为是Docker Images的仓库，就像git的仓库一样，用来管理Docker镜像的，提供了Docker镜像的上传、下载和浏览等功能，并且提供安全的账号管理可以管理只有自己可见的私人image。就像git的仓库一样，docker也提供了官方的Registry，叫做[Dock Hub](http://hub.Docker.com)\n- Docker Container : 俗称Docker的容器，这个是最关键的东西了。Docker Container是真正跑项目程序、消耗机器资源、提供服务的地方，Docker Container通过Docker Images启动，在Docker Images的基础上运行你需要的代码。 你可以认为Docker Container提供了系统硬件环境，然后使用了Docker Images这些制作好的系统盘，再加上你的项目代码，跑起来就可以提供服务了。\n\n![](http://oyz8j0ezy.bkt.clouddn.com/docker_build.png)\n\n<!--more-->\n\nDocker Container 的示例图：\n\n![](http://oyz8j0ezy.bkt.clouddn.com/docker_container.png)\n\nContainer和Image 在Docker的世界里，Image是指一个只读的层（Layer），这里的层是AUFS里的概念，最直观的方式就是看一下docker官方给出的图：\n\n![](http://oyz8j0ezy.bkt.clouddn.com/dockercontainerandimage.png)\n\nDocker使用了一种叫AUFS的文件系统，这种文件系统可以让你一层一层地叠加修改你的文件，最底下的文件系统是只读的，如果需要修改文件，AUFS会增加一个可写的层（Layer），这样有很多好处，例如不同的Container可以共享底层的只读文件系统（同一个Kernel），使得你可以跑N多个Container而不至于你的硬盘被挤爆了！这个只读的层就是Image！而如你所看到的，一个可写的层就是Container。\n\n### <a id=\"基础环境搭建\"></a>Docker 基础环境搭建（阿里云仓库创建、提交）\n\n- 首先安装基于你的系统的Docker环境，建议参考[docker](http://www.docker.com/products/docker)的官网以及相关问题百度。\n（注：如果是win10专业版，因为自带了虚拟机Hyper-V,所以可以下载专门匹配的docker for windows 10，其他的window版本，建议下载Docker Toolbox，它包含了运行Docker时需要的一切：Docker客户端、Compose（仅Mac需要）、Kitematic、Machine以及VirtualBox。）\n\n- 安装完成后一般双击你桌面的快捷图标（Docker Quickstart Terminal），它会初始化去github下载一个虚拟机的默认的default镜像文件，一般这个下载非常慢，建议直接访问https://github.com/boot2docker/boot2docker/releases 下载对应版本的boot2docker.iso\n然后复制粘贴到C:\\Users\\LN\\.docker\\machine\\cache目录下，这样可以完成docker的首次启动。\n查看 docker version \n\n![](http://oyz8j0ezy.bkt.clouddn.com/dockerversion.png)\n\n我们也可以查看相关的一些命令，查看镜像 docker images、查看容器 docker ps -a 、查看正在运行的容器 docker ps 等。\n\n- 因为docker默认的官方仓库是https://hub.docker.com , 访问困难，所以我们在拉取镜像的时候一般选择国内的docker仓库，如网易，阿里都有对应的docker镜像仓库。我们拿[阿里](https://dev.aliyun.com/search.html)的仓库镜像做介绍。使用docker info  查看我们是否配备好了国内加速器。\n\n- 拉取镜像 docker pull centos ，使用阿里云加速。使用命令  sudo docker run -it ubuntu:14.04 /bin/bash ， 运行之后我们就有了一个Ubuntu的基础环境，我们可以把拉取下来的镜像 添加gcc和vim ，添加构建文件Dockerfile\n\n```bash\nmkdir myubuntuWithVimAndGcc\ncd myubuntuWithVimAndGcc && touch Dockerfile\nvi Dockerfile\n```\n\n```bash\n# Ubuntu 14.04 with vim and gcc\nFROM ubuntu:14.04\nMAINTAINER Barry Song<ningfan210@163.com\nRUN apt-get update && apt-get install -y vim gcc\n```\n\n然后通过命令 sudo docker build -t ubuntu/ubuntuwithvimandgcc . ，试着运行一下,\n测试下gcc 和 vim ,发现已经装好了，\n![](http://oyz8j0ezy.bkt.clouddn.com/ubuntuwithgcc.png)\n\n- 最后我们可以发布我们的镜像到阿里的自己的仓库中，可以让别人拉取。\n\n### <a id=\"运用场景\"></a>Docker 运用场景 （Docker 搭建基础项目环境）\n\n- 作为示范，我们演示下，在docker环境中搭建一个运行在nodejs环境下的hexo博客。\n首先编写构建文件Dockerfile：\n\n```bash\nFROM node\nMAINTAINER NANMEN\n\nRUN npm install -g hexo --registry=https://registry.npm.taobao.org\n\nRUN mkdir -p hexofile\n\nWORKDIR /hexofile\n\nRUN hexo init\n\nRUN hexo generate\n\nEXPOSE 4000\n\nCMD [\"hexo\",\"server\"]\n~\n```\n\n然后使用命令 sudo docker build -t hexo/node . 命令构建我们的hexo的镜像，因为hexo运行时是跑在端口4000上，所以我们在执行运行命令的时候需要运用到 -p 命令做端口映射，如 \nsudo docker run -d -p 4000:4000 hexo/node:latest ,然后在浏览器中访问 http://localhost:4000/ \n\n![](http://oyz8j0ezy.bkt.clouddn.com/dockerandhexo.png)\n","slug":"Docker-初识","published":1,"updated":"2018-02-26T10:01:17.560Z","layout":"post","photos":[],"link":"","_id":"cje7yhv3c000j7ku69n7lx5wb","content":"<h1 id=\"Docker-初识\"><a href=\"#Docker-初识\" class=\"headerlink\" title=\"Docker 初识\"></a>Docker 初识</h1><h3 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h3><p><a href=\"#相关文档\">相关文档</a></p>\n<p><a href=\"#简介\">简介</a></p>\n<p><a href=\"#概念\">概念</a></p>\n<p><a href=\"#基础环境搭建\">Docekr 基础环境搭建</a></p>\n<p><a href=\"#运用场景\">Docker 运用场景</a></p>\n<h3 id=\"相关文档\"><a href=\"#相关文档\" class=\"headerlink\" title=\"相关文档\"></a><a id=\"相关文档\"></a>相关文档</h3><ul>\n<li><a href=\"https://yq.aliyun.com/articles/63035?utm_campaign=wenzhang&amp;utm_medium=article&amp;utm_source=QQ-qun&amp;utm_content=m_7538\" target=\"_blank\" rel=\"external\">大白话Docker入门（一）</a></li>\n<li><a href=\"http://www.linuxidc.com/Linux/2014-10/107969.htm\" target=\"_blank\" rel=\"external\">利用Docker构建开发环境详解</a></li>\n<li><a href=\"http://blog.csdn.net/21cnbao/article/details/56275456\" target=\"_blank\" rel=\"external\">宋宝华：Docker 最初的2小时(Docker从入门到入门)</a></li>\n<li><a href=\"https://aotu.io/notes/2016/02/27/docker/index.html\" target=\"_blank\" rel=\"external\">初探Docker</a></li>\n<li><a href=\"https://www.cnblogs.com/liusc/p/docker_node.html\" target=\"_blank\" rel=\"external\">Docker实战–部署简单nodejs应用</a></li>\n<li><a href=\"https://yq.aliyun.com/articles/29941\" target=\"_blank\" rel=\"external\">Docker 镜像加速器</a></li>\n</ul>\n<h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a><a id=\"简介\"></a>简介</h3><p>Docker是一个开源的引擎，可以轻松的为任何应用创建一个轻量级的、可移植的、自给自足的容器。开发者在笔记本上编译测试通过的容器可以批量地在生产环境中部署，包括VMs（虚拟机）、bare metal、OpenStack 集群和其他的基础应用平台。</p>\n<h3 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a><a id=\"概念\"></a>概念</h3><p>KVM, Virtualbox, Vmware是虚拟出机器，让每个实例看到一个单独的机器；而Docker是虚拟出操作系统，实现应用之间的隔离，让各个应用觉得自己有一个自己的操作系统，而且彼此之间隔离。</p>\n<p>Docker由下面几样东西组成：</p>\n<ul>\n<li>Docker Client : Docker提供给用户的客户端。Docker Client提供给用户一个终端，用户输入Docker提供的命令来管理本地或者远程的服务器。</li>\n<li>Docker Daemon : Docker服务的守护进程。每台服务器（物理机或虚机）上只要安装了Docker的环境，基本上就跑了一个后台程序Docker Daemon，Docker Daemon会接收Docker Client发过来的指令,并对服务器的进行具体操作。</li>\n<li>Docker Images : 俗称Docker的镜像，这个可难懂了。你暂时可以认为这个就像我们要给电脑装系统用的系统CD盘，里面有操作系统的程序，并且还有一些CD盘在系统的基础上安装了必要的软件，做成的一张 “只读” 的CD。</li>\n<li>Docker Registry : 这个可认为是Docker Images的仓库，就像git的仓库一样，用来管理Docker镜像的，提供了Docker镜像的上传、下载和浏览等功能，并且提供安全的账号管理可以管理只有自己可见的私人image。就像git的仓库一样，docker也提供了官方的Registry，叫做<a href=\"http://hub.Docker.com\" target=\"_blank\" rel=\"external\">Dock Hub</a></li>\n<li>Docker Container : 俗称Docker的容器，这个是最关键的东西了。Docker Container是真正跑项目程序、消耗机器资源、提供服务的地方，Docker Container通过Docker Images启动，在Docker Images的基础上运行你需要的代码。 你可以认为Docker Container提供了系统硬件环境，然后使用了Docker Images这些制作好的系统盘，再加上你的项目代码，跑起来就可以提供服务了。</li>\n</ul>\n<p><img src=\"http://oyz8j0ezy.bkt.clouddn.com/docker_build.png\" alt=\"\"></p>\n<a id=\"more\"></a>\n<p>Docker Container 的示例图：</p>\n<p><img src=\"http://oyz8j0ezy.bkt.clouddn.com/docker_container.png\" alt=\"\"></p>\n<p>Container和Image 在Docker的世界里，Image是指一个只读的层（Layer），这里的层是AUFS里的概念，最直观的方式就是看一下docker官方给出的图：</p>\n<p><img src=\"http://oyz8j0ezy.bkt.clouddn.com/dockercontainerandimage.png\" alt=\"\"></p>\n<p>Docker使用了一种叫AUFS的文件系统，这种文件系统可以让你一层一层地叠加修改你的文件，最底下的文件系统是只读的，如果需要修改文件，AUFS会增加一个可写的层（Layer），这样有很多好处，例如不同的Container可以共享底层的只读文件系统（同一个Kernel），使得你可以跑N多个Container而不至于你的硬盘被挤爆了！这个只读的层就是Image！而如你所看到的，一个可写的层就是Container。</p>\n<h3 id=\"Docker-基础环境搭建（阿里云仓库创建、提交）\"><a href=\"#Docker-基础环境搭建（阿里云仓库创建、提交）\" class=\"headerlink\" title=\"Docker 基础环境搭建（阿里云仓库创建、提交）\"></a><a id=\"基础环境搭建\"></a>Docker 基础环境搭建（阿里云仓库创建、提交）</h3><ul>\n<li><p>首先安装基于你的系统的Docker环境，建议参考<a href=\"http://www.docker.com/products/docker\" target=\"_blank\" rel=\"external\">docker</a>的官网以及相关问题百度。<br>（注：如果是win10专业版，因为自带了虚拟机Hyper-V,所以可以下载专门匹配的docker for windows 10，其他的window版本，建议下载Docker Toolbox，它包含了运行Docker时需要的一切：Docker客户端、Compose（仅Mac需要）、Kitematic、Machine以及VirtualBox。）</p>\n</li>\n<li><p>安装完成后一般双击你桌面的快捷图标（Docker Quickstart Terminal），它会初始化去github下载一个虚拟机的默认的default镜像文件，一般这个下载非常慢，建议直接访问<a href=\"https://github.com/boot2docker/boot2docker/releases\" target=\"_blank\" rel=\"external\">https://github.com/boot2docker/boot2docker/releases</a> 下载对应版本的boot2docker.iso<br>然后复制粘贴到C:\\Users\\LN.docker\\machine\\cache目录下，这样可以完成docker的首次启动。<br>查看 docker version </p>\n</li>\n</ul>\n<p><img src=\"http://oyz8j0ezy.bkt.clouddn.com/dockerversion.png\" alt=\"\"></p>\n<p>我们也可以查看相关的一些命令，查看镜像 docker images、查看容器 docker ps -a 、查看正在运行的容器 docker ps 等。</p>\n<ul>\n<li><p>因为docker默认的官方仓库是<a href=\"https://hub.docker.com\" target=\"_blank\" rel=\"external\">https://hub.docker.com</a> , 访问困难，所以我们在拉取镜像的时候一般选择国内的docker仓库，如网易，阿里都有对应的docker镜像仓库。我们拿<a href=\"https://dev.aliyun.com/search.html\" target=\"_blank\" rel=\"external\">阿里</a>的仓库镜像做介绍。使用docker info  查看我们是否配备好了国内加速器。</p>\n</li>\n<li><p>拉取镜像 docker pull centos ，使用阿里云加速。使用命令  sudo docker run -it ubuntu:14.04 /bin/bash ， 运行之后我们就有了一个Ubuntu的基础环境，我们可以把拉取下来的镜像 添加gcc和vim ，添加构建文件Dockerfile</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">mkdir myubuntuWithVimAndGcc</div><div class=\"line\"><span class=\"built_in\">cd</span> myubuntuWithVimAndGcc &amp;&amp; touch Dockerfile</div><div class=\"line\">vi Dockerfile</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># Ubuntu 14.04 with vim and gcc</span></div><div class=\"line\">FROM ubuntu:14.04</div><div class=\"line\">MAINTAINER Barry Song&lt;ningfan210@163.com</div><div class=\"line\">RUN apt-get update &amp;&amp; apt-get install -y vim gcc</div></pre></td></tr></table></figure>\n<p>然后通过命令 sudo docker build -t ubuntu/ubuntuwithvimandgcc . ，试着运行一下,<br>测试下gcc 和 vim ,发现已经装好了，<br><img src=\"http://oyz8j0ezy.bkt.clouddn.com/ubuntuwithgcc.png\" alt=\"\"></p>\n<ul>\n<li>最后我们可以发布我们的镜像到阿里的自己的仓库中，可以让别人拉取。</li>\n</ul>\n<h3 id=\"Docker-运用场景-（Docker-搭建基础项目环境）\"><a href=\"#Docker-运用场景-（Docker-搭建基础项目环境）\" class=\"headerlink\" title=\"Docker 运用场景 （Docker 搭建基础项目环境）\"></a><a id=\"运用场景\"></a>Docker 运用场景 （Docker 搭建基础项目环境）</h3><ul>\n<li>作为示范，我们演示下，在docker环境中搭建一个运行在nodejs环境下的hexo博客。<br>首先编写构建文件Dockerfile：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">FROM node</div><div class=\"line\">MAINTAINER NANMEN</div><div class=\"line\"></div><div class=\"line\">RUN npm install -g hexo --registry=https://registry.npm.taobao.org</div><div class=\"line\"></div><div class=\"line\">RUN mkdir -p hexofile</div><div class=\"line\"></div><div class=\"line\">WORKDIR /hexofile</div><div class=\"line\"></div><div class=\"line\">RUN hexo init</div><div class=\"line\"></div><div class=\"line\">RUN hexo generate</div><div class=\"line\"></div><div class=\"line\">EXPOSE 4000</div><div class=\"line\"></div><div class=\"line\">CMD [<span class=\"string\">\"hexo\"</span>,<span class=\"string\">\"server\"</span>]</div><div class=\"line\">~</div></pre></td></tr></table></figure>\n<p>然后使用命令 sudo docker build -t hexo/node . 命令构建我们的hexo的镜像，因为hexo运行时是跑在端口4000上，所以我们在执行运行命令的时候需要运用到 -p 命令做端口映射，如<br>sudo docker run -d -p 4000:4000 hexo/node:latest ,然后在浏览器中访问 <a href=\"http://localhost:4000/\" target=\"_blank\" rel=\"external\">http://localhost:4000/</a> </p>\n<p><img src=\"http://oyz8j0ezy.bkt.clouddn.com/dockerandhexo.png\" alt=\"\"></p>\n","excerpt":"<h1 id=\"Docker-初识\"><a href=\"#Docker-初识\" class=\"headerlink\" title=\"Docker 初识\"></a>Docker 初识</h1><h3 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h3><p><a href=\"#相关文档\">相关文档</a></p>\n<p><a href=\"#简介\">简介</a></p>\n<p><a href=\"#概念\">概念</a></p>\n<p><a href=\"#基础环境搭建\">Docekr 基础环境搭建</a></p>\n<p><a href=\"#运用场景\">Docker 运用场景</a></p>\n<h3 id=\"相关文档\"><a href=\"#相关文档\" class=\"headerlink\" title=\"相关文档\"></a><a id=\"相关文档\"></a>相关文档</h3><ul>\n<li><a href=\"https://yq.aliyun.com/articles/63035?utm_campaign=wenzhang&amp;utm_medium=article&amp;utm_source=QQ-qun&amp;utm_content=m_7538\">大白话Docker入门（一）</a></li>\n<li><a href=\"http://www.linuxidc.com/Linux/2014-10/107969.htm\">利用Docker构建开发环境详解</a></li>\n<li><a href=\"http://blog.csdn.net/21cnbao/article/details/56275456\">宋宝华：Docker 最初的2小时(Docker从入门到入门)</a></li>\n<li><a href=\"https://aotu.io/notes/2016/02/27/docker/index.html\">初探Docker</a></li>\n<li><a href=\"https://www.cnblogs.com/liusc/p/docker_node.html\">Docker实战–部署简单nodejs应用</a></li>\n<li><a href=\"https://yq.aliyun.com/articles/29941\">Docker 镜像加速器</a></li>\n</ul>\n<h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a><a id=\"简介\"></a>简介</h3><p>Docker是一个开源的引擎，可以轻松的为任何应用创建一个轻量级的、可移植的、自给自足的容器。开发者在笔记本上编译测试通过的容器可以批量地在生产环境中部署，包括VMs（虚拟机）、bare metal、OpenStack 集群和其他的基础应用平台。</p>\n<h3 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a><a id=\"概念\"></a>概念</h3><p>KVM, Virtualbox, Vmware是虚拟出机器，让每个实例看到一个单独的机器；而Docker是虚拟出操作系统，实现应用之间的隔离，让各个应用觉得自己有一个自己的操作系统，而且彼此之间隔离。</p>\n<p>Docker由下面几样东西组成：</p>\n<ul>\n<li>Docker Client : Docker提供给用户的客户端。Docker Client提供给用户一个终端，用户输入Docker提供的命令来管理本地或者远程的服务器。</li>\n<li>Docker Daemon : Docker服务的守护进程。每台服务器（物理机或虚机）上只要安装了Docker的环境，基本上就跑了一个后台程序Docker Daemon，Docker Daemon会接收Docker Client发过来的指令,并对服务器的进行具体操作。</li>\n<li>Docker Images : 俗称Docker的镜像，这个可难懂了。你暂时可以认为这个就像我们要给电脑装系统用的系统CD盘，里面有操作系统的程序，并且还有一些CD盘在系统的基础上安装了必要的软件，做成的一张 “只读” 的CD。</li>\n<li>Docker Registry : 这个可认为是Docker Images的仓库，就像git的仓库一样，用来管理Docker镜像的，提供了Docker镜像的上传、下载和浏览等功能，并且提供安全的账号管理可以管理只有自己可见的私人image。就像git的仓库一样，docker也提供了官方的Registry，叫做<a href=\"http://hub.Docker.com\">Dock Hub</a></li>\n<li>Docker Container : 俗称Docker的容器，这个是最关键的东西了。Docker Container是真正跑项目程序、消耗机器资源、提供服务的地方，Docker Container通过Docker Images启动，在Docker Images的基础上运行你需要的代码。 你可以认为Docker Container提供了系统硬件环境，然后使用了Docker Images这些制作好的系统盘，再加上你的项目代码，跑起来就可以提供服务了。</li>\n</ul>\n<p><img src=\"http://oyz8j0ezy.bkt.clouddn.com/docker_build.png\" alt=\"\"></p>","more":"<p>Docker Container 的示例图：</p>\n<p><img src=\"http://oyz8j0ezy.bkt.clouddn.com/docker_container.png\" alt=\"\"></p>\n<p>Container和Image 在Docker的世界里，Image是指一个只读的层（Layer），这里的层是AUFS里的概念，最直观的方式就是看一下docker官方给出的图：</p>\n<p><img src=\"http://oyz8j0ezy.bkt.clouddn.com/dockercontainerandimage.png\" alt=\"\"></p>\n<p>Docker使用了一种叫AUFS的文件系统，这种文件系统可以让你一层一层地叠加修改你的文件，最底下的文件系统是只读的，如果需要修改文件，AUFS会增加一个可写的层（Layer），这样有很多好处，例如不同的Container可以共享底层的只读文件系统（同一个Kernel），使得你可以跑N多个Container而不至于你的硬盘被挤爆了！这个只读的层就是Image！而如你所看到的，一个可写的层就是Container。</p>\n<h3 id=\"Docker-基础环境搭建（阿里云仓库创建、提交）\"><a href=\"#Docker-基础环境搭建（阿里云仓库创建、提交）\" class=\"headerlink\" title=\"Docker 基础环境搭建（阿里云仓库创建、提交）\"></a><a id=\"基础环境搭建\"></a>Docker 基础环境搭建（阿里云仓库创建、提交）</h3><ul>\n<li><p>首先安装基于你的系统的Docker环境，建议参考<a href=\"http://www.docker.com/products/docker\">docker</a>的官网以及相关问题百度。<br>（注：如果是win10专业版，因为自带了虚拟机Hyper-V,所以可以下载专门匹配的docker for windows 10，其他的window版本，建议下载Docker Toolbox，它包含了运行Docker时需要的一切：Docker客户端、Compose（仅Mac需要）、Kitematic、Machine以及VirtualBox。）</p>\n</li>\n<li><p>安装完成后一般双击你桌面的快捷图标（Docker Quickstart Terminal），它会初始化去github下载一个虚拟机的默认的default镜像文件，一般这个下载非常慢，建议直接访问<a href=\"https://github.com/boot2docker/boot2docker/releases\">https://github.com/boot2docker/boot2docker/releases</a> 下载对应版本的boot2docker.iso<br>然后复制粘贴到C:\\Users\\LN.docker\\machine\\cache目录下，这样可以完成docker的首次启动。<br>查看 docker version </p>\n</li>\n</ul>\n<p><img src=\"http://oyz8j0ezy.bkt.clouddn.com/dockerversion.png\" alt=\"\"></p>\n<p>我们也可以查看相关的一些命令，查看镜像 docker images、查看容器 docker ps -a 、查看正在运行的容器 docker ps 等。</p>\n<ul>\n<li><p>因为docker默认的官方仓库是<a href=\"https://hub.docker.com\">https://hub.docker.com</a> , 访问困难，所以我们在拉取镜像的时候一般选择国内的docker仓库，如网易，阿里都有对应的docker镜像仓库。我们拿<a href=\"https://dev.aliyun.com/search.html\">阿里</a>的仓库镜像做介绍。使用docker info  查看我们是否配备好了国内加速器。</p>\n</li>\n<li><p>拉取镜像 docker pull centos ，使用阿里云加速。使用命令  sudo docker run -it ubuntu:14.04 /bin/bash ， 运行之后我们就有了一个Ubuntu的基础环境，我们可以把拉取下来的镜像 添加gcc和vim ，添加构建文件Dockerfile</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">mkdir myubuntuWithVimAndGcc</div><div class=\"line\"><span class=\"built_in\">cd</span> myubuntuWithVimAndGcc &amp;&amp; touch Dockerfile</div><div class=\"line\">vi Dockerfile</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># Ubuntu 14.04 with vim and gcc</span></div><div class=\"line\">FROM ubuntu:14.04</div><div class=\"line\">MAINTAINER Barry Song&lt;ningfan210@163.com</div><div class=\"line\">RUN apt-get update &amp;&amp; apt-get install -y vim gcc</div></pre></td></tr></table></figure>\n<p>然后通过命令 sudo docker build -t ubuntu/ubuntuwithvimandgcc . ，试着运行一下,<br>测试下gcc 和 vim ,发现已经装好了，<br><img src=\"http://oyz8j0ezy.bkt.clouddn.com/ubuntuwithgcc.png\" alt=\"\"></p>\n<ul>\n<li>最后我们可以发布我们的镜像到阿里的自己的仓库中，可以让别人拉取。</li>\n</ul>\n<h3 id=\"Docker-运用场景-（Docker-搭建基础项目环境）\"><a href=\"#Docker-运用场景-（Docker-搭建基础项目环境）\" class=\"headerlink\" title=\"Docker 运用场景 （Docker 搭建基础项目环境）\"></a><a id=\"运用场景\"></a>Docker 运用场景 （Docker 搭建基础项目环境）</h3><ul>\n<li>作为示范，我们演示下，在docker环境中搭建一个运行在nodejs环境下的hexo博客。<br>首先编写构建文件Dockerfile：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">FROM node</div><div class=\"line\">MAINTAINER NANMEN</div><div class=\"line\"></div><div class=\"line\">RUN npm install -g hexo --registry=https://registry.npm.taobao.org</div><div class=\"line\"></div><div class=\"line\">RUN mkdir -p hexofile</div><div class=\"line\"></div><div class=\"line\">WORKDIR /hexofile</div><div class=\"line\"></div><div class=\"line\">RUN hexo init</div><div class=\"line\"></div><div class=\"line\">RUN hexo generate</div><div class=\"line\"></div><div class=\"line\">EXPOSE 4000</div><div class=\"line\"></div><div class=\"line\">CMD [<span class=\"string\">\"hexo\"</span>,<span class=\"string\">\"server\"</span>]</div><div class=\"line\">~</div></pre></td></tr></table></figure>\n<p>然后使用命令 sudo docker build -t hexo/node . 命令构建我们的hexo的镜像，因为hexo运行时是跑在端口4000上，所以我们在执行运行命令的时候需要运用到 -p 命令做端口映射，如<br>sudo docker run -d -p 4000:4000 hexo/node:latest ,然后在浏览器中访问 <a href=\"http://localhost:4000/\">http://localhost:4000/</a> </p>\n<p><img src=\"http://oyz8j0ezy.bkt.clouddn.com/dockerandhexo.png\" alt=\"\"></p>"},{"title":"concurrent并发包总结","comments":0,"copyright":true,"top":10,"abbrlink":"9880a961","date":"2018-01-16T05:46:39.000Z","_content":"\n## <center>java.util.concurrent 包 java并发编程包（一）</center>\n\n### 1.简介\n\n通常所说的concurrent包基本有3个package组成 \njava.util.concurrent：提供大部分关于并发的接口和类，如BlockingQueue,Callable,ConcurrentHashMap,ExecutorService, Semaphore等 \njava.util.concurrent.atomic：提供所有原子操作的类， 如AtomicInteger, AtomicLong等； \njava.util.concurrent.locks:提供锁相关的类, 如Lock, ReentrantLock, ReadWriteLock, Condition等； \n\nconcurrent包的优点：\n\n> 1. 首先，功能非常丰富，诸如线程池(ThreadPoolExecutor)，CountDownLatch等并发编程中需要的类已经有现成的实现，不需要自己去实现一套； 毕竟jdk1.4对多线程编程的主要支持几乎就只有Thread, Runnable,synchronized等\n> 2. concurrent包里面的一些操作是基于硬件级别的CAS(compare and swap),就是在cpu级别提供了原子操作，简单的说就可以提供无阻塞、无锁定的算法； 而现代cpu大部分都是支持这样的算法的；\n\n### 闭锁CountDownLatch\n\njava.util.concurrent.CountDownLatch 是一个并发构造，它允许一个或多个线程等待一系列指定操作的完成。\n\n通常的使用场景是，某个主线程接到一个任务，起了n个子线程去完成，但是主线程需要等待这n个子线程都完成任务了以后才开始执行某个操作； \n\n演示代码\n\n<!--more-->\n\n```java\n@Test\npublic void demoCountDown()\n{\n    int count = 10;\n    final CountDownLatch l = new CountDownLatch(count);\n    for(int i = 0; i < count; ++i)\n    {\n        final int index = i;\n        new Thread(new Runnable() {\n\n            @Override\n            public void run() {\n                try {\n                    Thread.currentThread().sleep(20 * 1000);\n                } catch (InterruptedException e) {\n\n                    e.printStackTrace();\n                }\n\n                System.out.println(\"thread \" + index + \" has finished...\");\n\n                l.countDown();\n\n            }\n        }).start();\n    }\n\n    try {\n        l.await();\n    } catch (InterruptedException e) {\n        e.printStackTrace();\n    }\n\n    System.out.println(\"now all threads have finished\");\n\n}\n```\n\n只有当前面10个线程执行完成，最后一句话才会执行打印。（ps：10个线程执行顺序不定）\n<!--more-->\n\n### Atomic类\n\nAtomic相关的类，比如AtomicLong, AtomicInteger等这些；\n简单的说，这些类都是线程安全的，支持无阻塞无锁定的\n\n```java\nset()\nget()\ngetAndSet()\ngetAndIncrement()\ngetAndDecrement()\ngetAndAdd()\n```\n\n等操作\n\n演示代码\n\n```java\npackage com.hetaoblog.concurrent.test;\n\nimport java.util.concurrent.CountDownLatch;\nimport java.util.concurrent.atomic.AtomicLong;\nimport org.junit.Test;\n\n/**\n * by http://www.hetaoblog.com\n *\n * @author hetaoblog\n */\npublic class AtomicTest {\n\n    @Test\n    public void testAtomic() {\n        final int loopcount = 10000;\n        int threadcount = 10;\n\n        final NonSafeSeq seq1 = new NonSafeSeq();\n        final SafeSeq seq2 = new SafeSeq();\n\n        final CountDownLatch l = new CountDownLatch(threadcount);\n\n        for (int i = 0; i < threadcount; ++i) {\n            final int index = i;\n            new Thread(new Runnable() {\n\n                @Override\n                public void run() {\n                    for (int j = 0; j < loopcount; ++j) {\n\n                        seq1.inc();\n                        seq2.inc();\n                    }\n\n                    System.out.println(\"finished : \" + index);\n                    l.countDown();\n\n                }\n            }).start();\n        }\n\n        try {\n            l.await();\n        } catch (InterruptedException e) {\n\n            e.printStackTrace();\n        }\n\n        System.out.println(\"both have finished....\");\n\n        System.out.println(\"NonSafeSeq:\" + seq1.get());\n        System.out.println(\"SafeSeq with atomic: \" + seq2.get());\n\n    }\n}\n\nclass NonSafeSeq {\n    private long count = 0;\n\n    public void inc() {\n        count++;\n    }\n\n    public long get() {\n        return count;\n    }\n}\n\nclass SafeSeq {\n    private AtomicLong count = new AtomicLong(0);\n\n    public void inc() {\n        count.incrementAndGet();\n    }\n\n    public long get() {\n        return count.longValue();\n    }\n}\n```\n其中NonSafeSeq是作为对比的类，直接放一个private long count不是线程安全的，而SafeSeq里面放了一个AtomicLong,是线程安全的；可以直接调用incrementAndGet来增加\n\n运行代码，可以得到类似这样的结果 \nfinished : 1\nfinished : 0\nfinished : 3\nfinished : 2\nfinished : 5\nfinished : 4\nfinished : 6\nfinished : 8\nfinished : 9\nfinished : 7\nboth have finished....\nNonSafeSeq:91723\nSafeSeq with atomic: 100000\n\n可以看到，10个线程，每个线程运行了10,000次，理论上应该有100,000次增加，使用了普通的long是非线程安全的，而使用了AtomicLong是线程安全的；\n\n注意，这个例子也说明，虽然long本身的单个设置是原子的，要么成功要么不成功，但是诸如count++这样的操作就不是线程安全的；因为这包括了读取和写入两步操作；\n\n### 可以代替synchronized关键字的ReentrantLock\n\n在jdk 1.4时代，线程间的同步主要依赖于synchronized关键字，本质上该关键字是一个对象锁，可以加在不同的instance上或者class上，从使用的角度则分别可以加在非静态方法，静态方法，以及直接synchronized(MyObject)这样的用法；\nconcurrent包提供了一个可以替代synchronized关键字的ReentrantLock，\n简单的说你可以new一个ReentrantLock， 然后通过lock.lock和lock.unlock来获取锁和释放锁；注意必须将unlock放在finally块里面，\nreentrantlock的好处\n\n1. 是更好的性能，\n2. 提供同一个lock对象上不同condition的信号通知\n3. 还提供lockInterruptibly这样支持响应中断的加锁过程，意思是说你试图去加锁，但是当前锁被其他线程hold住，然后你这个线程可以被中断；\n\n演示代码\n\n```java\npackage com.hetaoblog.concurrent.test;\nimport java.util.concurrent.CountDownLatch;\nimport java.util.concurrent.locks.ReentrantLock;\nimport org.junit.Test;\n\npublic class ReentrantLockDemo {\n\n    @Test\n    public void demoLock() {\n        final int loopcount = 10000;\n        int threadcount = 10;\n\n        final SafeSeqWithLock seq = new SafeSeqWithLock();\n\n        final CountDownLatch l = new CountDownLatch(threadcount);\n\n        for (int i = 0; i < threadcount; ++i) {\n            final int index = i;\n            new Thread(new Runnable() {\n\n                @Override\n                public void run() {\n                    for (int j = 0; j < loopcount; ++j) {\n\n                        seq.inc();\n\n                    }\n\n                    System.out.println(\"finished : \" + index);\n                    l.countDown();\n\n                }\n            }).start();\n        }\n\n        try {\n            l.await();\n        } catch (InterruptedException e) {\n\n            e.printStackTrace();\n        }\n\n        System.out.println(\"both have finished....\");\n\n        System.out.println(\"SafeSeqWithLock:\" + seq.get());\n\n    }\n}\n\nclass SafeSeqWithLock {\n    private long count = 0;\n\n    private ReentrantLock lock = new ReentrantLock();\n\n    public void inc() {\n        lock.lock();\n\n        try {\n            count++;\n        } finally {\n            lock.unlock();\n        }\n    }\n\n    public long get() {\n        return count;\n    }\n}\n```\n\n同样以前面的类似Sequence的类举例，通过对inc操作加锁，保证了线程安全； \n当然，这里get()我没有加锁，对于这样直接读取返回原子类型的函数，我认为不加锁是没问题的，相当于返回最近成功操作的值； \n\n运行结果类似这样，\nfinished : 7\nfinished : 2\nfinished : 6\nfinished : 1\nfinished : 5\nfinished : 3\nfinished : 0\nfinished : 9\nfinished : 8\nfinished : 4\nboth have finished....\nSafeSeqWithLock:100000\n\n### 读写锁ReadWriteLock\n\nconcurrent包里面还提供了一个非常有用的锁，读写锁ReadWriteLock \n下面是ReadWriteLock接口的说明： \nA ReadWriteLock maintains a pair of associated locks, one for read-only operations and one for writing. The read lock may be held simultaneously by multiple reader threads, so long as there are no writers. The write lock is exclusive. \n\n意思是说读锁可以有很多个锁同时上锁，只要当前没有写锁； \n写锁是排他的，上了写锁，其他线程既不能上读锁，也不能上写锁；同样，需要上写锁的前提是既没有读锁，也没有写锁； \n两个写锁不能同时获得无需说明，下面一段程序说明下上了读锁以后，其他线程需要上写锁也无法获得\n\n演示代码\n\n```java\nimport org.junit.Test;\nimport java.util.Date;\nimport java.util.concurrent.CountDownLatch;\nimport java.util.concurrent.locks.Lock;\nimport java.util.concurrent.locks.ReentrantReadWriteLock;\n\n/**\n * @author  LN\n * @create 2018-02-10 15:02\n **/\n\npublic class concurrentTest {\n\n    @Test\n    public void testRWLock_getw_onr(){\n        ReentrantReadWriteLock lock = new ReentrantReadWriteLock();\n\n        final Lock rlock = lock.readLock();\n        final Lock wlock = lock.writeLock();\n\n        final CountDownLatch l = new CountDownLatch(2);\n\n        //start r thread\n        new Thread(new Runnable() {\n            @Override\n            public void run() {\n                System.out.println(new Date() + \"now to get rlock\");\n                rlock.lock();\n\n                try {\n                    Thread.currentThread().sleep(20*1000);\n                } catch (InterruptedException ev) {\n                    ev.printStackTrace();\n                }\n\n                System.out.println(new Date() + \"now to unlock rlock\");\n                rlock.unlock();\n\n                l.countDown();\n            }\n        }).start();\n\n        //start w lock\n        new Thread(new Runnable() {\n            @Override\n            public void run() {\n                System.out.println(new Date() + \"now to get wlock\");\n                wlock.lock();\n\n                System.out.println(new Date() + \"now to unlock wlock\");\n                wlock.unlock();\n\n                l.countDown();\n            }\n        }).start();\n\n        try {\n            l.await();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n\n        System.out.println(new Date() + \"now to finished\");\n    }\n}\n```\n\n在试图获取写锁时，写锁线程必须等读锁线程将读锁释放了之后才可以获得写锁。\n\n结果：\nSat Feb 10 15:26:09 CST 2018now to get rlock\nSat Feb 10 15:26:09 CST 2018now to get wlock\nSat Feb 10 15:26:29 CST 2018now to unlock rlock\nSat Feb 10 15:26:29 CST 2018now to unlock wlock\nSat Feb 10 15:26:29 CST 2018now to finished\n\nReadWriteLock的实现是ReentrantReadWriteLock，\n有趣的是，在一个线程中，读锁不能直接升级为写锁，但是写锁可以降级为读锁；\n这意思是，如果你已经有了读锁，再去试图获得写锁，将会无法获得， 一直堵住了； \n但是如果你有了写锁，再去试图获得读锁，没问题；\n\n下面是一段降级的代码，\n\n```java\n@Test\npublic void testRWLock_downgrade()\n{\n    ReentrantReadWriteLock lock = new ReentrantReadWriteLock();\n\n    Lock rlock = lock.readLock();\n    Lock wlock = lock.writeLock();\n\n    System.out.println(\"now to get wloc\n    k\");\n    wlock.lock();\n    System.out.println(\"now to get rlock\");\n    rlock.lock();\n\n    System.out.println(\"now to unlock wlock\");\n\n    wlock.unlock();\n\n    System.out.println(\"now to unlock rlock\");\n    rlock.unlock();\n\n    System.out.println(\"finished\");\n}\n```\n\n### 参考资料\n\n- [说一说java的concurrent包-系列文章](http://www.iteye.com/topic/1121021)\n\n- [Java 并发工具包 java.util.concurrent 用户指南](http://blog.csdn.net/defonds/article/details/44021605/)","source":"_posts/2018-01-16-concurrent并发包总结.md","raw":"---\ntitle: concurrent并发包总结\ncategories: java\ntags:\n  - concurrent并发包\ncomments: false\ncopyright: true\ntop: 10\nabbrlink: 9880a961\ndate: 2018-01-16 13:46:39\n---\n\n## <center>java.util.concurrent 包 java并发编程包（一）</center>\n\n### 1.简介\n\n通常所说的concurrent包基本有3个package组成 \njava.util.concurrent：提供大部分关于并发的接口和类，如BlockingQueue,Callable,ConcurrentHashMap,ExecutorService, Semaphore等 \njava.util.concurrent.atomic：提供所有原子操作的类， 如AtomicInteger, AtomicLong等； \njava.util.concurrent.locks:提供锁相关的类, 如Lock, ReentrantLock, ReadWriteLock, Condition等； \n\nconcurrent包的优点：\n\n> 1. 首先，功能非常丰富，诸如线程池(ThreadPoolExecutor)，CountDownLatch等并发编程中需要的类已经有现成的实现，不需要自己去实现一套； 毕竟jdk1.4对多线程编程的主要支持几乎就只有Thread, Runnable,synchronized等\n> 2. concurrent包里面的一些操作是基于硬件级别的CAS(compare and swap),就是在cpu级别提供了原子操作，简单的说就可以提供无阻塞、无锁定的算法； 而现代cpu大部分都是支持这样的算法的；\n\n### 闭锁CountDownLatch\n\njava.util.concurrent.CountDownLatch 是一个并发构造，它允许一个或多个线程等待一系列指定操作的完成。\n\n通常的使用场景是，某个主线程接到一个任务，起了n个子线程去完成，但是主线程需要等待这n个子线程都完成任务了以后才开始执行某个操作； \n\n演示代码\n\n<!--more-->\n\n```java\n@Test\npublic void demoCountDown()\n{\n    int count = 10;\n    final CountDownLatch l = new CountDownLatch(count);\n    for(int i = 0; i < count; ++i)\n    {\n        final int index = i;\n        new Thread(new Runnable() {\n\n            @Override\n            public void run() {\n                try {\n                    Thread.currentThread().sleep(20 * 1000);\n                } catch (InterruptedException e) {\n\n                    e.printStackTrace();\n                }\n\n                System.out.println(\"thread \" + index + \" has finished...\");\n\n                l.countDown();\n\n            }\n        }).start();\n    }\n\n    try {\n        l.await();\n    } catch (InterruptedException e) {\n        e.printStackTrace();\n    }\n\n    System.out.println(\"now all threads have finished\");\n\n}\n```\n\n只有当前面10个线程执行完成，最后一句话才会执行打印。（ps：10个线程执行顺序不定）\n<!--more-->\n\n### Atomic类\n\nAtomic相关的类，比如AtomicLong, AtomicInteger等这些；\n简单的说，这些类都是线程安全的，支持无阻塞无锁定的\n\n```java\nset()\nget()\ngetAndSet()\ngetAndIncrement()\ngetAndDecrement()\ngetAndAdd()\n```\n\n等操作\n\n演示代码\n\n```java\npackage com.hetaoblog.concurrent.test;\n\nimport java.util.concurrent.CountDownLatch;\nimport java.util.concurrent.atomic.AtomicLong;\nimport org.junit.Test;\n\n/**\n * by http://www.hetaoblog.com\n *\n * @author hetaoblog\n */\npublic class AtomicTest {\n\n    @Test\n    public void testAtomic() {\n        final int loopcount = 10000;\n        int threadcount = 10;\n\n        final NonSafeSeq seq1 = new NonSafeSeq();\n        final SafeSeq seq2 = new SafeSeq();\n\n        final CountDownLatch l = new CountDownLatch(threadcount);\n\n        for (int i = 0; i < threadcount; ++i) {\n            final int index = i;\n            new Thread(new Runnable() {\n\n                @Override\n                public void run() {\n                    for (int j = 0; j < loopcount; ++j) {\n\n                        seq1.inc();\n                        seq2.inc();\n                    }\n\n                    System.out.println(\"finished : \" + index);\n                    l.countDown();\n\n                }\n            }).start();\n        }\n\n        try {\n            l.await();\n        } catch (InterruptedException e) {\n\n            e.printStackTrace();\n        }\n\n        System.out.println(\"both have finished....\");\n\n        System.out.println(\"NonSafeSeq:\" + seq1.get());\n        System.out.println(\"SafeSeq with atomic: \" + seq2.get());\n\n    }\n}\n\nclass NonSafeSeq {\n    private long count = 0;\n\n    public void inc() {\n        count++;\n    }\n\n    public long get() {\n        return count;\n    }\n}\n\nclass SafeSeq {\n    private AtomicLong count = new AtomicLong(0);\n\n    public void inc() {\n        count.incrementAndGet();\n    }\n\n    public long get() {\n        return count.longValue();\n    }\n}\n```\n其中NonSafeSeq是作为对比的类，直接放一个private long count不是线程安全的，而SafeSeq里面放了一个AtomicLong,是线程安全的；可以直接调用incrementAndGet来增加\n\n运行代码，可以得到类似这样的结果 \nfinished : 1\nfinished : 0\nfinished : 3\nfinished : 2\nfinished : 5\nfinished : 4\nfinished : 6\nfinished : 8\nfinished : 9\nfinished : 7\nboth have finished....\nNonSafeSeq:91723\nSafeSeq with atomic: 100000\n\n可以看到，10个线程，每个线程运行了10,000次，理论上应该有100,000次增加，使用了普通的long是非线程安全的，而使用了AtomicLong是线程安全的；\n\n注意，这个例子也说明，虽然long本身的单个设置是原子的，要么成功要么不成功，但是诸如count++这样的操作就不是线程安全的；因为这包括了读取和写入两步操作；\n\n### 可以代替synchronized关键字的ReentrantLock\n\n在jdk 1.4时代，线程间的同步主要依赖于synchronized关键字，本质上该关键字是一个对象锁，可以加在不同的instance上或者class上，从使用的角度则分别可以加在非静态方法，静态方法，以及直接synchronized(MyObject)这样的用法；\nconcurrent包提供了一个可以替代synchronized关键字的ReentrantLock，\n简单的说你可以new一个ReentrantLock， 然后通过lock.lock和lock.unlock来获取锁和释放锁；注意必须将unlock放在finally块里面，\nreentrantlock的好处\n\n1. 是更好的性能，\n2. 提供同一个lock对象上不同condition的信号通知\n3. 还提供lockInterruptibly这样支持响应中断的加锁过程，意思是说你试图去加锁，但是当前锁被其他线程hold住，然后你这个线程可以被中断；\n\n演示代码\n\n```java\npackage com.hetaoblog.concurrent.test;\nimport java.util.concurrent.CountDownLatch;\nimport java.util.concurrent.locks.ReentrantLock;\nimport org.junit.Test;\n\npublic class ReentrantLockDemo {\n\n    @Test\n    public void demoLock() {\n        final int loopcount = 10000;\n        int threadcount = 10;\n\n        final SafeSeqWithLock seq = new SafeSeqWithLock();\n\n        final CountDownLatch l = new CountDownLatch(threadcount);\n\n        for (int i = 0; i < threadcount; ++i) {\n            final int index = i;\n            new Thread(new Runnable() {\n\n                @Override\n                public void run() {\n                    for (int j = 0; j < loopcount; ++j) {\n\n                        seq.inc();\n\n                    }\n\n                    System.out.println(\"finished : \" + index);\n                    l.countDown();\n\n                }\n            }).start();\n        }\n\n        try {\n            l.await();\n        } catch (InterruptedException e) {\n\n            e.printStackTrace();\n        }\n\n        System.out.println(\"both have finished....\");\n\n        System.out.println(\"SafeSeqWithLock:\" + seq.get());\n\n    }\n}\n\nclass SafeSeqWithLock {\n    private long count = 0;\n\n    private ReentrantLock lock = new ReentrantLock();\n\n    public void inc() {\n        lock.lock();\n\n        try {\n            count++;\n        } finally {\n            lock.unlock();\n        }\n    }\n\n    public long get() {\n        return count;\n    }\n}\n```\n\n同样以前面的类似Sequence的类举例，通过对inc操作加锁，保证了线程安全； \n当然，这里get()我没有加锁，对于这样直接读取返回原子类型的函数，我认为不加锁是没问题的，相当于返回最近成功操作的值； \n\n运行结果类似这样，\nfinished : 7\nfinished : 2\nfinished : 6\nfinished : 1\nfinished : 5\nfinished : 3\nfinished : 0\nfinished : 9\nfinished : 8\nfinished : 4\nboth have finished....\nSafeSeqWithLock:100000\n\n### 读写锁ReadWriteLock\n\nconcurrent包里面还提供了一个非常有用的锁，读写锁ReadWriteLock \n下面是ReadWriteLock接口的说明： \nA ReadWriteLock maintains a pair of associated locks, one for read-only operations and one for writing. The read lock may be held simultaneously by multiple reader threads, so long as there are no writers. The write lock is exclusive. \n\n意思是说读锁可以有很多个锁同时上锁，只要当前没有写锁； \n写锁是排他的，上了写锁，其他线程既不能上读锁，也不能上写锁；同样，需要上写锁的前提是既没有读锁，也没有写锁； \n两个写锁不能同时获得无需说明，下面一段程序说明下上了读锁以后，其他线程需要上写锁也无法获得\n\n演示代码\n\n```java\nimport org.junit.Test;\nimport java.util.Date;\nimport java.util.concurrent.CountDownLatch;\nimport java.util.concurrent.locks.Lock;\nimport java.util.concurrent.locks.ReentrantReadWriteLock;\n\n/**\n * @author  LN\n * @create 2018-02-10 15:02\n **/\n\npublic class concurrentTest {\n\n    @Test\n    public void testRWLock_getw_onr(){\n        ReentrantReadWriteLock lock = new ReentrantReadWriteLock();\n\n        final Lock rlock = lock.readLock();\n        final Lock wlock = lock.writeLock();\n\n        final CountDownLatch l = new CountDownLatch(2);\n\n        //start r thread\n        new Thread(new Runnable() {\n            @Override\n            public void run() {\n                System.out.println(new Date() + \"now to get rlock\");\n                rlock.lock();\n\n                try {\n                    Thread.currentThread().sleep(20*1000);\n                } catch (InterruptedException ev) {\n                    ev.printStackTrace();\n                }\n\n                System.out.println(new Date() + \"now to unlock rlock\");\n                rlock.unlock();\n\n                l.countDown();\n            }\n        }).start();\n\n        //start w lock\n        new Thread(new Runnable() {\n            @Override\n            public void run() {\n                System.out.println(new Date() + \"now to get wlock\");\n                wlock.lock();\n\n                System.out.println(new Date() + \"now to unlock wlock\");\n                wlock.unlock();\n\n                l.countDown();\n            }\n        }).start();\n\n        try {\n            l.await();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n\n        System.out.println(new Date() + \"now to finished\");\n    }\n}\n```\n\n在试图获取写锁时，写锁线程必须等读锁线程将读锁释放了之后才可以获得写锁。\n\n结果：\nSat Feb 10 15:26:09 CST 2018now to get rlock\nSat Feb 10 15:26:09 CST 2018now to get wlock\nSat Feb 10 15:26:29 CST 2018now to unlock rlock\nSat Feb 10 15:26:29 CST 2018now to unlock wlock\nSat Feb 10 15:26:29 CST 2018now to finished\n\nReadWriteLock的实现是ReentrantReadWriteLock，\n有趣的是，在一个线程中，读锁不能直接升级为写锁，但是写锁可以降级为读锁；\n这意思是，如果你已经有了读锁，再去试图获得写锁，将会无法获得， 一直堵住了； \n但是如果你有了写锁，再去试图获得读锁，没问题；\n\n下面是一段降级的代码，\n\n```java\n@Test\npublic void testRWLock_downgrade()\n{\n    ReentrantReadWriteLock lock = new ReentrantReadWriteLock();\n\n    Lock rlock = lock.readLock();\n    Lock wlock = lock.writeLock();\n\n    System.out.println(\"now to get wloc\n    k\");\n    wlock.lock();\n    System.out.println(\"now to get rlock\");\n    rlock.lock();\n\n    System.out.println(\"now to unlock wlock\");\n\n    wlock.unlock();\n\n    System.out.println(\"now to unlock rlock\");\n    rlock.unlock();\n\n    System.out.println(\"finished\");\n}\n```\n\n### 参考资料\n\n- [说一说java的concurrent包-系列文章](http://www.iteye.com/topic/1121021)\n\n- [Java 并发工具包 java.util.concurrent 用户指南](http://blog.csdn.net/defonds/article/details/44021605/)","slug":"concurrent并发包总结","published":1,"updated":"2018-02-26T10:01:38.256Z","layout":"post","photos":[],"link":"","_id":"cje7yhv3d000k7ku62zw2b8kp","content":"<h2 id=\"java-util-concurrent-包-java并发编程包（一）\"><a href=\"#java-util-concurrent-包-java并发编程包（一）\" class=\"headerlink\" title=\"java.util.concurrent 包 java并发编程包（一）\"></a><center>java.util.concurrent 包 java并发编程包（一）</center></h2><h3 id=\"1-简介\"><a href=\"#1-简介\" class=\"headerlink\" title=\"1.简介\"></a>1.简介</h3><p>通常所说的concurrent包基本有3个package组成<br>java.util.concurrent：提供大部分关于并发的接口和类，如BlockingQueue,Callable,ConcurrentHashMap,ExecutorService, Semaphore等<br>java.util.concurrent.atomic：提供所有原子操作的类， 如AtomicInteger, AtomicLong等；<br>java.util.concurrent.locks:提供锁相关的类, 如Lock, ReentrantLock, ReadWriteLock, Condition等； </p>\n<p>concurrent包的优点：</p>\n<blockquote>\n<ol>\n<li>首先，功能非常丰富，诸如线程池(ThreadPoolExecutor)，CountDownLatch等并发编程中需要的类已经有现成的实现，不需要自己去实现一套； 毕竟jdk1.4对多线程编程的主要支持几乎就只有Thread, Runnable,synchronized等</li>\n<li>concurrent包里面的一些操作是基于硬件级别的CAS(compare and swap),就是在cpu级别提供了原子操作，简单的说就可以提供无阻塞、无锁定的算法； 而现代cpu大部分都是支持这样的算法的；</li>\n</ol>\n</blockquote>\n<h3 id=\"闭锁CountDownLatch\"><a href=\"#闭锁CountDownLatch\" class=\"headerlink\" title=\"闭锁CountDownLatch\"></a>闭锁CountDownLatch</h3><p>java.util.concurrent.CountDownLatch 是一个并发构造，它允许一个或多个线程等待一系列指定操作的完成。</p>\n<p>通常的使用场景是，某个主线程接到一个任务，起了n个子线程去完成，但是主线程需要等待这n个子线程都完成任务了以后才开始执行某个操作； </p>\n<p>演示代码</p>\n<a id=\"more\"></a>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Test</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">demoCountDown</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> count = <span class=\"number\">10</span>;</div><div class=\"line\">    <span class=\"keyword\">final</span> CountDownLatch l = <span class=\"keyword\">new</span> CountDownLatch(count);</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; ++i)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> index = i;</div><div class=\"line\">        <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                    Thread.currentThread().sleep(<span class=\"number\">20</span> * <span class=\"number\">1000</span>);</div><div class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\"></div><div class=\"line\">                    e.printStackTrace();</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                System.out.println(<span class=\"string\">\"thread \"</span> + index + <span class=\"string\">\" has finished...\"</span>);</div><div class=\"line\"></div><div class=\"line\">                l.countDown();</div><div class=\"line\"></div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;).start();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        l.await();</div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">        e.printStackTrace();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    System.out.println(<span class=\"string\">\"now all threads have finished\"</span>);</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>只有当前面10个线程执行完成，最后一句话才会执行打印。（ps：10个线程执行顺序不定）<br><!--more--></p>\n<h3 id=\"Atomic类\"><a href=\"#Atomic类\" class=\"headerlink\" title=\"Atomic类\"></a>Atomic类</h3><p>Atomic相关的类，比如AtomicLong, AtomicInteger等这些；<br>简单的说，这些类都是线程安全的，支持无阻塞无锁定的</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">set()</div><div class=\"line\">get()</div><div class=\"line\">getAndSet()</div><div class=\"line\">getAndIncrement()</div><div class=\"line\">getAndDecrement()</div><div class=\"line\">getAndAdd()</div></pre></td></tr></table></figure>\n<p>等操作</p>\n<p>演示代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.hetaoblog.concurrent.test;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.CountDownLatch;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.atomic.AtomicLong;</div><div class=\"line\"><span class=\"keyword\">import</span> org.junit.Test;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * by http://www.hetaoblog.com</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@author</span> hetaoblog</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AtomicTest</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Test</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testAtomic</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> loopcount = <span class=\"number\">10000</span>;</div><div class=\"line\">        <span class=\"keyword\">int</span> threadcount = <span class=\"number\">10</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">final</span> NonSafeSeq seq1 = <span class=\"keyword\">new</span> NonSafeSeq();</div><div class=\"line\">        <span class=\"keyword\">final</span> SafeSeq seq2 = <span class=\"keyword\">new</span> SafeSeq();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">final</span> CountDownLatch l = <span class=\"keyword\">new</span> CountDownLatch(threadcount);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; threadcount; ++i) &#123;</div><div class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> index = i;</div><div class=\"line\">            <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"meta\">@Override</span></div><div class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; loopcount; ++j) &#123;</div><div class=\"line\"></div><div class=\"line\">                        seq1.inc();</div><div class=\"line\">                        seq2.inc();</div><div class=\"line\">                    &#125;</div><div class=\"line\"></div><div class=\"line\">                    System.out.println(<span class=\"string\">\"finished : \"</span> + index);</div><div class=\"line\">                    l.countDown();</div><div class=\"line\"></div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;).start();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            l.await();</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\"></div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        System.out.println(<span class=\"string\">\"both have finished....\"</span>);</div><div class=\"line\"></div><div class=\"line\">        System.out.println(<span class=\"string\">\"NonSafeSeq:\"</span> + seq1.get());</div><div class=\"line\">        System.out.println(<span class=\"string\">\"SafeSeq with atomic: \"</span> + seq2.get());</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NonSafeSeq</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">long</span> count = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">inc</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        count++;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">long</span> <span class=\"title\">get</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> count;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SafeSeq</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> AtomicLong count = <span class=\"keyword\">new</span> AtomicLong(<span class=\"number\">0</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">inc</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        count.incrementAndGet();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">long</span> <span class=\"title\">get</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> count.longValue();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>其中NonSafeSeq是作为对比的类，直接放一个private long count不是线程安全的，而SafeSeq里面放了一个AtomicLong,是线程安全的；可以直接调用incrementAndGet来增加</p>\n<p>运行代码，可以得到类似这样的结果<br>finished : 1<br>finished : 0<br>finished : 3<br>finished : 2<br>finished : 5<br>finished : 4<br>finished : 6<br>finished : 8<br>finished : 9<br>finished : 7<br>both have finished….<br>NonSafeSeq:91723<br>SafeSeq with atomic: 100000</p>\n<p>可以看到，10个线程，每个线程运行了10,000次，理论上应该有100,000次增加，使用了普通的long是非线程安全的，而使用了AtomicLong是线程安全的；</p>\n<p>注意，这个例子也说明，虽然long本身的单个设置是原子的，要么成功要么不成功，但是诸如count++这样的操作就不是线程安全的；因为这包括了读取和写入两步操作；</p>\n<h3 id=\"可以代替synchronized关键字的ReentrantLock\"><a href=\"#可以代替synchronized关键字的ReentrantLock\" class=\"headerlink\" title=\"可以代替synchronized关键字的ReentrantLock\"></a>可以代替synchronized关键字的ReentrantLock</h3><p>在jdk 1.4时代，线程间的同步主要依赖于synchronized关键字，本质上该关键字是一个对象锁，可以加在不同的instance上或者class上，从使用的角度则分别可以加在非静态方法，静态方法，以及直接synchronized(MyObject)这样的用法；<br>concurrent包提供了一个可以替代synchronized关键字的ReentrantLock，<br>简单的说你可以new一个ReentrantLock， 然后通过lock.lock和lock.unlock来获取锁和释放锁；注意必须将unlock放在finally块里面，<br>reentrantlock的好处</p>\n<ol>\n<li>是更好的性能，</li>\n<li>提供同一个lock对象上不同condition的信号通知</li>\n<li>还提供lockInterruptibly这样支持响应中断的加锁过程，意思是说你试图去加锁，但是当前锁被其他线程hold住，然后你这个线程可以被中断；</li>\n</ol>\n<p>演示代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.hetaoblog.concurrent.test;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.CountDownLatch;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.locks.ReentrantLock;</div><div class=\"line\"><span class=\"keyword\">import</span> org.junit.Test;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ReentrantLockDemo</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Test</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">demoLock</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> loopcount = <span class=\"number\">10000</span>;</div><div class=\"line\">        <span class=\"keyword\">int</span> threadcount = <span class=\"number\">10</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">final</span> SafeSeqWithLock seq = <span class=\"keyword\">new</span> SafeSeqWithLock();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">final</span> CountDownLatch l = <span class=\"keyword\">new</span> CountDownLatch(threadcount);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; threadcount; ++i) &#123;</div><div class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> index = i;</div><div class=\"line\">            <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"meta\">@Override</span></div><div class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; loopcount; ++j) &#123;</div><div class=\"line\"></div><div class=\"line\">                        seq.inc();</div><div class=\"line\"></div><div class=\"line\">                    &#125;</div><div class=\"line\"></div><div class=\"line\">                    System.out.println(<span class=\"string\">\"finished : \"</span> + index);</div><div class=\"line\">                    l.countDown();</div><div class=\"line\"></div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;).start();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            l.await();</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\"></div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        System.out.println(<span class=\"string\">\"both have finished....\"</span>);</div><div class=\"line\"></div><div class=\"line\">        System.out.println(<span class=\"string\">\"SafeSeqWithLock:\"</span> + seq.get());</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SafeSeqWithLock</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">long</span> count = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> ReentrantLock lock = <span class=\"keyword\">new</span> ReentrantLock();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">inc</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        lock.lock();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            count++;</div><div class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">            lock.unlock();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">long</span> <span class=\"title\">get</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> count;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>同样以前面的类似Sequence的类举例，通过对inc操作加锁，保证了线程安全；<br>当然，这里get()我没有加锁，对于这样直接读取返回原子类型的函数，我认为不加锁是没问题的，相当于返回最近成功操作的值； </p>\n<p>运行结果类似这样，<br>finished : 7<br>finished : 2<br>finished : 6<br>finished : 1<br>finished : 5<br>finished : 3<br>finished : 0<br>finished : 9<br>finished : 8<br>finished : 4<br>both have finished….<br>SafeSeqWithLock:100000</p>\n<h3 id=\"读写锁ReadWriteLock\"><a href=\"#读写锁ReadWriteLock\" class=\"headerlink\" title=\"读写锁ReadWriteLock\"></a>读写锁ReadWriteLock</h3><p>concurrent包里面还提供了一个非常有用的锁，读写锁ReadWriteLock<br>下面是ReadWriteLock接口的说明：<br>A ReadWriteLock maintains a pair of associated locks, one for read-only operations and one for writing. The read lock may be held simultaneously by multiple reader threads, so long as there are no writers. The write lock is exclusive. </p>\n<p>意思是说读锁可以有很多个锁同时上锁，只要当前没有写锁；<br>写锁是排他的，上了写锁，其他线程既不能上读锁，也不能上写锁；同样，需要上写锁的前提是既没有读锁，也没有写锁；<br>两个写锁不能同时获得无需说明，下面一段程序说明下上了读锁以后，其他线程需要上写锁也无法获得</p>\n<p>演示代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> org.junit.Test;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.CountDownLatch;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.locks.Lock;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.locks.ReentrantReadWriteLock;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * <span class=\"doctag\">@author</span>  LN</div><div class=\"line\"> * <span class=\"doctag\">@create</span> 2018-02-10 15:02</div><div class=\"line\"> **/</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">concurrentTest</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Test</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testRWLock_getw_onr</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        ReentrantReadWriteLock lock = <span class=\"keyword\">new</span> ReentrantReadWriteLock();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">final</span> Lock rlock = lock.readLock();</div><div class=\"line\">        <span class=\"keyword\">final</span> Lock wlock = lock.writeLock();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">final</span> CountDownLatch l = <span class=\"keyword\">new</span> CountDownLatch(<span class=\"number\">2</span>);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//start r thread</span></div><div class=\"line\">        <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                System.out.println(<span class=\"keyword\">new</span> Date() + <span class=\"string\">\"now to get rlock\"</span>);</div><div class=\"line\">                rlock.lock();</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                    Thread.currentThread().sleep(<span class=\"number\">20</span>*<span class=\"number\">1000</span>);</div><div class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException ev) &#123;</div><div class=\"line\">                    ev.printStackTrace();</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                System.out.println(<span class=\"keyword\">new</span> Date() + <span class=\"string\">\"now to unlock rlock\"</span>);</div><div class=\"line\">                rlock.unlock();</div><div class=\"line\"></div><div class=\"line\">                l.countDown();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;).start();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//start w lock</span></div><div class=\"line\">        <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                System.out.println(<span class=\"keyword\">new</span> Date() + <span class=\"string\">\"now to get wlock\"</span>);</div><div class=\"line\">                wlock.lock();</div><div class=\"line\"></div><div class=\"line\">                System.out.println(<span class=\"keyword\">new</span> Date() + <span class=\"string\">\"now to unlock wlock\"</span>);</div><div class=\"line\">                wlock.unlock();</div><div class=\"line\"></div><div class=\"line\">                l.countDown();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;).start();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            l.await();</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        System.out.println(<span class=\"keyword\">new</span> Date() + <span class=\"string\">\"now to finished\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在试图获取写锁时，写锁线程必须等读锁线程将读锁释放了之后才可以获得写锁。</p>\n<p>结果：<br>Sat Feb 10 15:26:09 CST 2018now to get rlock<br>Sat Feb 10 15:26:09 CST 2018now to get wlock<br>Sat Feb 10 15:26:29 CST 2018now to unlock rlock<br>Sat Feb 10 15:26:29 CST 2018now to unlock wlock<br>Sat Feb 10 15:26:29 CST 2018now to finished</p>\n<p>ReadWriteLock的实现是ReentrantReadWriteLock，<br>有趣的是，在一个线程中，读锁不能直接升级为写锁，但是写锁可以降级为读锁；<br>这意思是，如果你已经有了读锁，再去试图获得写锁，将会无法获得， 一直堵住了；<br>但是如果你有了写锁，再去试图获得读锁，没问题；</p>\n<p>下面是一段降级的代码，</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Test</div><div class=\"line\">public void testRWLock_downgrade()</div><div class=\"line\">&#123;</div><div class=\"line\">    ReentrantReadWriteLock lock = new ReentrantReadWriteLock();</div><div class=\"line\"></div><div class=\"line\">    Lock rlock = lock.readLock();</div><div class=\"line\">    Lock wlock = lock.writeLock();</div><div class=\"line\"></div><div class=\"line\">    System.out.println(\"now to get wloc</div><div class=\"line\">    k\");</div><div class=\"line\">    wlock.lock();</div><div class=\"line\">    System.out.println(\"now to get rlock\");</div><div class=\"line\">    rlock.lock();</div><div class=\"line\"></div><div class=\"line\">    System.out.println(\"now to unlock wlock\");</div><div class=\"line\"></div><div class=\"line\">    wlock.unlock();</div><div class=\"line\"></div><div class=\"line\">    System.out.println(\"now to unlock rlock\");</div><div class=\"line\">    rlock.unlock();</div><div class=\"line\"></div><div class=\"line\">    System.out.println(\"finished\");</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><ul>\n<li><p><a href=\"http://www.iteye.com/topic/1121021\" target=\"_blank\" rel=\"external\">说一说java的concurrent包-系列文章</a></p>\n</li>\n<li><p><a href=\"http://blog.csdn.net/defonds/article/details/44021605/\" target=\"_blank\" rel=\"external\">Java 并发工具包 java.util.concurrent 用户指南</a></p>\n</li>\n</ul>\n","excerpt":"<h2 id=\"java-util-concurrent-包-java并发编程包（一）\"><a href=\"#java-util-concurrent-包-java并发编程包（一）\" class=\"headerlink\" title=\"java.util.concurrent 包 java并发编程包（一）\"></a><center>java.util.concurrent 包 java并发编程包（一）</center></h2><h3 id=\"1-简介\"><a href=\"#1-简介\" class=\"headerlink\" title=\"1.简介\"></a>1.简介</h3><p>通常所说的concurrent包基本有3个package组成<br>java.util.concurrent：提供大部分关于并发的接口和类，如BlockingQueue,Callable,ConcurrentHashMap,ExecutorService, Semaphore等<br>java.util.concurrent.atomic：提供所有原子操作的类， 如AtomicInteger, AtomicLong等；<br>java.util.concurrent.locks:提供锁相关的类, 如Lock, ReentrantLock, ReadWriteLock, Condition等； </p>\n<p>concurrent包的优点：</p>\n<blockquote>\n<ol>\n<li>首先，功能非常丰富，诸如线程池(ThreadPoolExecutor)，CountDownLatch等并发编程中需要的类已经有现成的实现，不需要自己去实现一套； 毕竟jdk1.4对多线程编程的主要支持几乎就只有Thread, Runnable,synchronized等</li>\n<li>concurrent包里面的一些操作是基于硬件级别的CAS(compare and swap),就是在cpu级别提供了原子操作，简单的说就可以提供无阻塞、无锁定的算法； 而现代cpu大部分都是支持这样的算法的；</li>\n</ol>\n</blockquote>\n<h3 id=\"闭锁CountDownLatch\"><a href=\"#闭锁CountDownLatch\" class=\"headerlink\" title=\"闭锁CountDownLatch\"></a>闭锁CountDownLatch</h3><p>java.util.concurrent.CountDownLatch 是一个并发构造，它允许一个或多个线程等待一系列指定操作的完成。</p>\n<p>通常的使用场景是，某个主线程接到一个任务，起了n个子线程去完成，但是主线程需要等待这n个子线程都完成任务了以后才开始执行某个操作； </p>\n<p>演示代码</p>","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Test</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">demoCountDown</span><span class=\"params\">()</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> count = <span class=\"number\">10</span>;</div><div class=\"line\">    <span class=\"keyword\">final</span> CountDownLatch l = <span class=\"keyword\">new</span> CountDownLatch(count);</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; ++i)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> index = i;</div><div class=\"line\">        <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                    Thread.currentThread().sleep(<span class=\"number\">20</span> * <span class=\"number\">1000</span>);</div><div class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\"></div><div class=\"line\">                    e.printStackTrace();</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                System.out.println(<span class=\"string\">\"thread \"</span> + index + <span class=\"string\">\" has finished...\"</span>);</div><div class=\"line\"></div><div class=\"line\">                l.countDown();</div><div class=\"line\"></div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;).start();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        l.await();</div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">        e.printStackTrace();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    System.out.println(<span class=\"string\">\"now all threads have finished\"</span>);</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>只有当前面10个线程执行完成，最后一句话才会执行打印。（ps：10个线程执行顺序不定）<br><!--more--></p>\n<h3 id=\"Atomic类\"><a href=\"#Atomic类\" class=\"headerlink\" title=\"Atomic类\"></a>Atomic类</h3><p>Atomic相关的类，比如AtomicLong, AtomicInteger等这些；<br>简单的说，这些类都是线程安全的，支持无阻塞无锁定的</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">set()</div><div class=\"line\">get()</div><div class=\"line\">getAndSet()</div><div class=\"line\">getAndIncrement()</div><div class=\"line\">getAndDecrement()</div><div class=\"line\">getAndAdd()</div></pre></td></tr></table></figure>\n<p>等操作</p>\n<p>演示代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.hetaoblog.concurrent.test;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.CountDownLatch;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.atomic.AtomicLong;</div><div class=\"line\"><span class=\"keyword\">import</span> org.junit.Test;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * by http://www.hetaoblog.com</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@author</span> hetaoblog</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AtomicTest</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Test</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testAtomic</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> loopcount = <span class=\"number\">10000</span>;</div><div class=\"line\">        <span class=\"keyword\">int</span> threadcount = <span class=\"number\">10</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">final</span> NonSafeSeq seq1 = <span class=\"keyword\">new</span> NonSafeSeq();</div><div class=\"line\">        <span class=\"keyword\">final</span> SafeSeq seq2 = <span class=\"keyword\">new</span> SafeSeq();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">final</span> CountDownLatch l = <span class=\"keyword\">new</span> CountDownLatch(threadcount);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; threadcount; ++i) &#123;</div><div class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> index = i;</div><div class=\"line\">            <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"meta\">@Override</span></div><div class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; loopcount; ++j) &#123;</div><div class=\"line\"></div><div class=\"line\">                        seq1.inc();</div><div class=\"line\">                        seq2.inc();</div><div class=\"line\">                    &#125;</div><div class=\"line\"></div><div class=\"line\">                    System.out.println(<span class=\"string\">\"finished : \"</span> + index);</div><div class=\"line\">                    l.countDown();</div><div class=\"line\"></div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;).start();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            l.await();</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\"></div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        System.out.println(<span class=\"string\">\"both have finished....\"</span>);</div><div class=\"line\"></div><div class=\"line\">        System.out.println(<span class=\"string\">\"NonSafeSeq:\"</span> + seq1.get());</div><div class=\"line\">        System.out.println(<span class=\"string\">\"SafeSeq with atomic: \"</span> + seq2.get());</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NonSafeSeq</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">long</span> count = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">inc</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        count++;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">long</span> <span class=\"title\">get</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> count;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SafeSeq</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> AtomicLong count = <span class=\"keyword\">new</span> AtomicLong(<span class=\"number\">0</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">inc</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        count.incrementAndGet();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">long</span> <span class=\"title\">get</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> count.longValue();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>其中NonSafeSeq是作为对比的类，直接放一个private long count不是线程安全的，而SafeSeq里面放了一个AtomicLong,是线程安全的；可以直接调用incrementAndGet来增加</p>\n<p>运行代码，可以得到类似这样的结果<br>finished : 1<br>finished : 0<br>finished : 3<br>finished : 2<br>finished : 5<br>finished : 4<br>finished : 6<br>finished : 8<br>finished : 9<br>finished : 7<br>both have finished….<br>NonSafeSeq:91723<br>SafeSeq with atomic: 100000</p>\n<p>可以看到，10个线程，每个线程运行了10,000次，理论上应该有100,000次增加，使用了普通的long是非线程安全的，而使用了AtomicLong是线程安全的；</p>\n<p>注意，这个例子也说明，虽然long本身的单个设置是原子的，要么成功要么不成功，但是诸如count++这样的操作就不是线程安全的；因为这包括了读取和写入两步操作；</p>\n<h3 id=\"可以代替synchronized关键字的ReentrantLock\"><a href=\"#可以代替synchronized关键字的ReentrantLock\" class=\"headerlink\" title=\"可以代替synchronized关键字的ReentrantLock\"></a>可以代替synchronized关键字的ReentrantLock</h3><p>在jdk 1.4时代，线程间的同步主要依赖于synchronized关键字，本质上该关键字是一个对象锁，可以加在不同的instance上或者class上，从使用的角度则分别可以加在非静态方法，静态方法，以及直接synchronized(MyObject)这样的用法；<br>concurrent包提供了一个可以替代synchronized关键字的ReentrantLock，<br>简单的说你可以new一个ReentrantLock， 然后通过lock.lock和lock.unlock来获取锁和释放锁；注意必须将unlock放在finally块里面，<br>reentrantlock的好处</p>\n<ol>\n<li>是更好的性能，</li>\n<li>提供同一个lock对象上不同condition的信号通知</li>\n<li>还提供lockInterruptibly这样支持响应中断的加锁过程，意思是说你试图去加锁，但是当前锁被其他线程hold住，然后你这个线程可以被中断；</li>\n</ol>\n<p>演示代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.hetaoblog.concurrent.test;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.CountDownLatch;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.locks.ReentrantLock;</div><div class=\"line\"><span class=\"keyword\">import</span> org.junit.Test;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ReentrantLockDemo</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Test</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">demoLock</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> loopcount = <span class=\"number\">10000</span>;</div><div class=\"line\">        <span class=\"keyword\">int</span> threadcount = <span class=\"number\">10</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">final</span> SafeSeqWithLock seq = <span class=\"keyword\">new</span> SafeSeqWithLock();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">final</span> CountDownLatch l = <span class=\"keyword\">new</span> CountDownLatch(threadcount);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; threadcount; ++i) &#123;</div><div class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> index = i;</div><div class=\"line\">            <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"meta\">@Override</span></div><div class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; loopcount; ++j) &#123;</div><div class=\"line\"></div><div class=\"line\">                        seq.inc();</div><div class=\"line\"></div><div class=\"line\">                    &#125;</div><div class=\"line\"></div><div class=\"line\">                    System.out.println(<span class=\"string\">\"finished : \"</span> + index);</div><div class=\"line\">                    l.countDown();</div><div class=\"line\"></div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;).start();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            l.await();</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\"></div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        System.out.println(<span class=\"string\">\"both have finished....\"</span>);</div><div class=\"line\"></div><div class=\"line\">        System.out.println(<span class=\"string\">\"SafeSeqWithLock:\"</span> + seq.get());</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SafeSeqWithLock</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">long</span> count = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> ReentrantLock lock = <span class=\"keyword\">new</span> ReentrantLock();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">inc</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        lock.lock();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            count++;</div><div class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">            lock.unlock();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">long</span> <span class=\"title\">get</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> count;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>同样以前面的类似Sequence的类举例，通过对inc操作加锁，保证了线程安全；<br>当然，这里get()我没有加锁，对于这样直接读取返回原子类型的函数，我认为不加锁是没问题的，相当于返回最近成功操作的值； </p>\n<p>运行结果类似这样，<br>finished : 7<br>finished : 2<br>finished : 6<br>finished : 1<br>finished : 5<br>finished : 3<br>finished : 0<br>finished : 9<br>finished : 8<br>finished : 4<br>both have finished….<br>SafeSeqWithLock:100000</p>\n<h3 id=\"读写锁ReadWriteLock\"><a href=\"#读写锁ReadWriteLock\" class=\"headerlink\" title=\"读写锁ReadWriteLock\"></a>读写锁ReadWriteLock</h3><p>concurrent包里面还提供了一个非常有用的锁，读写锁ReadWriteLock<br>下面是ReadWriteLock接口的说明：<br>A ReadWriteLock maintains a pair of associated locks, one for read-only operations and one for writing. The read lock may be held simultaneously by multiple reader threads, so long as there are no writers. The write lock is exclusive. </p>\n<p>意思是说读锁可以有很多个锁同时上锁，只要当前没有写锁；<br>写锁是排他的，上了写锁，其他线程既不能上读锁，也不能上写锁；同样，需要上写锁的前提是既没有读锁，也没有写锁；<br>两个写锁不能同时获得无需说明，下面一段程序说明下上了读锁以后，其他线程需要上写锁也无法获得</p>\n<p>演示代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> org.junit.Test;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.CountDownLatch;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.locks.Lock;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.locks.ReentrantReadWriteLock;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * <span class=\"doctag\">@author</span>  LN</div><div class=\"line\"> * <span class=\"doctag\">@create</span> 2018-02-10 15:02</div><div class=\"line\"> **/</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">concurrentTest</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Test</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testRWLock_getw_onr</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        ReentrantReadWriteLock lock = <span class=\"keyword\">new</span> ReentrantReadWriteLock();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">final</span> Lock rlock = lock.readLock();</div><div class=\"line\">        <span class=\"keyword\">final</span> Lock wlock = lock.writeLock();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">final</span> CountDownLatch l = <span class=\"keyword\">new</span> CountDownLatch(<span class=\"number\">2</span>);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//start r thread</span></div><div class=\"line\">        <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                System.out.println(<span class=\"keyword\">new</span> Date() + <span class=\"string\">\"now to get rlock\"</span>);</div><div class=\"line\">                rlock.lock();</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                    Thread.currentThread().sleep(<span class=\"number\">20</span>*<span class=\"number\">1000</span>);</div><div class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException ev) &#123;</div><div class=\"line\">                    ev.printStackTrace();</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                System.out.println(<span class=\"keyword\">new</span> Date() + <span class=\"string\">\"now to unlock rlock\"</span>);</div><div class=\"line\">                rlock.unlock();</div><div class=\"line\"></div><div class=\"line\">                l.countDown();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;).start();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//start w lock</span></div><div class=\"line\">        <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                System.out.println(<span class=\"keyword\">new</span> Date() + <span class=\"string\">\"now to get wlock\"</span>);</div><div class=\"line\">                wlock.lock();</div><div class=\"line\"></div><div class=\"line\">                System.out.println(<span class=\"keyword\">new</span> Date() + <span class=\"string\">\"now to unlock wlock\"</span>);</div><div class=\"line\">                wlock.unlock();</div><div class=\"line\"></div><div class=\"line\">                l.countDown();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;).start();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            l.await();</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        System.out.println(<span class=\"keyword\">new</span> Date() + <span class=\"string\">\"now to finished\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在试图获取写锁时，写锁线程必须等读锁线程将读锁释放了之后才可以获得写锁。</p>\n<p>结果：<br>Sat Feb 10 15:26:09 CST 2018now to get rlock<br>Sat Feb 10 15:26:09 CST 2018now to get wlock<br>Sat Feb 10 15:26:29 CST 2018now to unlock rlock<br>Sat Feb 10 15:26:29 CST 2018now to unlock wlock<br>Sat Feb 10 15:26:29 CST 2018now to finished</p>\n<p>ReadWriteLock的实现是ReentrantReadWriteLock，<br>有趣的是，在一个线程中，读锁不能直接升级为写锁，但是写锁可以降级为读锁；<br>这意思是，如果你已经有了读锁，再去试图获得写锁，将会无法获得， 一直堵住了；<br>但是如果你有了写锁，再去试图获得读锁，没问题；</p>\n<p>下面是一段降级的代码，</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Test</div><div class=\"line\">public void testRWLock_downgrade()</div><div class=\"line\">&#123;</div><div class=\"line\">    ReentrantReadWriteLock lock = new ReentrantReadWriteLock();</div><div class=\"line\"></div><div class=\"line\">    Lock rlock = lock.readLock();</div><div class=\"line\">    Lock wlock = lock.writeLock();</div><div class=\"line\"></div><div class=\"line\">    System.out.println(\"now to get wloc</div><div class=\"line\">    k\");</div><div class=\"line\">    wlock.lock();</div><div class=\"line\">    System.out.println(\"now to get rlock\");</div><div class=\"line\">    rlock.lock();</div><div class=\"line\"></div><div class=\"line\">    System.out.println(\"now to unlock wlock\");</div><div class=\"line\"></div><div class=\"line\">    wlock.unlock();</div><div class=\"line\"></div><div class=\"line\">    System.out.println(\"now to unlock rlock\");</div><div class=\"line\">    rlock.unlock();</div><div class=\"line\"></div><div class=\"line\">    System.out.println(\"finished\");</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><ul>\n<li><p><a href=\"http://www.iteye.com/topic/1121021\">说一说java的concurrent包-系列文章</a></p>\n</li>\n<li><p><a href=\"http://blog.csdn.net/defonds/article/details/44021605/\">Java 并发工具包 java.util.concurrent 用户指南</a></p>\n</li>\n</ul>"},{"title":"并发包总结（二）","comments":0,"copyright":true,"top":10,"abbrlink":"3699126a","date":"2018-02-23T09:03:02.000Z","_content":"\n## <center>java.util.concurrent 包 java并发编程包（二）</center>\n\n### 阻塞队列（BlockingQueue）  系列用法\n\nBlockingQueue 通常用于一个线程生产对象，而另外一个线程消费这些对象的场景。下图是对这个原理的阐述：\n![blockingQueue.png](http://img.blog.csdn.net/20150302184203260?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZGVmb25kcw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n一个往线程里边放，另外一个线程从里边取的一个BlockingQueue。\n\n一个线程将会持续生产新对象并将其插入到队列之中，直到队列达到它所能容纳的临界点。也就是说，它是有限的。如果该阻塞队列到达了其临界点，负责生产的线程将会在往里边插入新对象时发生阻塞。它会一直处于阻塞之中，直到负责消费的线程从队列中拿走一个对象。\n负责消费的线程将会一直从该阻塞队列中拿出对象。如果消费线程尝试去从一个空的队列中提取对象的话，这个消费线程将会处于阻塞之中，直到一个生产线程把一个对象丢进队列。\n\n#### BlockingQueue 的方法\n\n BlockingQueue 具有 4 组不同的方法用于插入、移除以及对队列中的元素进行检查。如果请求的操作不能得到立即执行的话，每个方法的表现也不同。这些方法如下：\n\n| |抛异常|特定值|阻塞|超时|\n| ------------- |:-------------:|:-------------:|:-------------:|:-------------:|:-------------:| -----:|\n|插入 | add(o) | offer(o) | put(o) | offer(o,timeout,timeunit) |\n|移除 | remove(o) | poll(o) | take(o) | poll(o,timeout,timeunit) |\n|检查 | element(o) | peek(o) |\n\n四组不同的行为方式解释：\n> 1.抛异常：如果试图的操作无法立即执行，抛一个异常。\n> 2.特定值：如果试图的操作无法立即执行，返回一个特定的值(常常是 true / false)。\n> 3.阻塞：如果试图的操作无法立即执行，该方法调用将会发生阻塞，直到能够执行。\n> 4.超时：如果试图的操作无法立即执行，该方法调用将会发生阻塞，直到能够执行，但等待时间不会超过给定值。返回一个特定值以告知该操作是否成功(典型的是 true / false)。\n\n无法向一个 BlockingQueue 中插入 null。如果你试图插入 null，BlockingQueue 将会抛出一个 NullPointerException。可以访问到 BlockingQueue 中的所有元素，而不仅仅是开始和结束的元素。比如说，你将一个对象放入队列之中以等待处理，但你的应用想要将其取消掉。那么你可以调用诸如 remove(o) 方法来将队列之中的特定对象进行移除。但是这么干效率并不高(译者注：基于队列的数据结构，获取除开始或结束位置的其他对象的效率不会太高)，因此你尽量不要用这一类的方法，除非你确实不得不那么做。\n<!--more-->\n\n#### BlockingQueue 的实现\n\nBlockingQueue 是个接口，需要使用它的实现类之一来使用BlockingQueue.实现类有（this in java 6）:\n\n* ArrayBlockingQueue\n\n* DelayQueue\n\n* LinkedBlockingQueue\n\n* PriorityBlockingQueue\n\n* SynchronousQueue\n\n#### java中使用BlockingQueue 的例子\n\n这里是一个 Java 中使用 BlockingQueue 的示例。本示例使用的是 BlockingQueue 接口的 ArrayBlockingQueue 实现。\n首先，BlockingQueueExample 类分别在两个独立的线程中启动了一个 Producer 和 一个 Consumer。Producer 向一个共享的 BlockingQueue 中注入字符串，而 Consumer 则会从中把它们拿出来。\n\n```java\n\npublic class BlockingQueueExample {\n\n    public static void main(String[] args) throws Exception {\n\n        BlockingQueue queue = new ArrayBlockingQueue(1024);\n\n        Producer producer = new Producer(queue);\n        Consumer consumer = new Consumer(queue);\n\n        new Thread(producer).start();\n        new Thread(consumer).start();\n\n        Thread.sleep(4000);\n    }\n}\n```\n\n以下是Producer 类。注意它在每次put()调用时是如何休眠一秒钟的。这将导致Consumer 在等待队列中对象的时候发生阻塞。\n\n```java\n\npublic class Producer implements Runnable{\n\n    protected BlockingQueue queue = null;\n\n    public Producer(BlockingQueue queue) {\n        this.queue = queue;\n    }\n\n    public void run() {\n        try {\n            queue.put(\"1\");\n            Thread.sleep(1000);\n            queue.put(\"2\");\n            Thread.sleep(1000);\n            queue.put(\"3\");\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```\n\n以下是 Consumer 类。它只是把对象从队列中抽取出来，然后将它们打印到 System.out。\n\n```java\n\npublic class Consumer implements Runnable{\n\n    protected BlockingQueue queue = null;\n\n    public Consumer(BlockingQueue queue) {\n        this.queue = queue;\n    }\n\n    public void run() {\n        try {\n            System.out.println(queue.take());\n            System.out.println(queue.take());\n            System.out.println(queue.take());\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```\n\n### 数组阻塞队列 ArrayBlockingQueue\n\nArrayBlockingQueue 类实现了BlockingQueue 接口。\nArrayBlockingQueue 是一个有界的阻塞队列，其内部实现是将对象放到一个数组里。有界也就意味着，它不能够存储无限多数量的元素。它有一个同一时间能够存储元素数量的上限。你可以在对其进行初始化的时候设定这个上限，但之后就无法对这个上限进行修改了（ps:因为基于数组实现，具有数组的特性，一旦初始化，大小就无法修改）。\nArrayBlockingQueue 内部以FIFO（先进先出）的顺序对元素进行存储。队列中的头元素在所有元素之中是放入时间最久的那个，而尾部元素是最短的那个。\n以下是在使用  ArrayBlockingQueue 的时候对其初始化的一个示例：\n\n```java\nBlockingQueue queue = new ArrayBlockingQueue(1024);\n\nqueue.put(\"1\");\n\nObject object = queue.take();\n```\n\n以下是使用了 Java 泛型的一个 BlockingQueue 示例。注意其中是如何对 String 元素放入和提取的：\n\n```java\nBlockingQueue<String> queue = new ArrayBlockingQueue<String>(1024);\n\nqueue.put(\"1\");\n\nString string = queue.take();\n```\n\n### 延迟队列 DelayQueue\n\nDelayQueue 实现了 BlockingQueue 接口。\nDelayQueue 对元素进行持有直到一个特定的延迟到期。注入其中的元素必须实现 java.util.concurrent.Delayed 接口，该接口定义：\n\n```java\n\npublic interface Delayed extends Comparable<Delayed< {\n\n public long getDelay(TimeUnit timeUnit);\n\n}\n```\n\nDelayQueue 将会在每个元素的 getDelay() 方法返回的值的时间段之后才释放掉该元素。如果返回的是 0 或者负值，延迟将被认为过期，该元素将会在 DelayQueue 的下一次 take  被调用的时候被释放掉。\n传递给 getDelay 方法的 getDelay 实例是一个枚举类型，它表明了将要延迟的时间段。TimeUnit 枚举将会取以下值：\n\n```bash\nDAYS\nHOURS\nMINUTES\nSECONDS\nMILLISECONDS\nMICROSECONDS\nNANOSECONDS\n```\n\n正如你所看到的，Delayed 接口也继承了 java.lang.Comparable 接口，这也就意味着 Delayed 对象之间可以进行对比。这个可能在对 DelayQueue 队列中的元素进行排序时有用，因此它们可以根据过期时间进行有序释放。\n以下是使用 DelayQueue 的例子：\n\n```java\n\npublic class DelayQueueExample {\n\n    public static void main(String[] args) {\n        DelayQueue queue = new DelayQueue();\n\n        Delayed element1 = new DelayedElement();\n\n        queue.put(element1);\n\n        Delayed element2 = queue.take();\n    }\n}\n```\n\nDelayedElement 是我所创建的一个 DelayedElement 接口的实现类，它不在 java.util.concurrent 包里。你需要自行创建你自己的 Delayed 接口的实现以使用 DelayQueue 类。\n\n### 链阻塞队列LinkedBlockingQueue\n\nLinkedBlockingQueue 类实现了BlockingQueue接口。\nLinkedBlockingQueue 内部以一个链式结构(链接节点)对其元素进行存储。如果需要的话，这一链式结构可以选择一个上限。如果没有定义上限，将使用 Integer.MAX_VALUE 作为上限。\nLinkedBlockingQueue 内部以 FIFO(先进先出)的顺序对元素进行存储。队列中的头元素在所有元素之中是放入时间最久的那个，而尾元素则是最短的那个。\n以下是 LinkedBlockingQueue 的初始化和使用示例代码：\n\n```java\n\nBlockingQueue<String> unbounded = new LinkedBlockingQueue<String>();\nBlockingQueue<String> bounded   = new LinkedBlockingQueue<String>(1024);\n\nbounded.put(\"Value\");\n\nString value = bounded.take();\n```\n\n### 具有优先级的阻塞队列PriorityBlockingQueue\n\nPriorityBlockingQueue 类实现了 BlockingQueue 接口。\nPriorityBlockingQueue 是一个无界的并发队列。它使用了和类 java.util.PriorityQueue 一样的排序规则。你无法向这个队列中插入 null 值。\n所有插入到 PriorityBlockingQueue 的元素必须实现 java.lang.Comparable 接口。因此该队列中元素的排序就取决于你自己的 Comparable 实现。\n注意 PriorityBlockingQueue 对于具有相等优先级(compare() == 0)的元素并不强制任何特定行为。\n同时注意，如果你从一个 PriorityBlockingQueue 获得一个 Iterator 的话，该 Iterator 并不能保证它对元素的遍历是以优先级为序的。\n以下是使用 PriorityBlockingQueue 的示例：\n\n```java\n\nBlockingQueue queue   = new PriorityBlockingQueue();\n\n//String implements java.lang.Comparable\nqueue.put(\"Value\");\n\nString value = queue.take();\n```\n\n### 同步队列SynchronousQueue\n\nSynchronousQueue 类实现了 BlockingQueue 接口。\nSynchronousQueue 是一个特殊的队列，它的内部同时只能够容纳单个元素。如果该队列已有一元素的话，试图向队列中插入一个新元素的线程将会阻塞，直到另一个线程将该元素从队列中抽走。同样，如果该队列为空，试图向队列中抽取一个元素的线程将会阻塞，直到另一个线程向队列中插入了一条新的元素。\n据此，把这个类称作一个队列显然是夸大其词了。它更多像是一个汇合点。\n\n### 阻塞双端队列 BlockingDeque\n\njava.util.concurrent 包里的 BlockingDeque 接口表示一个线程安放入和提取实例的双端队列。本小节我将给你演示如何使用 BlockingDeque。\nBlockingDeque 类是一个双端队列，在不能够插入元素时，它将阻塞住试图插入元素的线程；在不能够抽取元素时，它将阻塞住试图抽取的线程。\ndeque(双端队列) 是 \"Double Ended Queue\" 的缩写。因此，双端队列是一个你可以从任意一端插入或者抽取元素的队列。\n\n![BlockingDeque.png](http://img.blog.csdn.net/20150303084557477?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZGVmb25kcw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n一个 BlockingDeque - 线程在双端队列的两端都可以插入和提取元素。\n一个线程生产元素，并把它们插入到队列的任意一端。如果双端队列已满，插入线程将被阻塞，直到一个移除线程从该队列中移出了一个元素。如果双端队列为空，移除线程将被阻塞，直到一个插入线程向该队列插入了一个新元素。\n\nBlockingDeque 的方法\nBlockingDeque 具有 4 组不同的方法用于插入、移除以及对双端队列中的元素进行检查。如果请求的操作不能得到立即执行的话，每个方法的表现也不同。这些方法如下：\n\n| |抛异常|特定值|阻塞|超时|\n| ------------- |:-------------:|:-------------:|:-------------:| :-----:|\n| 插入 | addFirst(o) | offerFirst(o) | putFirst(o) | offerFirst(o, timeout, timeunit) |\n| 移除 | removeFirst(o) | pollFirst(o) | takeFirst(o) | pollFirst(timeout, timeunit) |\n| 检查 | getFirst(o) | peekFirst(o) |  |  |\n\n| |抛异常|特定值|阻塞|超时|\n| ------------- |:-------------:|:-------------:|:-------------:| :-----:|\n| 插入 | addLast(o) | offerLast(o) | putLast(o) | offerLast(o, timeout, timeunit) |\n| 移除 | removeLast(o) | pollLast(o)  | takeLast(o) | pollLast(timeout, timeunit) |\n| 检查 | getLast(o) | peekLast(o)  |  |  |\n\n四组不同的行为方式解释：\n> 1.抛异常：如果试图的操作无法立即执行，抛一个异常。\n> 2.特定值：如果试图的操作无法立即执行，返回一个特定的值(常常是 true / false)。\n> 3.阻塞：如果试图的操作无法立即执行，该方法调用将会发生阻塞，直到能够执行。\n> 4.超时：如果试图的操作无法立即执行，该方法调用将会发生阻塞，直到能够执行，但等待时间不会超过给定值。返回一个特定值以告知该操作是否成功(典型的是 true / false)。\n\n-------------\n\n### 参考资料\n\n- [Java 并发工具包 java.util.concurrent 用户指南](http://blog.csdn.net/defonds/article/details/44021605/)","source":"_posts/2018-02-23-并发包总结（二）.md","raw":"---\ntitle: 并发包总结（二）\ncategories: java\ntags:\n  - concurrent并发包\ncomments: false\ncopyright: true\ntop: 10\nabbrlink: 3699126a\ndate: 2018-02-23 17:03:02\n---\n\n## <center>java.util.concurrent 包 java并发编程包（二）</center>\n\n### 阻塞队列（BlockingQueue）  系列用法\n\nBlockingQueue 通常用于一个线程生产对象，而另外一个线程消费这些对象的场景。下图是对这个原理的阐述：\n![blockingQueue.png](http://img.blog.csdn.net/20150302184203260?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZGVmb25kcw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n一个往线程里边放，另外一个线程从里边取的一个BlockingQueue。\n\n一个线程将会持续生产新对象并将其插入到队列之中，直到队列达到它所能容纳的临界点。也就是说，它是有限的。如果该阻塞队列到达了其临界点，负责生产的线程将会在往里边插入新对象时发生阻塞。它会一直处于阻塞之中，直到负责消费的线程从队列中拿走一个对象。\n负责消费的线程将会一直从该阻塞队列中拿出对象。如果消费线程尝试去从一个空的队列中提取对象的话，这个消费线程将会处于阻塞之中，直到一个生产线程把一个对象丢进队列。\n\n#### BlockingQueue 的方法\n\n BlockingQueue 具有 4 组不同的方法用于插入、移除以及对队列中的元素进行检查。如果请求的操作不能得到立即执行的话，每个方法的表现也不同。这些方法如下：\n\n| |抛异常|特定值|阻塞|超时|\n| ------------- |:-------------:|:-------------:|:-------------:|:-------------:|:-------------:| -----:|\n|插入 | add(o) | offer(o) | put(o) | offer(o,timeout,timeunit) |\n|移除 | remove(o) | poll(o) | take(o) | poll(o,timeout,timeunit) |\n|检查 | element(o) | peek(o) |\n\n四组不同的行为方式解释：\n> 1.抛异常：如果试图的操作无法立即执行，抛一个异常。\n> 2.特定值：如果试图的操作无法立即执行，返回一个特定的值(常常是 true / false)。\n> 3.阻塞：如果试图的操作无法立即执行，该方法调用将会发生阻塞，直到能够执行。\n> 4.超时：如果试图的操作无法立即执行，该方法调用将会发生阻塞，直到能够执行，但等待时间不会超过给定值。返回一个特定值以告知该操作是否成功(典型的是 true / false)。\n\n无法向一个 BlockingQueue 中插入 null。如果你试图插入 null，BlockingQueue 将会抛出一个 NullPointerException。可以访问到 BlockingQueue 中的所有元素，而不仅仅是开始和结束的元素。比如说，你将一个对象放入队列之中以等待处理，但你的应用想要将其取消掉。那么你可以调用诸如 remove(o) 方法来将队列之中的特定对象进行移除。但是这么干效率并不高(译者注：基于队列的数据结构，获取除开始或结束位置的其他对象的效率不会太高)，因此你尽量不要用这一类的方法，除非你确实不得不那么做。\n<!--more-->\n\n#### BlockingQueue 的实现\n\nBlockingQueue 是个接口，需要使用它的实现类之一来使用BlockingQueue.实现类有（this in java 6）:\n\n* ArrayBlockingQueue\n\n* DelayQueue\n\n* LinkedBlockingQueue\n\n* PriorityBlockingQueue\n\n* SynchronousQueue\n\n#### java中使用BlockingQueue 的例子\n\n这里是一个 Java 中使用 BlockingQueue 的示例。本示例使用的是 BlockingQueue 接口的 ArrayBlockingQueue 实现。\n首先，BlockingQueueExample 类分别在两个独立的线程中启动了一个 Producer 和 一个 Consumer。Producer 向一个共享的 BlockingQueue 中注入字符串，而 Consumer 则会从中把它们拿出来。\n\n```java\n\npublic class BlockingQueueExample {\n\n    public static void main(String[] args) throws Exception {\n\n        BlockingQueue queue = new ArrayBlockingQueue(1024);\n\n        Producer producer = new Producer(queue);\n        Consumer consumer = new Consumer(queue);\n\n        new Thread(producer).start();\n        new Thread(consumer).start();\n\n        Thread.sleep(4000);\n    }\n}\n```\n\n以下是Producer 类。注意它在每次put()调用时是如何休眠一秒钟的。这将导致Consumer 在等待队列中对象的时候发生阻塞。\n\n```java\n\npublic class Producer implements Runnable{\n\n    protected BlockingQueue queue = null;\n\n    public Producer(BlockingQueue queue) {\n        this.queue = queue;\n    }\n\n    public void run() {\n        try {\n            queue.put(\"1\");\n            Thread.sleep(1000);\n            queue.put(\"2\");\n            Thread.sleep(1000);\n            queue.put(\"3\");\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```\n\n以下是 Consumer 类。它只是把对象从队列中抽取出来，然后将它们打印到 System.out。\n\n```java\n\npublic class Consumer implements Runnable{\n\n    protected BlockingQueue queue = null;\n\n    public Consumer(BlockingQueue queue) {\n        this.queue = queue;\n    }\n\n    public void run() {\n        try {\n            System.out.println(queue.take());\n            System.out.println(queue.take());\n            System.out.println(queue.take());\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```\n\n### 数组阻塞队列 ArrayBlockingQueue\n\nArrayBlockingQueue 类实现了BlockingQueue 接口。\nArrayBlockingQueue 是一个有界的阻塞队列，其内部实现是将对象放到一个数组里。有界也就意味着，它不能够存储无限多数量的元素。它有一个同一时间能够存储元素数量的上限。你可以在对其进行初始化的时候设定这个上限，但之后就无法对这个上限进行修改了（ps:因为基于数组实现，具有数组的特性，一旦初始化，大小就无法修改）。\nArrayBlockingQueue 内部以FIFO（先进先出）的顺序对元素进行存储。队列中的头元素在所有元素之中是放入时间最久的那个，而尾部元素是最短的那个。\n以下是在使用  ArrayBlockingQueue 的时候对其初始化的一个示例：\n\n```java\nBlockingQueue queue = new ArrayBlockingQueue(1024);\n\nqueue.put(\"1\");\n\nObject object = queue.take();\n```\n\n以下是使用了 Java 泛型的一个 BlockingQueue 示例。注意其中是如何对 String 元素放入和提取的：\n\n```java\nBlockingQueue<String> queue = new ArrayBlockingQueue<String>(1024);\n\nqueue.put(\"1\");\n\nString string = queue.take();\n```\n\n### 延迟队列 DelayQueue\n\nDelayQueue 实现了 BlockingQueue 接口。\nDelayQueue 对元素进行持有直到一个特定的延迟到期。注入其中的元素必须实现 java.util.concurrent.Delayed 接口，该接口定义：\n\n```java\n\npublic interface Delayed extends Comparable<Delayed< {\n\n public long getDelay(TimeUnit timeUnit);\n\n}\n```\n\nDelayQueue 将会在每个元素的 getDelay() 方法返回的值的时间段之后才释放掉该元素。如果返回的是 0 或者负值，延迟将被认为过期，该元素将会在 DelayQueue 的下一次 take  被调用的时候被释放掉。\n传递给 getDelay 方法的 getDelay 实例是一个枚举类型，它表明了将要延迟的时间段。TimeUnit 枚举将会取以下值：\n\n```bash\nDAYS\nHOURS\nMINUTES\nSECONDS\nMILLISECONDS\nMICROSECONDS\nNANOSECONDS\n```\n\n正如你所看到的，Delayed 接口也继承了 java.lang.Comparable 接口，这也就意味着 Delayed 对象之间可以进行对比。这个可能在对 DelayQueue 队列中的元素进行排序时有用，因此它们可以根据过期时间进行有序释放。\n以下是使用 DelayQueue 的例子：\n\n```java\n\npublic class DelayQueueExample {\n\n    public static void main(String[] args) {\n        DelayQueue queue = new DelayQueue();\n\n        Delayed element1 = new DelayedElement();\n\n        queue.put(element1);\n\n        Delayed element2 = queue.take();\n    }\n}\n```\n\nDelayedElement 是我所创建的一个 DelayedElement 接口的实现类，它不在 java.util.concurrent 包里。你需要自行创建你自己的 Delayed 接口的实现以使用 DelayQueue 类。\n\n### 链阻塞队列LinkedBlockingQueue\n\nLinkedBlockingQueue 类实现了BlockingQueue接口。\nLinkedBlockingQueue 内部以一个链式结构(链接节点)对其元素进行存储。如果需要的话，这一链式结构可以选择一个上限。如果没有定义上限，将使用 Integer.MAX_VALUE 作为上限。\nLinkedBlockingQueue 内部以 FIFO(先进先出)的顺序对元素进行存储。队列中的头元素在所有元素之中是放入时间最久的那个，而尾元素则是最短的那个。\n以下是 LinkedBlockingQueue 的初始化和使用示例代码：\n\n```java\n\nBlockingQueue<String> unbounded = new LinkedBlockingQueue<String>();\nBlockingQueue<String> bounded   = new LinkedBlockingQueue<String>(1024);\n\nbounded.put(\"Value\");\n\nString value = bounded.take();\n```\n\n### 具有优先级的阻塞队列PriorityBlockingQueue\n\nPriorityBlockingQueue 类实现了 BlockingQueue 接口。\nPriorityBlockingQueue 是一个无界的并发队列。它使用了和类 java.util.PriorityQueue 一样的排序规则。你无法向这个队列中插入 null 值。\n所有插入到 PriorityBlockingQueue 的元素必须实现 java.lang.Comparable 接口。因此该队列中元素的排序就取决于你自己的 Comparable 实现。\n注意 PriorityBlockingQueue 对于具有相等优先级(compare() == 0)的元素并不强制任何特定行为。\n同时注意，如果你从一个 PriorityBlockingQueue 获得一个 Iterator 的话，该 Iterator 并不能保证它对元素的遍历是以优先级为序的。\n以下是使用 PriorityBlockingQueue 的示例：\n\n```java\n\nBlockingQueue queue   = new PriorityBlockingQueue();\n\n//String implements java.lang.Comparable\nqueue.put(\"Value\");\n\nString value = queue.take();\n```\n\n### 同步队列SynchronousQueue\n\nSynchronousQueue 类实现了 BlockingQueue 接口。\nSynchronousQueue 是一个特殊的队列，它的内部同时只能够容纳单个元素。如果该队列已有一元素的话，试图向队列中插入一个新元素的线程将会阻塞，直到另一个线程将该元素从队列中抽走。同样，如果该队列为空，试图向队列中抽取一个元素的线程将会阻塞，直到另一个线程向队列中插入了一条新的元素。\n据此，把这个类称作一个队列显然是夸大其词了。它更多像是一个汇合点。\n\n### 阻塞双端队列 BlockingDeque\n\njava.util.concurrent 包里的 BlockingDeque 接口表示一个线程安放入和提取实例的双端队列。本小节我将给你演示如何使用 BlockingDeque。\nBlockingDeque 类是一个双端队列，在不能够插入元素时，它将阻塞住试图插入元素的线程；在不能够抽取元素时，它将阻塞住试图抽取的线程。\ndeque(双端队列) 是 \"Double Ended Queue\" 的缩写。因此，双端队列是一个你可以从任意一端插入或者抽取元素的队列。\n\n![BlockingDeque.png](http://img.blog.csdn.net/20150303084557477?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZGVmb25kcw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n一个 BlockingDeque - 线程在双端队列的两端都可以插入和提取元素。\n一个线程生产元素，并把它们插入到队列的任意一端。如果双端队列已满，插入线程将被阻塞，直到一个移除线程从该队列中移出了一个元素。如果双端队列为空，移除线程将被阻塞，直到一个插入线程向该队列插入了一个新元素。\n\nBlockingDeque 的方法\nBlockingDeque 具有 4 组不同的方法用于插入、移除以及对双端队列中的元素进行检查。如果请求的操作不能得到立即执行的话，每个方法的表现也不同。这些方法如下：\n\n| |抛异常|特定值|阻塞|超时|\n| ------------- |:-------------:|:-------------:|:-------------:| :-----:|\n| 插入 | addFirst(o) | offerFirst(o) | putFirst(o) | offerFirst(o, timeout, timeunit) |\n| 移除 | removeFirst(o) | pollFirst(o) | takeFirst(o) | pollFirst(timeout, timeunit) |\n| 检查 | getFirst(o) | peekFirst(o) |  |  |\n\n| |抛异常|特定值|阻塞|超时|\n| ------------- |:-------------:|:-------------:|:-------------:| :-----:|\n| 插入 | addLast(o) | offerLast(o) | putLast(o) | offerLast(o, timeout, timeunit) |\n| 移除 | removeLast(o) | pollLast(o)  | takeLast(o) | pollLast(timeout, timeunit) |\n| 检查 | getLast(o) | peekLast(o)  |  |  |\n\n四组不同的行为方式解释：\n> 1.抛异常：如果试图的操作无法立即执行，抛一个异常。\n> 2.特定值：如果试图的操作无法立即执行，返回一个特定的值(常常是 true / false)。\n> 3.阻塞：如果试图的操作无法立即执行，该方法调用将会发生阻塞，直到能够执行。\n> 4.超时：如果试图的操作无法立即执行，该方法调用将会发生阻塞，直到能够执行，但等待时间不会超过给定值。返回一个特定值以告知该操作是否成功(典型的是 true / false)。\n\n-------------\n\n### 参考资料\n\n- [Java 并发工具包 java.util.concurrent 用户指南](http://blog.csdn.net/defonds/article/details/44021605/)","slug":"并发包总结（二）","published":1,"updated":"2018-02-26T10:02:02.387Z","layout":"post","photos":[],"link":"","_id":"cje7yhv3i000o7ku6u93d90ep","content":"<h2 id=\"java-util-concurrent-包-java并发编程包（二）\"><a href=\"#java-util-concurrent-包-java并发编程包（二）\" class=\"headerlink\" title=\"java.util.concurrent 包 java并发编程包（二）\"></a><center>java.util.concurrent 包 java并发编程包（二）</center></h2><h3 id=\"阻塞队列（BlockingQueue）-系列用法\"><a href=\"#阻塞队列（BlockingQueue）-系列用法\" class=\"headerlink\" title=\"阻塞队列（BlockingQueue）  系列用法\"></a>阻塞队列（BlockingQueue）  系列用法</h3><p>BlockingQueue 通常用于一个线程生产对象，而另外一个线程消费这些对象的场景。下图是对这个原理的阐述：<br><img src=\"http://img.blog.csdn.net/20150302184203260?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZGVmb25kcw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"blockingQueue.png\"></p>\n<p>一个往线程里边放，另外一个线程从里边取的一个BlockingQueue。</p>\n<p>一个线程将会持续生产新对象并将其插入到队列之中，直到队列达到它所能容纳的临界点。也就是说，它是有限的。如果该阻塞队列到达了其临界点，负责生产的线程将会在往里边插入新对象时发生阻塞。它会一直处于阻塞之中，直到负责消费的线程从队列中拿走一个对象。<br>负责消费的线程将会一直从该阻塞队列中拿出对象。如果消费线程尝试去从一个空的队列中提取对象的话，这个消费线程将会处于阻塞之中，直到一个生产线程把一个对象丢进队列。</p>\n<h4 id=\"BlockingQueue-的方法\"><a href=\"#BlockingQueue-的方法\" class=\"headerlink\" title=\"BlockingQueue 的方法\"></a>BlockingQueue 的方法</h4><p> BlockingQueue 具有 4 组不同的方法用于插入、移除以及对队列中的元素进行检查。如果请求的操作不能得到立即执行的话，每个方法的表现也不同。这些方法如下：</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th style=\"text-align:center\">抛异常</th>\n<th style=\"text-align:center\">特定值</th>\n<th style=\"text-align:center\">阻塞</th>\n<th style=\"text-align:center\">超时</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>插入</td>\n<td style=\"text-align:center\">add(o)</td>\n<td style=\"text-align:center\">offer(o)</td>\n<td style=\"text-align:center\">put(o)</td>\n<td style=\"text-align:center\">offer(o,timeout,timeunit)</td>\n</tr>\n<tr>\n<td>移除</td>\n<td style=\"text-align:center\">remove(o)</td>\n<td style=\"text-align:center\">poll(o)</td>\n<td style=\"text-align:center\">take(o)</td>\n<td style=\"text-align:center\">poll(o,timeout,timeunit)</td>\n</tr>\n<tr>\n<td>检查</td>\n<td style=\"text-align:center\">element(o)</td>\n<td style=\"text-align:center\">peek(o)</td>\n</tr>\n</tbody>\n</table>\n<p>四组不同的行为方式解释：</p>\n<blockquote>\n<p>1.抛异常：如果试图的操作无法立即执行，抛一个异常。<br>2.特定值：如果试图的操作无法立即执行，返回一个特定的值(常常是 true / false)。<br>3.阻塞：如果试图的操作无法立即执行，该方法调用将会发生阻塞，直到能够执行。<br>4.超时：如果试图的操作无法立即执行，该方法调用将会发生阻塞，直到能够执行，但等待时间不会超过给定值。返回一个特定值以告知该操作是否成功(典型的是 true / false)。</p>\n</blockquote>\n<p>无法向一个 BlockingQueue 中插入 null。如果你试图插入 null，BlockingQueue 将会抛出一个 NullPointerException。可以访问到 BlockingQueue 中的所有元素，而不仅仅是开始和结束的元素。比如说，你将一个对象放入队列之中以等待处理，但你的应用想要将其取消掉。那么你可以调用诸如 remove(o) 方法来将队列之中的特定对象进行移除。但是这么干效率并不高(译者注：基于队列的数据结构，获取除开始或结束位置的其他对象的效率不会太高)，因此你尽量不要用这一类的方法，除非你确实不得不那么做。<br><a id=\"more\"></a></p>\n<h4 id=\"BlockingQueue-的实现\"><a href=\"#BlockingQueue-的实现\" class=\"headerlink\" title=\"BlockingQueue 的实现\"></a>BlockingQueue 的实现</h4><p>BlockingQueue 是个接口，需要使用它的实现类之一来使用BlockingQueue.实现类有（this in java 6）:</p>\n<ul>\n<li><p>ArrayBlockingQueue</p>\n</li>\n<li><p>DelayQueue</p>\n</li>\n<li><p>LinkedBlockingQueue</p>\n</li>\n<li><p>PriorityBlockingQueue</p>\n</li>\n<li><p>SynchronousQueue</p>\n</li>\n</ul>\n<h4 id=\"java中使用BlockingQueue-的例子\"><a href=\"#java中使用BlockingQueue-的例子\" class=\"headerlink\" title=\"java中使用BlockingQueue 的例子\"></a>java中使用BlockingQueue 的例子</h4><p>这里是一个 Java 中使用 BlockingQueue 的示例。本示例使用的是 BlockingQueue 接口的 ArrayBlockingQueue 实现。<br>首先，BlockingQueueExample 类分别在两个独立的线程中启动了一个 Producer 和 一个 Consumer。Producer 向一个共享的 BlockingQueue 中注入字符串，而 Consumer 则会从中把它们拿出来。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BlockingQueueExample</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        BlockingQueue queue = <span class=\"keyword\">new</span> ArrayBlockingQueue(<span class=\"number\">1024</span>);</div><div class=\"line\"></div><div class=\"line\">        Producer producer = <span class=\"keyword\">new</span> Producer(queue);</div><div class=\"line\">        Consumer consumer = <span class=\"keyword\">new</span> Consumer(queue);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">new</span> Thread(producer).start();</div><div class=\"line\">        <span class=\"keyword\">new</span> Thread(consumer).start();</div><div class=\"line\"></div><div class=\"line\">        Thread.sleep(<span class=\"number\">4000</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>以下是Producer 类。注意它在每次put()调用时是如何休眠一秒钟的。这将导致Consumer 在等待队列中对象的时候发生阻塞。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Producer</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">protected</span> BlockingQueue queue = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Producer</span><span class=\"params\">(BlockingQueue queue)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.queue = queue;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            queue.put(<span class=\"string\">\"1\"</span>);</div><div class=\"line\">            Thread.sleep(<span class=\"number\">1000</span>);</div><div class=\"line\">            queue.put(<span class=\"string\">\"2\"</span>);</div><div class=\"line\">            Thread.sleep(<span class=\"number\">1000</span>);</div><div class=\"line\">            queue.put(<span class=\"string\">\"3\"</span>);</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>以下是 Consumer 类。它只是把对象从队列中抽取出来，然后将它们打印到 System.out。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Consumer</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">protected</span> BlockingQueue queue = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Consumer</span><span class=\"params\">(BlockingQueue queue)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.queue = queue;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            System.out.println(queue.take());</div><div class=\"line\">            System.out.println(queue.take());</div><div class=\"line\">            System.out.println(queue.take());</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"数组阻塞队列-ArrayBlockingQueue\"><a href=\"#数组阻塞队列-ArrayBlockingQueue\" class=\"headerlink\" title=\"数组阻塞队列 ArrayBlockingQueue\"></a>数组阻塞队列 ArrayBlockingQueue</h3><p>ArrayBlockingQueue 类实现了BlockingQueue 接口。<br>ArrayBlockingQueue 是一个有界的阻塞队列，其内部实现是将对象放到一个数组里。有界也就意味着，它不能够存储无限多数量的元素。它有一个同一时间能够存储元素数量的上限。你可以在对其进行初始化的时候设定这个上限，但之后就无法对这个上限进行修改了（ps:因为基于数组实现，具有数组的特性，一旦初始化，大小就无法修改）。<br>ArrayBlockingQueue 内部以FIFO（先进先出）的顺序对元素进行存储。队列中的头元素在所有元素之中是放入时间最久的那个，而尾部元素是最短的那个。<br>以下是在使用  ArrayBlockingQueue 的时候对其初始化的一个示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">BlockingQueue queue = <span class=\"keyword\">new</span> ArrayBlockingQueue(<span class=\"number\">1024</span>);</div><div class=\"line\"></div><div class=\"line\">queue.put(<span class=\"string\">\"1\"</span>);</div><div class=\"line\"></div><div class=\"line\">Object object = queue.take();</div></pre></td></tr></table></figure>\n<p>以下是使用了 Java 泛型的一个 BlockingQueue 示例。注意其中是如何对 String 元素放入和提取的：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">BlockingQueue&lt;String&gt; queue = <span class=\"keyword\">new</span> ArrayBlockingQueue&lt;String&gt;(<span class=\"number\">1024</span>);</div><div class=\"line\"></div><div class=\"line\">queue.put(<span class=\"string\">\"1\"</span>);</div><div class=\"line\"></div><div class=\"line\">String string = queue.take();</div></pre></td></tr></table></figure>\n<h3 id=\"延迟队列-DelayQueue\"><a href=\"#延迟队列-DelayQueue\" class=\"headerlink\" title=\"延迟队列 DelayQueue\"></a>延迟队列 DelayQueue</h3><p>DelayQueue 实现了 BlockingQueue 接口。<br>DelayQueue 对元素进行持有直到一个特定的延迟到期。注入其中的元素必须实现 java.util.concurrent.Delayed 接口，该接口定义：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Delayed</span> <span class=\"keyword\">extends</span> <span class=\"title\">Comparable</span>&lt;<span class=\"title\">Delayed</span>&lt; </span>&#123;</div><div class=\"line\"></div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">long</span> <span class=\"title\">getDelay</span><span class=\"params\">(TimeUnit timeUnit)</span></span>;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>DelayQueue 将会在每个元素的 getDelay() 方法返回的值的时间段之后才释放掉该元素。如果返回的是 0 或者负值，延迟将被认为过期，该元素将会在 DelayQueue 的下一次 take  被调用的时候被释放掉。<br>传递给 getDelay 方法的 getDelay 实例是一个枚举类型，它表明了将要延迟的时间段。TimeUnit 枚举将会取以下值：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">DAYS</div><div class=\"line\">HOURS</div><div class=\"line\">MINUTES</div><div class=\"line\">SECONDS</div><div class=\"line\">MILLISECONDS</div><div class=\"line\">MICROSECONDS</div><div class=\"line\">NANOSECONDS</div></pre></td></tr></table></figure>\n<p>正如你所看到的，Delayed 接口也继承了 java.lang.Comparable 接口，这也就意味着 Delayed 对象之间可以进行对比。这个可能在对 DelayQueue 队列中的元素进行排序时有用，因此它们可以根据过期时间进行有序释放。<br>以下是使用 DelayQueue 的例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DelayQueueExample</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        DelayQueue queue = <span class=\"keyword\">new</span> DelayQueue();</div><div class=\"line\"></div><div class=\"line\">        Delayed element1 = <span class=\"keyword\">new</span> DelayedElement();</div><div class=\"line\"></div><div class=\"line\">        queue.put(element1);</div><div class=\"line\"></div><div class=\"line\">        Delayed element2 = queue.take();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>DelayedElement 是我所创建的一个 DelayedElement 接口的实现类，它不在 java.util.concurrent 包里。你需要自行创建你自己的 Delayed 接口的实现以使用 DelayQueue 类。</p>\n<h3 id=\"链阻塞队列LinkedBlockingQueue\"><a href=\"#链阻塞队列LinkedBlockingQueue\" class=\"headerlink\" title=\"链阻塞队列LinkedBlockingQueue\"></a>链阻塞队列LinkedBlockingQueue</h3><p>LinkedBlockingQueue 类实现了BlockingQueue接口。<br>LinkedBlockingQueue 内部以一个链式结构(链接节点)对其元素进行存储。如果需要的话，这一链式结构可以选择一个上限。如果没有定义上限，将使用 Integer.MAX_VALUE 作为上限。<br>LinkedBlockingQueue 内部以 FIFO(先进先出)的顺序对元素进行存储。队列中的头元素在所有元素之中是放入时间最久的那个，而尾元素则是最短的那个。<br>以下是 LinkedBlockingQueue 的初始化和使用示例代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">BlockingQueue&lt;String&gt; unbounded = <span class=\"keyword\">new</span> LinkedBlockingQueue&lt;String&gt;();</div><div class=\"line\">BlockingQueue&lt;String&gt; bounded   = <span class=\"keyword\">new</span> LinkedBlockingQueue&lt;String&gt;(<span class=\"number\">1024</span>);</div><div class=\"line\"></div><div class=\"line\">bounded.put(<span class=\"string\">\"Value\"</span>);</div><div class=\"line\"></div><div class=\"line\">String value = bounded.take();</div></pre></td></tr></table></figure>\n<h3 id=\"具有优先级的阻塞队列PriorityBlockingQueue\"><a href=\"#具有优先级的阻塞队列PriorityBlockingQueue\" class=\"headerlink\" title=\"具有优先级的阻塞队列PriorityBlockingQueue\"></a>具有优先级的阻塞队列PriorityBlockingQueue</h3><p>PriorityBlockingQueue 类实现了 BlockingQueue 接口。<br>PriorityBlockingQueue 是一个无界的并发队列。它使用了和类 java.util.PriorityQueue 一样的排序规则。你无法向这个队列中插入 null 值。<br>所有插入到 PriorityBlockingQueue 的元素必须实现 java.lang.Comparable 接口。因此该队列中元素的排序就取决于你自己的 Comparable 实现。<br>注意 PriorityBlockingQueue 对于具有相等优先级(compare() == 0)的元素并不强制任何特定行为。<br>同时注意，如果你从一个 PriorityBlockingQueue 获得一个 Iterator 的话，该 Iterator 并不能保证它对元素的遍历是以优先级为序的。<br>以下是使用 PriorityBlockingQueue 的示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">BlockingQueue queue   = <span class=\"keyword\">new</span> PriorityBlockingQueue();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//String implements java.lang.Comparable</span></div><div class=\"line\">queue.put(<span class=\"string\">\"Value\"</span>);</div><div class=\"line\"></div><div class=\"line\">String value = queue.take();</div></pre></td></tr></table></figure>\n<h3 id=\"同步队列SynchronousQueue\"><a href=\"#同步队列SynchronousQueue\" class=\"headerlink\" title=\"同步队列SynchronousQueue\"></a>同步队列SynchronousQueue</h3><p>SynchronousQueue 类实现了 BlockingQueue 接口。<br>SynchronousQueue 是一个特殊的队列，它的内部同时只能够容纳单个元素。如果该队列已有一元素的话，试图向队列中插入一个新元素的线程将会阻塞，直到另一个线程将该元素从队列中抽走。同样，如果该队列为空，试图向队列中抽取一个元素的线程将会阻塞，直到另一个线程向队列中插入了一条新的元素。<br>据此，把这个类称作一个队列显然是夸大其词了。它更多像是一个汇合点。</p>\n<h3 id=\"阻塞双端队列-BlockingDeque\"><a href=\"#阻塞双端队列-BlockingDeque\" class=\"headerlink\" title=\"阻塞双端队列 BlockingDeque\"></a>阻塞双端队列 BlockingDeque</h3><p>java.util.concurrent 包里的 BlockingDeque 接口表示一个线程安放入和提取实例的双端队列。本小节我将给你演示如何使用 BlockingDeque。<br>BlockingDeque 类是一个双端队列，在不能够插入元素时，它将阻塞住试图插入元素的线程；在不能够抽取元素时，它将阻塞住试图抽取的线程。<br>deque(双端队列) 是 “Double Ended Queue” 的缩写。因此，双端队列是一个你可以从任意一端插入或者抽取元素的队列。</p>\n<p><img src=\"http://img.blog.csdn.net/20150303084557477?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZGVmb25kcw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"BlockingDeque.png\"></p>\n<p>一个 BlockingDeque - 线程在双端队列的两端都可以插入和提取元素。<br>一个线程生产元素，并把它们插入到队列的任意一端。如果双端队列已满，插入线程将被阻塞，直到一个移除线程从该队列中移出了一个元素。如果双端队列为空，移除线程将被阻塞，直到一个插入线程向该队列插入了一个新元素。</p>\n<p>BlockingDeque 的方法<br>BlockingDeque 具有 4 组不同的方法用于插入、移除以及对双端队列中的元素进行检查。如果请求的操作不能得到立即执行的话，每个方法的表现也不同。这些方法如下：</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th style=\"text-align:center\">抛异常</th>\n<th style=\"text-align:center\">特定值</th>\n<th style=\"text-align:center\">阻塞</th>\n<th style=\"text-align:center\">超时</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>插入</td>\n<td style=\"text-align:center\">addFirst(o)</td>\n<td style=\"text-align:center\">offerFirst(o)</td>\n<td style=\"text-align:center\">putFirst(o)</td>\n<td style=\"text-align:center\">offerFirst(o, timeout, timeunit)</td>\n</tr>\n<tr>\n<td>移除</td>\n<td style=\"text-align:center\">removeFirst(o)</td>\n<td style=\"text-align:center\">pollFirst(o)</td>\n<td style=\"text-align:center\">takeFirst(o)</td>\n<td style=\"text-align:center\">pollFirst(timeout, timeunit)</td>\n</tr>\n<tr>\n<td>检查</td>\n<td style=\"text-align:center\">getFirst(o)</td>\n<td style=\"text-align:center\">peekFirst(o)</td>\n<td style=\"text-align:center\"></td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th></th>\n<th style=\"text-align:center\">抛异常</th>\n<th style=\"text-align:center\">特定值</th>\n<th style=\"text-align:center\">阻塞</th>\n<th style=\"text-align:center\">超时</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>插入</td>\n<td style=\"text-align:center\">addLast(o)</td>\n<td style=\"text-align:center\">offerLast(o)</td>\n<td style=\"text-align:center\">putLast(o)</td>\n<td style=\"text-align:center\">offerLast(o, timeout, timeunit)</td>\n</tr>\n<tr>\n<td>移除</td>\n<td style=\"text-align:center\">removeLast(o)</td>\n<td style=\"text-align:center\">pollLast(o)</td>\n<td style=\"text-align:center\">takeLast(o)</td>\n<td style=\"text-align:center\">pollLast(timeout, timeunit)</td>\n</tr>\n<tr>\n<td>检查</td>\n<td style=\"text-align:center\">getLast(o)</td>\n<td style=\"text-align:center\">peekLast(o)</td>\n<td style=\"text-align:center\"></td>\n</tr>\n</tbody>\n</table>\n<p>四组不同的行为方式解释：</p>\n<blockquote>\n<p>1.抛异常：如果试图的操作无法立即执行，抛一个异常。<br>2.特定值：如果试图的操作无法立即执行，返回一个特定的值(常常是 true / false)。<br>3.阻塞：如果试图的操作无法立即执行，该方法调用将会发生阻塞，直到能够执行。<br>4.超时：如果试图的操作无法立即执行，该方法调用将会发生阻塞，直到能够执行，但等待时间不会超过给定值。返回一个特定值以告知该操作是否成功(典型的是 true / false)。</p>\n</blockquote>\n<hr>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><ul>\n<li><a href=\"http://blog.csdn.net/defonds/article/details/44021605/\" target=\"_blank\" rel=\"external\">Java 并发工具包 java.util.concurrent 用户指南</a></li>\n</ul>\n","excerpt":"<h2 id=\"java-util-concurrent-包-java并发编程包（二）\"><a href=\"#java-util-concurrent-包-java并发编程包（二）\" class=\"headerlink\" title=\"java.util.concurrent 包 java并发编程包（二）\"></a><center>java.util.concurrent 包 java并发编程包（二）</center></h2><h3 id=\"阻塞队列（BlockingQueue）-系列用法\"><a href=\"#阻塞队列（BlockingQueue）-系列用法\" class=\"headerlink\" title=\"阻塞队列（BlockingQueue）  系列用法\"></a>阻塞队列（BlockingQueue）  系列用法</h3><p>BlockingQueue 通常用于一个线程生产对象，而另外一个线程消费这些对象的场景。下图是对这个原理的阐述：<br><img src=\"http://img.blog.csdn.net/20150302184203260?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZGVmb25kcw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"blockingQueue.png\"></p>\n<p>一个往线程里边放，另外一个线程从里边取的一个BlockingQueue。</p>\n<p>一个线程将会持续生产新对象并将其插入到队列之中，直到队列达到它所能容纳的临界点。也就是说，它是有限的。如果该阻塞队列到达了其临界点，负责生产的线程将会在往里边插入新对象时发生阻塞。它会一直处于阻塞之中，直到负责消费的线程从队列中拿走一个对象。<br>负责消费的线程将会一直从该阻塞队列中拿出对象。如果消费线程尝试去从一个空的队列中提取对象的话，这个消费线程将会处于阻塞之中，直到一个生产线程把一个对象丢进队列。</p>\n<h4 id=\"BlockingQueue-的方法\"><a href=\"#BlockingQueue-的方法\" class=\"headerlink\" title=\"BlockingQueue 的方法\"></a>BlockingQueue 的方法</h4><p> BlockingQueue 具有 4 组不同的方法用于插入、移除以及对队列中的元素进行检查。如果请求的操作不能得到立即执行的话，每个方法的表现也不同。这些方法如下：</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th style=\"text-align:center\">抛异常</th>\n<th style=\"text-align:center\">特定值</th>\n<th style=\"text-align:center\">阻塞</th>\n<th style=\"text-align:center\">超时</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>插入</td>\n<td style=\"text-align:center\">add(o)</td>\n<td style=\"text-align:center\">offer(o)</td>\n<td style=\"text-align:center\">put(o)</td>\n<td style=\"text-align:center\">offer(o,timeout,timeunit)</td>\n</tr>\n<tr>\n<td>移除</td>\n<td style=\"text-align:center\">remove(o)</td>\n<td style=\"text-align:center\">poll(o)</td>\n<td style=\"text-align:center\">take(o)</td>\n<td style=\"text-align:center\">poll(o,timeout,timeunit)</td>\n</tr>\n<tr>\n<td>检查</td>\n<td style=\"text-align:center\">element(o)</td>\n<td style=\"text-align:center\">peek(o)</td>\n</tr>\n</tbody>\n</table>\n<p>四组不同的行为方式解释：</p>\n<blockquote>\n<p>1.抛异常：如果试图的操作无法立即执行，抛一个异常。<br>2.特定值：如果试图的操作无法立即执行，返回一个特定的值(常常是 true / false)。<br>3.阻塞：如果试图的操作无法立即执行，该方法调用将会发生阻塞，直到能够执行。<br>4.超时：如果试图的操作无法立即执行，该方法调用将会发生阻塞，直到能够执行，但等待时间不会超过给定值。返回一个特定值以告知该操作是否成功(典型的是 true / false)。</p>\n</blockquote>\n<p>无法向一个 BlockingQueue 中插入 null。如果你试图插入 null，BlockingQueue 将会抛出一个 NullPointerException。可以访问到 BlockingQueue 中的所有元素，而不仅仅是开始和结束的元素。比如说，你将一个对象放入队列之中以等待处理，但你的应用想要将其取消掉。那么你可以调用诸如 remove(o) 方法来将队列之中的特定对象进行移除。但是这么干效率并不高(译者注：基于队列的数据结构，获取除开始或结束位置的其他对象的效率不会太高)，因此你尽量不要用这一类的方法，除非你确实不得不那么做。<br>","more":"</p>\n<h4 id=\"BlockingQueue-的实现\"><a href=\"#BlockingQueue-的实现\" class=\"headerlink\" title=\"BlockingQueue 的实现\"></a>BlockingQueue 的实现</h4><p>BlockingQueue 是个接口，需要使用它的实现类之一来使用BlockingQueue.实现类有（this in java 6）:</p>\n<ul>\n<li><p>ArrayBlockingQueue</p>\n</li>\n<li><p>DelayQueue</p>\n</li>\n<li><p>LinkedBlockingQueue</p>\n</li>\n<li><p>PriorityBlockingQueue</p>\n</li>\n<li><p>SynchronousQueue</p>\n</li>\n</ul>\n<h4 id=\"java中使用BlockingQueue-的例子\"><a href=\"#java中使用BlockingQueue-的例子\" class=\"headerlink\" title=\"java中使用BlockingQueue 的例子\"></a>java中使用BlockingQueue 的例子</h4><p>这里是一个 Java 中使用 BlockingQueue 的示例。本示例使用的是 BlockingQueue 接口的 ArrayBlockingQueue 实现。<br>首先，BlockingQueueExample 类分别在两个独立的线程中启动了一个 Producer 和 一个 Consumer。Producer 向一个共享的 BlockingQueue 中注入字符串，而 Consumer 则会从中把它们拿出来。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BlockingQueueExample</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        BlockingQueue queue = <span class=\"keyword\">new</span> ArrayBlockingQueue(<span class=\"number\">1024</span>);</div><div class=\"line\"></div><div class=\"line\">        Producer producer = <span class=\"keyword\">new</span> Producer(queue);</div><div class=\"line\">        Consumer consumer = <span class=\"keyword\">new</span> Consumer(queue);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">new</span> Thread(producer).start();</div><div class=\"line\">        <span class=\"keyword\">new</span> Thread(consumer).start();</div><div class=\"line\"></div><div class=\"line\">        Thread.sleep(<span class=\"number\">4000</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>以下是Producer 类。注意它在每次put()调用时是如何休眠一秒钟的。这将导致Consumer 在等待队列中对象的时候发生阻塞。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Producer</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">protected</span> BlockingQueue queue = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Producer</span><span class=\"params\">(BlockingQueue queue)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.queue = queue;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            queue.put(<span class=\"string\">\"1\"</span>);</div><div class=\"line\">            Thread.sleep(<span class=\"number\">1000</span>);</div><div class=\"line\">            queue.put(<span class=\"string\">\"2\"</span>);</div><div class=\"line\">            Thread.sleep(<span class=\"number\">1000</span>);</div><div class=\"line\">            queue.put(<span class=\"string\">\"3\"</span>);</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>以下是 Consumer 类。它只是把对象从队列中抽取出来，然后将它们打印到 System.out。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Consumer</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">protected</span> BlockingQueue queue = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Consumer</span><span class=\"params\">(BlockingQueue queue)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.queue = queue;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            System.out.println(queue.take());</div><div class=\"line\">            System.out.println(queue.take());</div><div class=\"line\">            System.out.println(queue.take());</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"数组阻塞队列-ArrayBlockingQueue\"><a href=\"#数组阻塞队列-ArrayBlockingQueue\" class=\"headerlink\" title=\"数组阻塞队列 ArrayBlockingQueue\"></a>数组阻塞队列 ArrayBlockingQueue</h3><p>ArrayBlockingQueue 类实现了BlockingQueue 接口。<br>ArrayBlockingQueue 是一个有界的阻塞队列，其内部实现是将对象放到一个数组里。有界也就意味着，它不能够存储无限多数量的元素。它有一个同一时间能够存储元素数量的上限。你可以在对其进行初始化的时候设定这个上限，但之后就无法对这个上限进行修改了（ps:因为基于数组实现，具有数组的特性，一旦初始化，大小就无法修改）。<br>ArrayBlockingQueue 内部以FIFO（先进先出）的顺序对元素进行存储。队列中的头元素在所有元素之中是放入时间最久的那个，而尾部元素是最短的那个。<br>以下是在使用  ArrayBlockingQueue 的时候对其初始化的一个示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">BlockingQueue queue = <span class=\"keyword\">new</span> ArrayBlockingQueue(<span class=\"number\">1024</span>);</div><div class=\"line\"></div><div class=\"line\">queue.put(<span class=\"string\">\"1\"</span>);</div><div class=\"line\"></div><div class=\"line\">Object object = queue.take();</div></pre></td></tr></table></figure>\n<p>以下是使用了 Java 泛型的一个 BlockingQueue 示例。注意其中是如何对 String 元素放入和提取的：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">BlockingQueue&lt;String&gt; queue = <span class=\"keyword\">new</span> ArrayBlockingQueue&lt;String&gt;(<span class=\"number\">1024</span>);</div><div class=\"line\"></div><div class=\"line\">queue.put(<span class=\"string\">\"1\"</span>);</div><div class=\"line\"></div><div class=\"line\">String string = queue.take();</div></pre></td></tr></table></figure>\n<h3 id=\"延迟队列-DelayQueue\"><a href=\"#延迟队列-DelayQueue\" class=\"headerlink\" title=\"延迟队列 DelayQueue\"></a>延迟队列 DelayQueue</h3><p>DelayQueue 实现了 BlockingQueue 接口。<br>DelayQueue 对元素进行持有直到一个特定的延迟到期。注入其中的元素必须实现 java.util.concurrent.Delayed 接口，该接口定义：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Delayed</span> <span class=\"keyword\">extends</span> <span class=\"title\">Comparable</span>&lt;<span class=\"title\">Delayed</span>&lt; </span>&#123;</div><div class=\"line\"></div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">long</span> <span class=\"title\">getDelay</span><span class=\"params\">(TimeUnit timeUnit)</span></span>;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>DelayQueue 将会在每个元素的 getDelay() 方法返回的值的时间段之后才释放掉该元素。如果返回的是 0 或者负值，延迟将被认为过期，该元素将会在 DelayQueue 的下一次 take  被调用的时候被释放掉。<br>传递给 getDelay 方法的 getDelay 实例是一个枚举类型，它表明了将要延迟的时间段。TimeUnit 枚举将会取以下值：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">DAYS</div><div class=\"line\">HOURS</div><div class=\"line\">MINUTES</div><div class=\"line\">SECONDS</div><div class=\"line\">MILLISECONDS</div><div class=\"line\">MICROSECONDS</div><div class=\"line\">NANOSECONDS</div></pre></td></tr></table></figure>\n<p>正如你所看到的，Delayed 接口也继承了 java.lang.Comparable 接口，这也就意味着 Delayed 对象之间可以进行对比。这个可能在对 DelayQueue 队列中的元素进行排序时有用，因此它们可以根据过期时间进行有序释放。<br>以下是使用 DelayQueue 的例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DelayQueueExample</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        DelayQueue queue = <span class=\"keyword\">new</span> DelayQueue();</div><div class=\"line\"></div><div class=\"line\">        Delayed element1 = <span class=\"keyword\">new</span> DelayedElement();</div><div class=\"line\"></div><div class=\"line\">        queue.put(element1);</div><div class=\"line\"></div><div class=\"line\">        Delayed element2 = queue.take();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>DelayedElement 是我所创建的一个 DelayedElement 接口的实现类，它不在 java.util.concurrent 包里。你需要自行创建你自己的 Delayed 接口的实现以使用 DelayQueue 类。</p>\n<h3 id=\"链阻塞队列LinkedBlockingQueue\"><a href=\"#链阻塞队列LinkedBlockingQueue\" class=\"headerlink\" title=\"链阻塞队列LinkedBlockingQueue\"></a>链阻塞队列LinkedBlockingQueue</h3><p>LinkedBlockingQueue 类实现了BlockingQueue接口。<br>LinkedBlockingQueue 内部以一个链式结构(链接节点)对其元素进行存储。如果需要的话，这一链式结构可以选择一个上限。如果没有定义上限，将使用 Integer.MAX_VALUE 作为上限。<br>LinkedBlockingQueue 内部以 FIFO(先进先出)的顺序对元素进行存储。队列中的头元素在所有元素之中是放入时间最久的那个，而尾元素则是最短的那个。<br>以下是 LinkedBlockingQueue 的初始化和使用示例代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">BlockingQueue&lt;String&gt; unbounded = <span class=\"keyword\">new</span> LinkedBlockingQueue&lt;String&gt;();</div><div class=\"line\">BlockingQueue&lt;String&gt; bounded   = <span class=\"keyword\">new</span> LinkedBlockingQueue&lt;String&gt;(<span class=\"number\">1024</span>);</div><div class=\"line\"></div><div class=\"line\">bounded.put(<span class=\"string\">\"Value\"</span>);</div><div class=\"line\"></div><div class=\"line\">String value = bounded.take();</div></pre></td></tr></table></figure>\n<h3 id=\"具有优先级的阻塞队列PriorityBlockingQueue\"><a href=\"#具有优先级的阻塞队列PriorityBlockingQueue\" class=\"headerlink\" title=\"具有优先级的阻塞队列PriorityBlockingQueue\"></a>具有优先级的阻塞队列PriorityBlockingQueue</h3><p>PriorityBlockingQueue 类实现了 BlockingQueue 接口。<br>PriorityBlockingQueue 是一个无界的并发队列。它使用了和类 java.util.PriorityQueue 一样的排序规则。你无法向这个队列中插入 null 值。<br>所有插入到 PriorityBlockingQueue 的元素必须实现 java.lang.Comparable 接口。因此该队列中元素的排序就取决于你自己的 Comparable 实现。<br>注意 PriorityBlockingQueue 对于具有相等优先级(compare() == 0)的元素并不强制任何特定行为。<br>同时注意，如果你从一个 PriorityBlockingQueue 获得一个 Iterator 的话，该 Iterator 并不能保证它对元素的遍历是以优先级为序的。<br>以下是使用 PriorityBlockingQueue 的示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">BlockingQueue queue   = <span class=\"keyword\">new</span> PriorityBlockingQueue();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//String implements java.lang.Comparable</span></div><div class=\"line\">queue.put(<span class=\"string\">\"Value\"</span>);</div><div class=\"line\"></div><div class=\"line\">String value = queue.take();</div></pre></td></tr></table></figure>\n<h3 id=\"同步队列SynchronousQueue\"><a href=\"#同步队列SynchronousQueue\" class=\"headerlink\" title=\"同步队列SynchronousQueue\"></a>同步队列SynchronousQueue</h3><p>SynchronousQueue 类实现了 BlockingQueue 接口。<br>SynchronousQueue 是一个特殊的队列，它的内部同时只能够容纳单个元素。如果该队列已有一元素的话，试图向队列中插入一个新元素的线程将会阻塞，直到另一个线程将该元素从队列中抽走。同样，如果该队列为空，试图向队列中抽取一个元素的线程将会阻塞，直到另一个线程向队列中插入了一条新的元素。<br>据此，把这个类称作一个队列显然是夸大其词了。它更多像是一个汇合点。</p>\n<h3 id=\"阻塞双端队列-BlockingDeque\"><a href=\"#阻塞双端队列-BlockingDeque\" class=\"headerlink\" title=\"阻塞双端队列 BlockingDeque\"></a>阻塞双端队列 BlockingDeque</h3><p>java.util.concurrent 包里的 BlockingDeque 接口表示一个线程安放入和提取实例的双端队列。本小节我将给你演示如何使用 BlockingDeque。<br>BlockingDeque 类是一个双端队列，在不能够插入元素时，它将阻塞住试图插入元素的线程；在不能够抽取元素时，它将阻塞住试图抽取的线程。<br>deque(双端队列) 是 “Double Ended Queue” 的缩写。因此，双端队列是一个你可以从任意一端插入或者抽取元素的队列。</p>\n<p><img src=\"http://img.blog.csdn.net/20150303084557477?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZGVmb25kcw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"BlockingDeque.png\"></p>\n<p>一个 BlockingDeque - 线程在双端队列的两端都可以插入和提取元素。<br>一个线程生产元素，并把它们插入到队列的任意一端。如果双端队列已满，插入线程将被阻塞，直到一个移除线程从该队列中移出了一个元素。如果双端队列为空，移除线程将被阻塞，直到一个插入线程向该队列插入了一个新元素。</p>\n<p>BlockingDeque 的方法<br>BlockingDeque 具有 4 组不同的方法用于插入、移除以及对双端队列中的元素进行检查。如果请求的操作不能得到立即执行的话，每个方法的表现也不同。这些方法如下：</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th style=\"text-align:center\">抛异常</th>\n<th style=\"text-align:center\">特定值</th>\n<th style=\"text-align:center\">阻塞</th>\n<th style=\"text-align:center\">超时</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>插入</td>\n<td style=\"text-align:center\">addFirst(o)</td>\n<td style=\"text-align:center\">offerFirst(o)</td>\n<td style=\"text-align:center\">putFirst(o)</td>\n<td style=\"text-align:center\">offerFirst(o, timeout, timeunit)</td>\n</tr>\n<tr>\n<td>移除</td>\n<td style=\"text-align:center\">removeFirst(o)</td>\n<td style=\"text-align:center\">pollFirst(o)</td>\n<td style=\"text-align:center\">takeFirst(o)</td>\n<td style=\"text-align:center\">pollFirst(timeout, timeunit)</td>\n</tr>\n<tr>\n<td>检查</td>\n<td style=\"text-align:center\">getFirst(o)</td>\n<td style=\"text-align:center\">peekFirst(o)</td>\n<td style=\"text-align:center\"></td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th></th>\n<th style=\"text-align:center\">抛异常</th>\n<th style=\"text-align:center\">特定值</th>\n<th style=\"text-align:center\">阻塞</th>\n<th style=\"text-align:center\">超时</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>插入</td>\n<td style=\"text-align:center\">addLast(o)</td>\n<td style=\"text-align:center\">offerLast(o)</td>\n<td style=\"text-align:center\">putLast(o)</td>\n<td style=\"text-align:center\">offerLast(o, timeout, timeunit)</td>\n</tr>\n<tr>\n<td>移除</td>\n<td style=\"text-align:center\">removeLast(o)</td>\n<td style=\"text-align:center\">pollLast(o)</td>\n<td style=\"text-align:center\">takeLast(o)</td>\n<td style=\"text-align:center\">pollLast(timeout, timeunit)</td>\n</tr>\n<tr>\n<td>检查</td>\n<td style=\"text-align:center\">getLast(o)</td>\n<td style=\"text-align:center\">peekLast(o)</td>\n<td style=\"text-align:center\"></td>\n</tr>\n</tbody>\n</table>\n<p>四组不同的行为方式解释：</p>\n<blockquote>\n<p>1.抛异常：如果试图的操作无法立即执行，抛一个异常。<br>2.特定值：如果试图的操作无法立即执行，返回一个特定的值(常常是 true / false)。<br>3.阻塞：如果试图的操作无法立即执行，该方法调用将会发生阻塞，直到能够执行。<br>4.超时：如果试图的操作无法立即执行，该方法调用将会发生阻塞，直到能够执行，但等待时间不会超过给定值。返回一个特定值以告知该操作是否成功(典型的是 true / false)。</p>\n</blockquote>\n<hr>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><ul>\n<li><a href=\"http://blog.csdn.net/defonds/article/details/44021605/\">Java 并发工具包 java.util.concurrent 用户指南</a></li>\n</ul>"},{"title":"博客更新步骤","comments":0,"copyright":true,"top":10,"abbrlink":"aeaaf0d9","date":"2018-02-25T07:14:47.000Z","_content":"\n## <center>博客更新步骤</center>\n\n### 如题。\n\n为了偷个懒，做个笔记\n\n> * exec ssh-agent bash\n> * eval ssh-agent -s\n> * ssh-add \"C:\\Users\\LN\\\\.ssh\\id_rsa\"\n> * git add .\n> * git commit -m 'update _post'\n> * git push origin\n> * hexo g -d\n","source":"_posts/2018-02-25-博客更新步骤.md","raw":"---\ntitle: 博客更新步骤\ncategories: 随笔\ntags:\n  - hexo\ncomments: false\ncopyright: true\ntop: 10\nabbrlink: aeaaf0d9\ndate: 2018-02-25 15:14:47\n---\n\n## <center>博客更新步骤</center>\n\n### 如题。\n\n为了偷个懒，做个笔记\n\n> * exec ssh-agent bash\n> * eval ssh-agent -s\n> * ssh-add \"C:\\Users\\LN\\\\.ssh\\id_rsa\"\n> * git add .\n> * git commit -m 'update _post'\n> * git push origin\n> * hexo g -d\n","slug":"博客更新步骤","published":1,"updated":"2018-02-26T10:02:45.885Z","layout":"post","photos":[],"link":"","_id":"cje7yhv3k000q7ku6rmo6hbdk","content":"<h2 id=\"博客更新步骤\"><a href=\"#博客更新步骤\" class=\"headerlink\" title=\"博客更新步骤\"></a><center>博客更新步骤</center></h2><h3 id=\"如题。\"><a href=\"#如题。\" class=\"headerlink\" title=\"如题。\"></a>如题。</h3><p>为了偷个懒，做个笔记</p>\n<blockquote>\n<ul>\n<li>exec ssh-agent bash</li>\n<li>eval ssh-agent -s</li>\n<li>ssh-add “C:\\Users\\LN\\.ssh\\id_rsa”</li>\n<li>git add .</li>\n<li>git commit -m ‘update _post’</li>\n<li>git push origin</li>\n<li>hexo g -d</li>\n</ul>\n</blockquote>\n","excerpt":"","more":"<h2 id=\"博客更新步骤\"><a href=\"#博客更新步骤\" class=\"headerlink\" title=\"博客更新步骤\"></a><center>博客更新步骤</center></h2><h3 id=\"如题。\"><a href=\"#如题。\" class=\"headerlink\" title=\"如题。\"></a>如题。</h3><p>为了偷个懒，做个笔记</p>\n<blockquote>\n<ul>\n<li>exec ssh-agent bash</li>\n<li>eval ssh-agent -s</li>\n<li>ssh-add “C:\\Users\\LN\\.ssh\\id_rsa”</li>\n<li>git add .</li>\n<li>git commit -m ‘update _post’</li>\n<li>git push origin</li>\n<li>hexo g -d</li>\n</ul>\n</blockquote>\n"},{"title":"记推送失败——git命令之ssh-add学习","comments":0,"copyright":true,"top":10,"abbrlink":"e8996bd7","date":"2017-11-09T02:51:05.000Z","_content":"\n## <center>推送失败——git命令学习</center>\n\n### 起因\n\n昨天更新文档推送设计模式的笔记，在git bash 命令框下输入以前的\n\n```bash\nhexo g -d\n```\n\n却给我报了个错误,**Could not open a connection to your authentication agent**，一翻百度发现解决方法如下：\n<!--more-->\n> 1.exec ssh-agent bash\n2.eval ssh-agent -s\n3.ssh-add \"C:\\Users\\LN\\.ssh\\id_rsa\"\n\n将相应的秘钥地址改为你自己的地址，然后就可以愉快的输入测试命令了\n\n```bash\nssh -T git@github.com\nssh -T git@git.coding.net\n```\n\n测试通过，ok，然后就可以输入部署命令了。\n\n### 参考文档\n- [win下给 Git Bash 添加私钥时ssh-add报错的解决办法](http://www.jianshu.com/p/1adbd697b249)","source":"_posts/2017-11-09-记推送失败——git命令之ssh-add学习.md","raw":"---\ntitle: 记推送失败——git命令之ssh-add学习\ncategories: 随笔\ntags:\n  - hexo\ncomments: false\ncopyright: true\ntop: 10\nabbrlink: e8996bd7\ndate: 2017-11-09 10:51:05\n---\n\n## <center>推送失败——git命令学习</center>\n\n### 起因\n\n昨天更新文档推送设计模式的笔记，在git bash 命令框下输入以前的\n\n```bash\nhexo g -d\n```\n\n却给我报了个错误,**Could not open a connection to your authentication agent**，一翻百度发现解决方法如下：\n<!--more-->\n> 1.exec ssh-agent bash\n2.eval ssh-agent -s\n3.ssh-add \"C:\\Users\\LN\\.ssh\\id_rsa\"\n\n将相应的秘钥地址改为你自己的地址，然后就可以愉快的输入测试命令了\n\n```bash\nssh -T git@github.com\nssh -T git@git.coding.net\n```\n\n测试通过，ok，然后就可以输入部署命令了。\n\n### 参考文档\n- [win下给 Git Bash 添加私钥时ssh-add报错的解决办法](http://www.jianshu.com/p/1adbd697b249)","slug":"记推送失败——git命令之ssh-add学习","published":1,"updated":"2018-02-26T10:00:54.927Z","layout":"post","photos":[],"link":"","_id":"cje7yhv3o000v7ku63eslljhi","content":"<h2 id=\"推送失败——git命令学习\"><a href=\"#推送失败——git命令学习\" class=\"headerlink\" title=\"推送失败——git命令学习\"></a><center>推送失败——git命令学习</center></h2><h3 id=\"起因\"><a href=\"#起因\" class=\"headerlink\" title=\"起因\"></a>起因</h3><p>昨天更新文档推送设计模式的笔记，在git bash 命令框下输入以前的</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo g <span class=\"_\">-d</span></div></pre></td></tr></table></figure>\n<p>却给我报了个错误,<strong>Could not open a connection to your authentication agent</strong>，一翻百度发现解决方法如下：<br><a id=\"more\"></a></p>\n<blockquote>\n<p>1.exec ssh-agent bash<br>2.eval ssh-agent -s<br>3.ssh-add “C:\\Users\\LN.ssh\\id_rsa”</p>\n</blockquote>\n<p>将相应的秘钥地址改为你自己的地址，然后就可以愉快的输入测试命令了</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">ssh -T git@github.com</div><div class=\"line\">ssh -T git@git.coding.net</div></pre></td></tr></table></figure>\n<p>测试通过，ok，然后就可以输入部署命令了。</p>\n<h3 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h3><ul>\n<li><a href=\"http://www.jianshu.com/p/1adbd697b249\" target=\"_blank\" rel=\"external\">win下给 Git Bash 添加私钥时ssh-add报错的解决办法</a></li>\n</ul>\n","excerpt":"<h2 id=\"推送失败——git命令学习\"><a href=\"#推送失败——git命令学习\" class=\"headerlink\" title=\"推送失败——git命令学习\"></a><center>推送失败——git命令学习</center></h2><h3 id=\"起因\"><a href=\"#起因\" class=\"headerlink\" title=\"起因\"></a>起因</h3><p>昨天更新文档推送设计模式的笔记，在git bash 命令框下输入以前的</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo g <span class=\"_\">-d</span></div></pre></td></tr></table></figure>\n<p>却给我报了个错误,<strong>Could not open a connection to your authentication agent</strong>，一翻百度发现解决方法如下：<br>","more":"</p>\n<blockquote>\n<p>1.exec ssh-agent bash<br>2.eval ssh-agent -s<br>3.ssh-add “C:\\Users\\LN.ssh\\id_rsa”</p>\n</blockquote>\n<p>将相应的秘钥地址改为你自己的地址，然后就可以愉快的输入测试命令了</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">ssh -T git@github.com</div><div class=\"line\">ssh -T git@git.coding.net</div></pre></td></tr></table></figure>\n<p>测试通过，ok，然后就可以输入部署命令了。</p>\n<h3 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h3><ul>\n<li><a href=\"http://www.jianshu.com/p/1adbd697b249\">win下给 Git Bash 添加私钥时ssh-add报错的解决办法</a></li>\n</ul>"},{"title":"java面试题","comments":0,"copyright":true,"top":10,"abbrlink":"1491d7b8","date":"2018-02-26T03:03:36.000Z","_content":"\n## <center>java面试题</center>\n\n* **Q**:对于依赖倒置原则（Dependency Inversion Principle，DIP），依赖注入（Dependency Injection，DI）和控制反转（Inversion of Control，IoC）容器，你是怎么理解的？\n\n  **A**\n  - **依赖倒置原则（Dependency Inversion Principle, DIP）** 这个设计准则某种程度上和依赖注入模式有些关联。DIP的出发点是：在应用开发中，高层模块不应当直接依赖低层模块。DIP并不意味着依赖注入。这个准则并没有讲到高层模块如何知道调用哪个低层模块。不过这一点通过实现工厂模式接口可以间接获知，或者通过类似Spring框架、Pico容器、Guice或者Apache HiveMind之类的loC容器实现依赖注入从而得知高层模块调用的具体哪个低层模块。\n\n  ![DIP.png](http://www.importnew.com/wp-content/uploads/2012/11/pic31.jpg)\n\n  DIP意味着：\n\n  1.**高层模块不应当依赖低层模块，它们都应当依赖抽象**。\n  2.**抽象不应该依赖具体实现。具体实现应该依赖抽象**。\n\n  应用这个准则后，高层模块并不直接同低层模块交互，而是通过一个抽象层来跟低层模块进行交互。这使得需求变更后增加的成本更加灵 活可控。这里有些实现DIP的示例代码片段。\n\n  首先定义抽象层：\n\n  ```java\n  package principle_dip2;\n    public interface AnimalHandler {\n    public abstract void handle( );\n    }\n  package principle_dip2;\n    public interface AnimalHelper {\n    public abstract void help( );\n    }\n    ```\n<!--more-->\n接着是依赖于抽象类而非具体实现的高层代码。\n\n```java\npackage principle_dip2;\npublic class CircusService {\n    AnimalHandler handler;\n    public void setHandler(AnimalHandler handler) {\n        this.handler = handler;\n    }\n    public void showStarts( ) {\n        //code omitted for brevity\n        handler.handle( );\n    }\n}\npackage principle_dip2;\npublic class TigerHandler implements AnimalHandler{\n    AnimalHelper helper;\n    public void setHelper(AnimalHelper helper) {\n        this.helper = helper;\n    }\n    public void handle( ){\n        //...\n        helper.help( );\n        //...\n    }\n}\npackage principle_dip2;\npublic class TigerHelper implements AnimalHelper{\n    public void help( ){\n        //......\n    }\n}\n```\n\n- **依赖注入模式（Dependency Injection）** ：在运行时将类的依赖注入到代码中。通过将依赖定义为接口，并将实现这个接口的实体类注入到主类的构造器中来实现这个模式。这允许程序员在不同的实现之间转换而不用去修改主类。依赖注入模式可以通过**单一责任原则（Single Responsibility Principle）SRP**来使得代码**高内聚（high cohesion）**，因为所依赖的通常都是完成独立的功能的对象，例如，（通过DAO进行）数据存取或（通过Service和Delegate类实现）业务服务。\n\n- **控制反转容器（Inversion of Control Container，IoC）** 是一个支持依赖注入的容器。这种方式下，可以采用一个中心容器，例如Spring框架，Guice或者HiveMind，来定义哪个依赖应该使用哪个实体类。Ioc的松耦合性可以带来更多的灵活性，并且在程序运行时更容易去切换到正确的依赖对象上。控制反转模式的基本概念是，不去实际生成对象，而是去定义如何生成对象。不用直接在代码中将模块和服务硬编码在一起，而是在配置文件中描述哪个模块需要哪个服务。容器（例如Spring框架这个IoC容器）会负责将这两者绑定起来。应用IoC的时候，某对象所需的依赖会在创建的时候通过外部实体传入，这些外部实体用来协调系统中的不同对象。也就是说，依赖是被注入到对象中去的。因此，IoC就是关于一个对象如何获得其协作对象的引用的一种责任反转机制。\n\nDI和IoC的真正强大之处在于，在运行时而非编译时绑定类间关系。例如，在Seam框架中，你可以对一个接口进行两种实现：真正的实现和模拟(mock)的实现，而在运行时根据某个属性、另一个文件存在与否或者某个优先值去决定真正调用哪一个实现。这尤其当你希望程序在不同场景下表现不同的行为时，这是非常好用的。DI和IoC的另外一个好处是，使得代码更容易进行单元测试。当然也有其他一些好处，例如，不用使用工厂或者单例模式就可以实现松耦合，其实现方法一致因此适合缺乏经验的程序员，等等。当然，享受这些好处是要付出代价的，例如系统复杂性会随之增加，另外在使用时也需要更加小心，不能因为这个技术受欢迎就滥用，而是在能够真正体现其优势的地方才去使用。\n\n注意：上下文依赖注入（Contexts and Dependency Injection）是用来描述标准依赖注入的一个尝试。CDI是Java EE 6 stack的一部分，也就是说任何一个运行在Java EE 6兼容容器之上的应用都可以轻松使用CDI。Weld就是CDI的一个可参考的实现。\n\n* **Q**: 以你的经验来看，为什么要选择使用Spring框架呢？\n\n **A**\n - Spring采用层次结构，有超过20个模块可供选用。这就意味着你可以根据需要自由取舍。Spring通过简单Java对象（Plain Old Java Object，POJO）编程简化了J2EE。在Spring中J2EE编程并没有什么特别的。POJO编程提供了代码的持续集成能力和易测性。\n\n ![spring.png](http://www.importnew.com/wp-content/uploads/2012/11/pic41.jpg)\n\n* Spring框架的核心功能是依赖注入（DI）。DI使得代码的单元测试更加方便、系统更好维护、代码也更加灵活。DI代码自身很容易测试，通过构建实现了应用所需的接口的“模拟”对象就可以进行功能的黑盒测试。DI代码也更容易复用，因为其“被依赖的”功能封装在在定义良好的接口中，允许其他对象根据需要将其插入到所需的对象中，这些对象是在其他应用平台中进行配置的。DI代码更加灵活，由于其天生的松耦合性，它允许程序员仅需考虑自己所需的接口和其他模块暴露出来的接口来就可以决定对象之间如何关联。\n\n* Spring支持面向切面编程（Aspect Oriented Programming ，AOP），允许通过分离应用业务逻辑和系统服务从而进行内聚性的开发。AOP支持审计（auditing）、搜集性能和内存指标等功能。\n\n* Spring还提供了许多实现基本功能的模板类，使得J2EE开发更加容易。例如，JdbcTemplate类和JDBC、JpaTemplate类和JPA，JmsTemplate类和JMS都可以很好地结合起来使用。RestTemplate类非常简洁，使用这个模板的代码的可读性和可维护性也都很好。\n\n* 尽量把中间层代码从业务逻辑中剥离出来是很重要的。最好的远程调用方式就是利用Spring的远程接口调用，这个功能支持使用任何消息或者远程技术来完成远程调用。Apache Camel是一个强大的基于已知的包括Bean集成的企业级集成模式的开源集成框架。Apache Camel设计之初就是为了尽可能的和Spring框架能够很好的结合使用。\n\n* Spring提供了声明性事务处理，工作调度，身份认证，成熟的MVC web框架以及和其他框架的集成，例如Hibernate、iBatis、JasperReports、JSF、Struts、Tapestry、Seam和Quartz job scheduler等等。\n\n* Spring bean对象可以通过Terracotta在不同的JVM之间共享。这就允许使用已有的bean并在集群中共享 ，将Spring应用上下文事件变为分布式事件，还可以通过Spring JMX导出集群bean，使得Spring应用高可用、集群化。Spring还可以和其他集群应用方案集成起来，例如Oracle的Coherance。\n\n* Spring倾向于使用未检查异常（unchecked exceptions）和减少不当try，catch和finally代码块（或者finally中的try/catch块）。像JpaTemplate 这样的Spring模板类会负责关闭或释放数据库连接，这避免了潜在的资源泄露问题并提高了代码的可读性。\n\n* 在非Spring或者Guice这种DI框架中，工厂模式和单例模式可以用来提高代码的松耦合度。使用了Spring可以有效避免这些模式的滥用。\n\n**Q**: IoC中支持的依赖注入有哪些类型？\n\n**A** 依赖注入有三种类型：\n\n* 构造子注入（例如，Spring框架）：依赖是通过构造器参数提供的。\n* 设值方法注入（例如，Spring框架）：依赖是通过JavaBeans属性注入的（ex：setter方法）\n* 接口注入（例如，Avalon）：注入通过接口完成。","source":"_posts/2018-02-26-java面试题.md","raw":"---\ntitle: java面试题\ncategories: java\ntags:\n  - java面试\ncomments: false\ncopyright: true\ntop: 10\nabbrlink: 1491d7b8\ndate: 2018-02-26 11:03:36\n---\n\n## <center>java面试题</center>\n\n* **Q**:对于依赖倒置原则（Dependency Inversion Principle，DIP），依赖注入（Dependency Injection，DI）和控制反转（Inversion of Control，IoC）容器，你是怎么理解的？\n\n  **A**\n  - **依赖倒置原则（Dependency Inversion Principle, DIP）** 这个设计准则某种程度上和依赖注入模式有些关联。DIP的出发点是：在应用开发中，高层模块不应当直接依赖低层模块。DIP并不意味着依赖注入。这个准则并没有讲到高层模块如何知道调用哪个低层模块。不过这一点通过实现工厂模式接口可以间接获知，或者通过类似Spring框架、Pico容器、Guice或者Apache HiveMind之类的loC容器实现依赖注入从而得知高层模块调用的具体哪个低层模块。\n\n  ![DIP.png](http://www.importnew.com/wp-content/uploads/2012/11/pic31.jpg)\n\n  DIP意味着：\n\n  1.**高层模块不应当依赖低层模块，它们都应当依赖抽象**。\n  2.**抽象不应该依赖具体实现。具体实现应该依赖抽象**。\n\n  应用这个准则后，高层模块并不直接同低层模块交互，而是通过一个抽象层来跟低层模块进行交互。这使得需求变更后增加的成本更加灵 活可控。这里有些实现DIP的示例代码片段。\n\n  首先定义抽象层：\n\n  ```java\n  package principle_dip2;\n    public interface AnimalHandler {\n    public abstract void handle( );\n    }\n  package principle_dip2;\n    public interface AnimalHelper {\n    public abstract void help( );\n    }\n    ```\n<!--more-->\n接着是依赖于抽象类而非具体实现的高层代码。\n\n```java\npackage principle_dip2;\npublic class CircusService {\n    AnimalHandler handler;\n    public void setHandler(AnimalHandler handler) {\n        this.handler = handler;\n    }\n    public void showStarts( ) {\n        //code omitted for brevity\n        handler.handle( );\n    }\n}\npackage principle_dip2;\npublic class TigerHandler implements AnimalHandler{\n    AnimalHelper helper;\n    public void setHelper(AnimalHelper helper) {\n        this.helper = helper;\n    }\n    public void handle( ){\n        //...\n        helper.help( );\n        //...\n    }\n}\npackage principle_dip2;\npublic class TigerHelper implements AnimalHelper{\n    public void help( ){\n        //......\n    }\n}\n```\n\n- **依赖注入模式（Dependency Injection）** ：在运行时将类的依赖注入到代码中。通过将依赖定义为接口，并将实现这个接口的实体类注入到主类的构造器中来实现这个模式。这允许程序员在不同的实现之间转换而不用去修改主类。依赖注入模式可以通过**单一责任原则（Single Responsibility Principle）SRP**来使得代码**高内聚（high cohesion）**，因为所依赖的通常都是完成独立的功能的对象，例如，（通过DAO进行）数据存取或（通过Service和Delegate类实现）业务服务。\n\n- **控制反转容器（Inversion of Control Container，IoC）** 是一个支持依赖注入的容器。这种方式下，可以采用一个中心容器，例如Spring框架，Guice或者HiveMind，来定义哪个依赖应该使用哪个实体类。Ioc的松耦合性可以带来更多的灵活性，并且在程序运行时更容易去切换到正确的依赖对象上。控制反转模式的基本概念是，不去实际生成对象，而是去定义如何生成对象。不用直接在代码中将模块和服务硬编码在一起，而是在配置文件中描述哪个模块需要哪个服务。容器（例如Spring框架这个IoC容器）会负责将这两者绑定起来。应用IoC的时候，某对象所需的依赖会在创建的时候通过外部实体传入，这些外部实体用来协调系统中的不同对象。也就是说，依赖是被注入到对象中去的。因此，IoC就是关于一个对象如何获得其协作对象的引用的一种责任反转机制。\n\nDI和IoC的真正强大之处在于，在运行时而非编译时绑定类间关系。例如，在Seam框架中，你可以对一个接口进行两种实现：真正的实现和模拟(mock)的实现，而在运行时根据某个属性、另一个文件存在与否或者某个优先值去决定真正调用哪一个实现。这尤其当你希望程序在不同场景下表现不同的行为时，这是非常好用的。DI和IoC的另外一个好处是，使得代码更容易进行单元测试。当然也有其他一些好处，例如，不用使用工厂或者单例模式就可以实现松耦合，其实现方法一致因此适合缺乏经验的程序员，等等。当然，享受这些好处是要付出代价的，例如系统复杂性会随之增加，另外在使用时也需要更加小心，不能因为这个技术受欢迎就滥用，而是在能够真正体现其优势的地方才去使用。\n\n注意：上下文依赖注入（Contexts and Dependency Injection）是用来描述标准依赖注入的一个尝试。CDI是Java EE 6 stack的一部分，也就是说任何一个运行在Java EE 6兼容容器之上的应用都可以轻松使用CDI。Weld就是CDI的一个可参考的实现。\n\n* **Q**: 以你的经验来看，为什么要选择使用Spring框架呢？\n\n **A**\n - Spring采用层次结构，有超过20个模块可供选用。这就意味着你可以根据需要自由取舍。Spring通过简单Java对象（Plain Old Java Object，POJO）编程简化了J2EE。在Spring中J2EE编程并没有什么特别的。POJO编程提供了代码的持续集成能力和易测性。\n\n ![spring.png](http://www.importnew.com/wp-content/uploads/2012/11/pic41.jpg)\n\n* Spring框架的核心功能是依赖注入（DI）。DI使得代码的单元测试更加方便、系统更好维护、代码也更加灵活。DI代码自身很容易测试，通过构建实现了应用所需的接口的“模拟”对象就可以进行功能的黑盒测试。DI代码也更容易复用，因为其“被依赖的”功能封装在在定义良好的接口中，允许其他对象根据需要将其插入到所需的对象中，这些对象是在其他应用平台中进行配置的。DI代码更加灵活，由于其天生的松耦合性，它允许程序员仅需考虑自己所需的接口和其他模块暴露出来的接口来就可以决定对象之间如何关联。\n\n* Spring支持面向切面编程（Aspect Oriented Programming ，AOP），允许通过分离应用业务逻辑和系统服务从而进行内聚性的开发。AOP支持审计（auditing）、搜集性能和内存指标等功能。\n\n* Spring还提供了许多实现基本功能的模板类，使得J2EE开发更加容易。例如，JdbcTemplate类和JDBC、JpaTemplate类和JPA，JmsTemplate类和JMS都可以很好地结合起来使用。RestTemplate类非常简洁，使用这个模板的代码的可读性和可维护性也都很好。\n\n* 尽量把中间层代码从业务逻辑中剥离出来是很重要的。最好的远程调用方式就是利用Spring的远程接口调用，这个功能支持使用任何消息或者远程技术来完成远程调用。Apache Camel是一个强大的基于已知的包括Bean集成的企业级集成模式的开源集成框架。Apache Camel设计之初就是为了尽可能的和Spring框架能够很好的结合使用。\n\n* Spring提供了声明性事务处理，工作调度，身份认证，成熟的MVC web框架以及和其他框架的集成，例如Hibernate、iBatis、JasperReports、JSF、Struts、Tapestry、Seam和Quartz job scheduler等等。\n\n* Spring bean对象可以通过Terracotta在不同的JVM之间共享。这就允许使用已有的bean并在集群中共享 ，将Spring应用上下文事件变为分布式事件，还可以通过Spring JMX导出集群bean，使得Spring应用高可用、集群化。Spring还可以和其他集群应用方案集成起来，例如Oracle的Coherance。\n\n* Spring倾向于使用未检查异常（unchecked exceptions）和减少不当try，catch和finally代码块（或者finally中的try/catch块）。像JpaTemplate 这样的Spring模板类会负责关闭或释放数据库连接，这避免了潜在的资源泄露问题并提高了代码的可读性。\n\n* 在非Spring或者Guice这种DI框架中，工厂模式和单例模式可以用来提高代码的松耦合度。使用了Spring可以有效避免这些模式的滥用。\n\n**Q**: IoC中支持的依赖注入有哪些类型？\n\n**A** 依赖注入有三种类型：\n\n* 构造子注入（例如，Spring框架）：依赖是通过构造器参数提供的。\n* 设值方法注入（例如，Spring框架）：依赖是通过JavaBeans属性注入的（ex：setter方法）\n* 接口注入（例如，Avalon）：注入通过接口完成。","slug":"java面试题","published":1,"updated":"2018-02-26T10:02:58.695Z","layout":"post","photos":[],"link":"","_id":"cje7yhv3q000x7ku68hpgl24e","content":"<h2 id=\"java面试题\"><a href=\"#java面试题\" class=\"headerlink\" title=\"java面试题\"></a><center>java面试题</center></h2><ul>\n<li><p><strong>Q</strong>:对于依赖倒置原则（Dependency Inversion Principle，DIP），依赖注入（Dependency Injection，DI）和控制反转（Inversion of Control，IoC）容器，你是怎么理解的？</p>\n<p><strong>A</strong></p>\n<ul>\n<li><strong>依赖倒置原则（Dependency Inversion Principle, DIP）</strong> 这个设计准则某种程度上和依赖注入模式有些关联。DIP的出发点是：在应用开发中，高层模块不应当直接依赖低层模块。DIP并不意味着依赖注入。这个准则并没有讲到高层模块如何知道调用哪个低层模块。不过这一点通过实现工厂模式接口可以间接获知，或者通过类似Spring框架、Pico容器、Guice或者Apache HiveMind之类的loC容器实现依赖注入从而得知高层模块调用的具体哪个低层模块。</li>\n</ul>\n<p><img src=\"http://www.importnew.com/wp-content/uploads/2012/11/pic31.jpg\" alt=\"DIP.png\"></p>\n<p>DIP意味着：</p>\n<p>1.<strong>高层模块不应当依赖低层模块，它们都应当依赖抽象</strong>。<br>2.<strong>抽象不应该依赖具体实现。具体实现应该依赖抽象</strong>。</p>\n<p>应用这个准则后，高层模块并不直接同低层模块交互，而是通过一个抽象层来跟低层模块进行交互。这使得需求变更后增加的成本更加灵 活可控。这里有些实现DIP的示例代码片段。</p>\n<p>首先定义抽象层：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> principle_dip2;</div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">AnimalHandler</span> </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">handle</span><span class=\"params\">( )</span></span>;</div><div class=\"line\">  &#125;</div><div class=\"line\"><span class=\"keyword\">package</span> principle_dip2;</div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">AnimalHelper</span> </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">help</span><span class=\"params\">( )</span></span>;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<a id=\"more\"></a>\n<p>接着是依赖于抽象类而非具体实现的高层代码。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> principle_dip2;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CircusService</span> </span>&#123;</div><div class=\"line\">    AnimalHandler handler;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setHandler</span><span class=\"params\">(AnimalHandler handler)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.handler = handler;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">showStarts</span><span class=\"params\">( )</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">//code omitted for brevity</span></div><div class=\"line\">        handler.handle( );</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">package</span> principle_dip2;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TigerHandler</span> <span class=\"keyword\">implements</span> <span class=\"title\">AnimalHandler</span></span>&#123;</div><div class=\"line\">    AnimalHelper helper;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setHelper</span><span class=\"params\">(AnimalHelper helper)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.helper = helper;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handle</span><span class=\"params\">( )</span></span>&#123;</div><div class=\"line\">        <span class=\"comment\">//...</span></div><div class=\"line\">        helper.help( );</div><div class=\"line\">        <span class=\"comment\">//...</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">package</span> principle_dip2;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TigerHelper</span> <span class=\"keyword\">implements</span> <span class=\"title\">AnimalHelper</span></span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">help</span><span class=\"params\">( )</span></span>&#123;</div><div class=\"line\">        <span class=\"comment\">//......</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li><p><strong>依赖注入模式（Dependency Injection）</strong> ：在运行时将类的依赖注入到代码中。通过将依赖定义为接口，并将实现这个接口的实体类注入到主类的构造器中来实现这个模式。这允许程序员在不同的实现之间转换而不用去修改主类。依赖注入模式可以通过<strong>单一责任原则（Single Responsibility Principle）SRP</strong>来使得代码<strong>高内聚（high cohesion）</strong>，因为所依赖的通常都是完成独立的功能的对象，例如，（通过DAO进行）数据存取或（通过Service和Delegate类实现）业务服务。</p>\n</li>\n<li><p><strong>控制反转容器（Inversion of Control Container，IoC）</strong> 是一个支持依赖注入的容器。这种方式下，可以采用一个中心容器，例如Spring框架，Guice或者HiveMind，来定义哪个依赖应该使用哪个实体类。Ioc的松耦合性可以带来更多的灵活性，并且在程序运行时更容易去切换到正确的依赖对象上。控制反转模式的基本概念是，不去实际生成对象，而是去定义如何生成对象。不用直接在代码中将模块和服务硬编码在一起，而是在配置文件中描述哪个模块需要哪个服务。容器（例如Spring框架这个IoC容器）会负责将这两者绑定起来。应用IoC的时候，某对象所需的依赖会在创建的时候通过外部实体传入，这些外部实体用来协调系统中的不同对象。也就是说，依赖是被注入到对象中去的。因此，IoC就是关于一个对象如何获得其协作对象的引用的一种责任反转机制。</p>\n</li>\n</ul>\n<p>DI和IoC的真正强大之处在于，在运行时而非编译时绑定类间关系。例如，在Seam框架中，你可以对一个接口进行两种实现：真正的实现和模拟(mock)的实现，而在运行时根据某个属性、另一个文件存在与否或者某个优先值去决定真正调用哪一个实现。这尤其当你希望程序在不同场景下表现不同的行为时，这是非常好用的。DI和IoC的另外一个好处是，使得代码更容易进行单元测试。当然也有其他一些好处，例如，不用使用工厂或者单例模式就可以实现松耦合，其实现方法一致因此适合缺乏经验的程序员，等等。当然，享受这些好处是要付出代价的，例如系统复杂性会随之增加，另外在使用时也需要更加小心，不能因为这个技术受欢迎就滥用，而是在能够真正体现其优势的地方才去使用。</p>\n<p>注意：上下文依赖注入（Contexts and Dependency Injection）是用来描述标准依赖注入的一个尝试。CDI是Java EE 6 stack的一部分，也就是说任何一个运行在Java EE 6兼容容器之上的应用都可以轻松使用CDI。Weld就是CDI的一个可参考的实现。</p>\n<ul>\n<li><p><strong>Q</strong>: 以你的经验来看，为什么要选择使用Spring框架呢？</p>\n<p><strong>A</strong></p>\n<ul>\n<li>Spring采用层次结构，有超过20个模块可供选用。这就意味着你可以根据需要自由取舍。Spring通过简单Java对象（Plain Old Java Object，POJO）编程简化了J2EE。在Spring中J2EE编程并没有什么特别的。POJO编程提供了代码的持续集成能力和易测性。</li>\n</ul>\n<p><img src=\"http://www.importnew.com/wp-content/uploads/2012/11/pic41.jpg\" alt=\"spring.png\"></p>\n</li>\n<li><p>Spring框架的核心功能是依赖注入（DI）。DI使得代码的单元测试更加方便、系统更好维护、代码也更加灵活。DI代码自身很容易测试，通过构建实现了应用所需的接口的“模拟”对象就可以进行功能的黑盒测试。DI代码也更容易复用，因为其“被依赖的”功能封装在在定义良好的接口中，允许其他对象根据需要将其插入到所需的对象中，这些对象是在其他应用平台中进行配置的。DI代码更加灵活，由于其天生的松耦合性，它允许程序员仅需考虑自己所需的接口和其他模块暴露出来的接口来就可以决定对象之间如何关联。</p>\n</li>\n<li><p>Spring支持面向切面编程（Aspect Oriented Programming ，AOP），允许通过分离应用业务逻辑和系统服务从而进行内聚性的开发。AOP支持审计（auditing）、搜集性能和内存指标等功能。</p>\n</li>\n<li><p>Spring还提供了许多实现基本功能的模板类，使得J2EE开发更加容易。例如，JdbcTemplate类和JDBC、JpaTemplate类和JPA，JmsTemplate类和JMS都可以很好地结合起来使用。RestTemplate类非常简洁，使用这个模板的代码的可读性和可维护性也都很好。</p>\n</li>\n<li><p>尽量把中间层代码从业务逻辑中剥离出来是很重要的。最好的远程调用方式就是利用Spring的远程接口调用，这个功能支持使用任何消息或者远程技术来完成远程调用。Apache Camel是一个强大的基于已知的包括Bean集成的企业级集成模式的开源集成框架。Apache Camel设计之初就是为了尽可能的和Spring框架能够很好的结合使用。</p>\n</li>\n<li><p>Spring提供了声明性事务处理，工作调度，身份认证，成熟的MVC web框架以及和其他框架的集成，例如Hibernate、iBatis、JasperReports、JSF、Struts、Tapestry、Seam和Quartz job scheduler等等。</p>\n</li>\n<li><p>Spring bean对象可以通过Terracotta在不同的JVM之间共享。这就允许使用已有的bean并在集群中共享 ，将Spring应用上下文事件变为分布式事件，还可以通过Spring JMX导出集群bean，使得Spring应用高可用、集群化。Spring还可以和其他集群应用方案集成起来，例如Oracle的Coherance。</p>\n</li>\n<li><p>Spring倾向于使用未检查异常（unchecked exceptions）和减少不当try，catch和finally代码块（或者finally中的try/catch块）。像JpaTemplate 这样的Spring模板类会负责关闭或释放数据库连接，这避免了潜在的资源泄露问题并提高了代码的可读性。</p>\n</li>\n<li><p>在非Spring或者Guice这种DI框架中，工厂模式和单例模式可以用来提高代码的松耦合度。使用了Spring可以有效避免这些模式的滥用。</p>\n</li>\n</ul>\n<p><strong>Q</strong>: IoC中支持的依赖注入有哪些类型？</p>\n<p><strong>A</strong> 依赖注入有三种类型：</p>\n<ul>\n<li>构造子注入（例如，Spring框架）：依赖是通过构造器参数提供的。</li>\n<li>设值方法注入（例如，Spring框架）：依赖是通过JavaBeans属性注入的（ex：setter方法）</li>\n<li>接口注入（例如，Avalon）：注入通过接口完成。</li>\n</ul>\n","excerpt":"<h2 id=\"java面试题\"><a href=\"#java面试题\" class=\"headerlink\" title=\"java面试题\"></a><center>java面试题</center></h2><ul>\n<li><p><strong>Q</strong>:对于依赖倒置原则（Dependency Inversion Principle，DIP），依赖注入（Dependency Injection，DI）和控制反转（Inversion of Control，IoC）容器，你是怎么理解的？</p>\n<p><strong>A</strong></p>\n<ul>\n<li><strong>依赖倒置原则（Dependency Inversion Principle, DIP）</strong> 这个设计准则某种程度上和依赖注入模式有些关联。DIP的出发点是：在应用开发中，高层模块不应当直接依赖低层模块。DIP并不意味着依赖注入。这个准则并没有讲到高层模块如何知道调用哪个低层模块。不过这一点通过实现工厂模式接口可以间接获知，或者通过类似Spring框架、Pico容器、Guice或者Apache HiveMind之类的loC容器实现依赖注入从而得知高层模块调用的具体哪个低层模块。</li>\n</ul>\n<p><img src=\"http://www.importnew.com/wp-content/uploads/2012/11/pic31.jpg\" alt=\"DIP.png\"></p>\n<p>DIP意味着：</p>\n<p>1.<strong>高层模块不应当依赖低层模块，它们都应当依赖抽象</strong>。<br>2.<strong>抽象不应该依赖具体实现。具体实现应该依赖抽象</strong>。</p>\n<p>应用这个准则后，高层模块并不直接同低层模块交互，而是通过一个抽象层来跟低层模块进行交互。这使得需求变更后增加的成本更加灵 活可控。这里有些实现DIP的示例代码片段。</p>\n<p>首先定义抽象层：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> principle_dip2;</div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">AnimalHandler</span> </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">handle</span><span class=\"params\">( )</span></span>;</div><div class=\"line\">  &#125;</div><div class=\"line\"><span class=\"keyword\">package</span> principle_dip2;</div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">AnimalHelper</span> </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">help</span><span class=\"params\">( )</span></span>;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>","more":"<p>接着是依赖于抽象类而非具体实现的高层代码。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> principle_dip2;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CircusService</span> </span>&#123;</div><div class=\"line\">    AnimalHandler handler;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setHandler</span><span class=\"params\">(AnimalHandler handler)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.handler = handler;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">showStarts</span><span class=\"params\">( )</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">//code omitted for brevity</span></div><div class=\"line\">        handler.handle( );</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">package</span> principle_dip2;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TigerHandler</span> <span class=\"keyword\">implements</span> <span class=\"title\">AnimalHandler</span></span>&#123;</div><div class=\"line\">    AnimalHelper helper;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setHelper</span><span class=\"params\">(AnimalHelper helper)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.helper = helper;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handle</span><span class=\"params\">( )</span></span>&#123;</div><div class=\"line\">        <span class=\"comment\">//...</span></div><div class=\"line\">        helper.help( );</div><div class=\"line\">        <span class=\"comment\">//...</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">package</span> principle_dip2;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TigerHelper</span> <span class=\"keyword\">implements</span> <span class=\"title\">AnimalHelper</span></span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">help</span><span class=\"params\">( )</span></span>&#123;</div><div class=\"line\">        <span class=\"comment\">//......</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li><p><strong>依赖注入模式（Dependency Injection）</strong> ：在运行时将类的依赖注入到代码中。通过将依赖定义为接口，并将实现这个接口的实体类注入到主类的构造器中来实现这个模式。这允许程序员在不同的实现之间转换而不用去修改主类。依赖注入模式可以通过<strong>单一责任原则（Single Responsibility Principle）SRP</strong>来使得代码<strong>高内聚（high cohesion）</strong>，因为所依赖的通常都是完成独立的功能的对象，例如，（通过DAO进行）数据存取或（通过Service和Delegate类实现）业务服务。</p>\n</li>\n<li><p><strong>控制反转容器（Inversion of Control Container，IoC）</strong> 是一个支持依赖注入的容器。这种方式下，可以采用一个中心容器，例如Spring框架，Guice或者HiveMind，来定义哪个依赖应该使用哪个实体类。Ioc的松耦合性可以带来更多的灵活性，并且在程序运行时更容易去切换到正确的依赖对象上。控制反转模式的基本概念是，不去实际生成对象，而是去定义如何生成对象。不用直接在代码中将模块和服务硬编码在一起，而是在配置文件中描述哪个模块需要哪个服务。容器（例如Spring框架这个IoC容器）会负责将这两者绑定起来。应用IoC的时候，某对象所需的依赖会在创建的时候通过外部实体传入，这些外部实体用来协调系统中的不同对象。也就是说，依赖是被注入到对象中去的。因此，IoC就是关于一个对象如何获得其协作对象的引用的一种责任反转机制。</p>\n</li>\n</ul>\n<p>DI和IoC的真正强大之处在于，在运行时而非编译时绑定类间关系。例如，在Seam框架中，你可以对一个接口进行两种实现：真正的实现和模拟(mock)的实现，而在运行时根据某个属性、另一个文件存在与否或者某个优先值去决定真正调用哪一个实现。这尤其当你希望程序在不同场景下表现不同的行为时，这是非常好用的。DI和IoC的另外一个好处是，使得代码更容易进行单元测试。当然也有其他一些好处，例如，不用使用工厂或者单例模式就可以实现松耦合，其实现方法一致因此适合缺乏经验的程序员，等等。当然，享受这些好处是要付出代价的，例如系统复杂性会随之增加，另外在使用时也需要更加小心，不能因为这个技术受欢迎就滥用，而是在能够真正体现其优势的地方才去使用。</p>\n<p>注意：上下文依赖注入（Contexts and Dependency Injection）是用来描述标准依赖注入的一个尝试。CDI是Java EE 6 stack的一部分，也就是说任何一个运行在Java EE 6兼容容器之上的应用都可以轻松使用CDI。Weld就是CDI的一个可参考的实现。</p>\n<ul>\n<li><p><strong>Q</strong>: 以你的经验来看，为什么要选择使用Spring框架呢？</p>\n<p><strong>A</strong></p>\n<ul>\n<li>Spring采用层次结构，有超过20个模块可供选用。这就意味着你可以根据需要自由取舍。Spring通过简单Java对象（Plain Old Java Object，POJO）编程简化了J2EE。在Spring中J2EE编程并没有什么特别的。POJO编程提供了代码的持续集成能力和易测性。</li>\n</ul>\n<p><img src=\"http://www.importnew.com/wp-content/uploads/2012/11/pic41.jpg\" alt=\"spring.png\"></p>\n</li>\n<li><p>Spring框架的核心功能是依赖注入（DI）。DI使得代码的单元测试更加方便、系统更好维护、代码也更加灵活。DI代码自身很容易测试，通过构建实现了应用所需的接口的“模拟”对象就可以进行功能的黑盒测试。DI代码也更容易复用，因为其“被依赖的”功能封装在在定义良好的接口中，允许其他对象根据需要将其插入到所需的对象中，这些对象是在其他应用平台中进行配置的。DI代码更加灵活，由于其天生的松耦合性，它允许程序员仅需考虑自己所需的接口和其他模块暴露出来的接口来就可以决定对象之间如何关联。</p>\n</li>\n<li><p>Spring支持面向切面编程（Aspect Oriented Programming ，AOP），允许通过分离应用业务逻辑和系统服务从而进行内聚性的开发。AOP支持审计（auditing）、搜集性能和内存指标等功能。</p>\n</li>\n<li><p>Spring还提供了许多实现基本功能的模板类，使得J2EE开发更加容易。例如，JdbcTemplate类和JDBC、JpaTemplate类和JPA，JmsTemplate类和JMS都可以很好地结合起来使用。RestTemplate类非常简洁，使用这个模板的代码的可读性和可维护性也都很好。</p>\n</li>\n<li><p>尽量把中间层代码从业务逻辑中剥离出来是很重要的。最好的远程调用方式就是利用Spring的远程接口调用，这个功能支持使用任何消息或者远程技术来完成远程调用。Apache Camel是一个强大的基于已知的包括Bean集成的企业级集成模式的开源集成框架。Apache Camel设计之初就是为了尽可能的和Spring框架能够很好的结合使用。</p>\n</li>\n<li><p>Spring提供了声明性事务处理，工作调度，身份认证，成熟的MVC web框架以及和其他框架的集成，例如Hibernate、iBatis、JasperReports、JSF、Struts、Tapestry、Seam和Quartz job scheduler等等。</p>\n</li>\n<li><p>Spring bean对象可以通过Terracotta在不同的JVM之间共享。这就允许使用已有的bean并在集群中共享 ，将Spring应用上下文事件变为分布式事件，还可以通过Spring JMX导出集群bean，使得Spring应用高可用、集群化。Spring还可以和其他集群应用方案集成起来，例如Oracle的Coherance。</p>\n</li>\n<li><p>Spring倾向于使用未检查异常（unchecked exceptions）和减少不当try，catch和finally代码块（或者finally中的try/catch块）。像JpaTemplate 这样的Spring模板类会负责关闭或释放数据库连接，这避免了潜在的资源泄露问题并提高了代码的可读性。</p>\n</li>\n<li><p>在非Spring或者Guice这种DI框架中，工厂模式和单例模式可以用来提高代码的松耦合度。使用了Spring可以有效避免这些模式的滥用。</p>\n</li>\n</ul>\n<p><strong>Q</strong>: IoC中支持的依赖注入有哪些类型？</p>\n<p><strong>A</strong> 依赖注入有三种类型：</p>\n<ul>\n<li>构造子注入（例如，Spring框架）：依赖是通过构造器参数提供的。</li>\n<li>设值方法注入（例如，Spring框架）：依赖是通过JavaBeans属性注入的（ex：setter方法）</li>\n<li>接口注入（例如，Avalon）：注入通过接口完成。</li>\n</ul>"},{"title":"18书单与学习计划","comments":0,"copyright":true,"top":10,"abbrlink":"5e98de26","date":"2018-03-01T02:39:22.000Z","_content":"\n## <center>18书单和学习计划</center>\n\n### 书单\n\n* 《Java编程思想》\n  &nbsp;&nbsp;\n  > 深刻理解java中的基础核心思想。\n------\n\n* 《effective java》\n  &nbsp;&nbsp;\n  > 养成良好代码习惯，改善编码能力\n\n<!--more-->\n\n* 《java8实战》\n  &nbsp;&nbsp;\n  > 熟悉和掌握java8中新特性以及lambda表达式等\n\n* 《java编程的逻辑》\n  &nbsp;&nbsp;\n  > java 基础核心（待购买）\n\n后面书单待续\n\n### 学习计划\n\n> 只是个初略的学习方向和计划，并没有太多详细的规划，希望自己能好好做到吧，18年提升自己的能力多一点。\n\n**java**：基础更加要打好，javaNIO,并发包等系列知识的学习。\n相关框架原理代码的初步浏览。\n\n**python**：用来自我学习相关爬虫和大数据相关的知识。\n参考链接：\n  * [根据python入门大数据系列](https://mp.weixin.qq.com/s/hd50KSm3x4_SjWFeSxYOvQ)\n  * [莫烦python](https://morvanzhou.github.io/)\n\n**nodejs AND VUE AND docker**：偶尔折腾系列\n\n后续计划待续、、、、\n\n### 你会实现的么\n\n**会**","source":"_posts/2018-03-01-18书单与学习计划.md","raw":"---\ntitle: 18书单与学习计划\ncategories: 随笔\ntags:\n  - java\n  - 书单\n  - 计划\ncomments: false\ncopyright: true\ntop: 10\nabbrlink: 5e98de26\ndate: 2018-03-01 10:39:22\n---\n\n## <center>18书单和学习计划</center>\n\n### 书单\n\n* 《Java编程思想》\n  &nbsp;&nbsp;\n  > 深刻理解java中的基础核心思想。\n------\n\n* 《effective java》\n  &nbsp;&nbsp;\n  > 养成良好代码习惯，改善编码能力\n\n<!--more-->\n\n* 《java8实战》\n  &nbsp;&nbsp;\n  > 熟悉和掌握java8中新特性以及lambda表达式等\n\n* 《java编程的逻辑》\n  &nbsp;&nbsp;\n  > java 基础核心（待购买）\n\n后面书单待续\n\n### 学习计划\n\n> 只是个初略的学习方向和计划，并没有太多详细的规划，希望自己能好好做到吧，18年提升自己的能力多一点。\n\n**java**：基础更加要打好，javaNIO,并发包等系列知识的学习。\n相关框架原理代码的初步浏览。\n\n**python**：用来自我学习相关爬虫和大数据相关的知识。\n参考链接：\n  * [根据python入门大数据系列](https://mp.weixin.qq.com/s/hd50KSm3x4_SjWFeSxYOvQ)\n  * [莫烦python](https://morvanzhou.github.io/)\n\n**nodejs AND VUE AND docker**：偶尔折腾系列\n\n后续计划待续、、、、\n\n### 你会实现的么\n\n**会**","slug":"18书单与学习计划","published":1,"updated":"2018-03-05T03:43:08.508Z","_id":"cje7yhv3r00127ku6gav2q4e2","layout":"post","photos":[],"link":"","content":"<h2 id=\"18书单和学习计划\"><a href=\"#18书单和学习计划\" class=\"headerlink\" title=\"18书单和学习计划\"></a><center>18书单和学习计划</center></h2><h3 id=\"书单\"><a href=\"#书单\" class=\"headerlink\" title=\"书单\"></a>书单</h3><ul>\n<li>《Java编程思想》<br>&nbsp;&nbsp;<blockquote>\n<p>深刻理解java中的基础核心思想。</p>\n</blockquote>\n</li>\n</ul>\n<hr>\n<ul>\n<li>《effective java》<br>&nbsp;&nbsp;<blockquote>\n<p>养成良好代码习惯，改善编码能力</p>\n</blockquote>\n</li>\n</ul>\n<a id=\"more\"></a>\n<ul>\n<li><p>《java8实战》<br>&nbsp;&nbsp;</p>\n<blockquote>\n<p>熟悉和掌握java8中新特性以及lambda表达式等</p>\n</blockquote>\n</li>\n<li><p>《java编程的逻辑》<br>&nbsp;&nbsp;</p>\n<blockquote>\n<p>java 基础核心（待购买）</p>\n</blockquote>\n</li>\n</ul>\n<p>后面书单待续</p>\n<h3 id=\"学习计划\"><a href=\"#学习计划\" class=\"headerlink\" title=\"学习计划\"></a>学习计划</h3><blockquote>\n<p>只是个初略的学习方向和计划，并没有太多详细的规划，希望自己能好好做到吧，18年提升自己的能力多一点。</p>\n</blockquote>\n<p><strong>java</strong>：基础更加要打好，javaNIO,并发包等系列知识的学习。<br>相关框架原理代码的初步浏览。</p>\n<p><strong>python</strong>：用来自我学习相关爬虫和大数据相关的知识。<br>参考链接：</p>\n<ul>\n<li><a href=\"https://mp.weixin.qq.com/s/hd50KSm3x4_SjWFeSxYOvQ\" target=\"_blank\" rel=\"external\">根据python入门大数据系列</a></li>\n<li><a href=\"https://morvanzhou.github.io/\" target=\"_blank\" rel=\"external\">莫烦python</a></li>\n</ul>\n<p><strong>nodejs AND VUE AND docker</strong>：偶尔折腾系列</p>\n<p>后续计划待续、、、、</p>\n<h3 id=\"你会实现的么\"><a href=\"#你会实现的么\" class=\"headerlink\" title=\"你会实现的么\"></a>你会实现的么</h3><p><strong>会</strong></p>\n","excerpt":"<h2 id=\"18书单和学习计划\"><a href=\"#18书单和学习计划\" class=\"headerlink\" title=\"18书单和学习计划\"></a><center>18书单和学习计划</center></h2><h3 id=\"书单\"><a href=\"#书单\" class=\"headerlink\" title=\"书单\"></a>书单</h3><ul>\n<li>《Java编程思想》<br>&nbsp;&nbsp;<blockquote>\n<p>深刻理解java中的基础核心思想。</p>\n</blockquote>\n</li>\n</ul>\n<hr>\n<ul>\n<li>《effective java》<br>&nbsp;&nbsp;<blockquote>\n<p>养成良好代码习惯，改善编码能力</p>\n</blockquote>\n</li>\n</ul>","more":"<ul>\n<li><p>《java8实战》<br>&nbsp;&nbsp;</p>\n<blockquote>\n<p>熟悉和掌握java8中新特性以及lambda表达式等</p>\n</blockquote>\n</li>\n<li><p>《java编程的逻辑》<br>&nbsp;&nbsp;</p>\n<blockquote>\n<p>java 基础核心（待购买）</p>\n</blockquote>\n</li>\n</ul>\n<p>后面书单待续</p>\n<h3 id=\"学习计划\"><a href=\"#学习计划\" class=\"headerlink\" title=\"学习计划\"></a>学习计划</h3><blockquote>\n<p>只是个初略的学习方向和计划，并没有太多详细的规划，希望自己能好好做到吧，18年提升自己的能力多一点。</p>\n</blockquote>\n<p><strong>java</strong>：基础更加要打好，javaNIO,并发包等系列知识的学习。<br>相关框架原理代码的初步浏览。</p>\n<p><strong>python</strong>：用来自我学习相关爬虫和大数据相关的知识。<br>参考链接：</p>\n<ul>\n<li><a href=\"https://mp.weixin.qq.com/s/hd50KSm3x4_SjWFeSxYOvQ\">根据python入门大数据系列</a></li>\n<li><a href=\"https://morvanzhou.github.io/\">莫烦python</a></li>\n</ul>\n<p><strong>nodejs AND VUE AND docker</strong>：偶尔折腾系列</p>\n<p>后续计划待续、、、、</p>\n<h3 id=\"你会实现的么\"><a href=\"#你会实现的么\" class=\"headerlink\" title=\"你会实现的么\"></a>你会实现的么</h3><p><strong>会</strong></p>"},{"title":"java23种设计模式概括","comments":0,"copyright":true,"top":10,"abbrlink":"5c9c5ce0","date":"2018-02-24T03:06:09.000Z","_content":"\n## <center>java 23种设计模式概括</ceter>\n\n### 目录概览\n\n#### 创建型模式：关注对象的创建过程\n\n* [单例模式](http://www.cnblogs.com/meet/p/5116398.html)：**保证一个类只有一个实例，并且提供一个访问该实例的全局访问点**\n主要：\n饿汉式（线程安全，调用效率高，但是不能延时加载）\n懒汉式（线程安全，调用效率不高，但是可以延时加载）\n其他：\n双重检测锁式（由于JVM底层内部模型原因，偶尔会出问题。不建议使用）\n静态内部类式（线程安全，调用效率高。但是可以延时加载）\n枚举单例（线程安全，调用效率高，不能延时加载）\n\n* [工厂模式](http://www.cnblogs.com/meet/p/5116400.html)：\n简单工厂模式：用来生产同一等级结构中的任意产品（对已有产品新增功能，需要修改源代码）\n虽然能通过工厂来创建对象，但是违反了开闭原则。一旦增加功能需要在原有基础上修改代码。\n工厂方法模式：用来生产同一等级结构中的固定产品（支持增加任意产品，不用修改源代码）\n将工厂类调整为工厂接口，需要什么类型的工厂就使用该类实现该工厂，创建相应的产品。\n\n* [抽象工厂模式](http://www.cnblogs.com/meet/p/5116400.html)：用来生产不同产品族的全部产品（对于增加新的产品，无能为力。可增加一系列的产品族）抽象工厂模式用来生产不同产品族的全部产品，对于只增加产品某一部分则不适用。抽象工厂模式是工厂模式的一种升级版本。\n\n* [建造者​模式](http://www.cnblogs.com/meet/p/5116401.html)：**分离了对象子组件的单独构造（由Builder来负责构建，由Director来负责组装），从而可以构造出复杂的对象**。\n假如一个对象的构建很复杂，需要很多步骤。如果使用了建造者模式，会将其构建对象，和组装成一个对象这两步给分开来构建部分为（builder）和组织部分（director），实现了构建和装配的解耦。\n<!--more-->\n\n* [原型模式](http://www.cnblogs.com/meet/p/5116404.html)：通过new产生一个对象需要非常繁琐的数据准备或访问权限，则可以使用原型模式。\n所谓原型模式就是构建一个对象的原型，通过原型来创建出新的对象。\n\n#### 行为型模式：关注系统中对象之间的相互交互，研究系统在运行时对象之间的相互通信和协作，进一步明确对象的职责。\n\n* [模板方法模式](http://www.cnblogs.com/meet/p/5116417.html)：**定义一个操作中的算法骨架，而将一些步骤延迟到子类中。模板方法使得子类可以不改变一个算法的结构即可重定义该算法的\n某些特定步骤**。也就是说：假如某些操作代码基本相同，只是其中一部分会经常改变，则可以使用模板方法，将不变的部分作为一个模板，将容易变动的部分让子类来实现。\n\n* [命令模式](http://www.cnblogs.com/meet/p/5116430.html)（不常用）：将一个请求封装为一个对象，从而使你可用不同的请求对客户进行参数化，对请求排队或记录请求日志。以及支持可撤销的操作。说白了，就是将一系列的请求命令封装起来，不直接调用真正执行者的方法，这样比较好扩展。\n\n* [迭代器模式](http://www.cnblogs.com/meet/p/5116437.html)：提供一种方法顺序的访问一个聚合对象中各个元素，而又不暴露该对象的内部表示。也就是开发一个用于迭代某个对象中元素的功能。\n\n* [观察者模式](http://www.cnblogs.com/meet/p/5116411.html)：**也叫（发布-订阅模式）定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个主题对象，这个主题对象在状态发生变化时，会通知所有观察者对象。使它们能够自动更新自己**。例如：发广播，游戏中大喇叭，群聊。jdk中提供了抽象主题和抽象观察者的接口，我们可以使用这两个接口来方便的定义自己的观察者模式\n\n* [中介者模式](http://www.cnblogs.com/meet/p/5116432.html)：用一个中介对象来封装一系列的对象交互，中介者使各对象不需要显示地相互引用。从而使其耦合松散，而且可以独立地改变它们之间的交互。中介者模式核心：1.就是将网状结构处理成星型结构 2.将多对多处理成一对多\n\n* [备忘录模式](http://www.cnblogs.com/meet/p/5116407.html)：在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。这样以后就可将该对象恢复到原先保存的状态。也就是说，不破坏源数据的情况下，将源数据进行一次或者多次的备份。\n\n* [解释器模式](http://www.cnblogs.com/meet/p/5116424.html)（不常用）：给定一个语言，定义它的文法一种表示。并定义一个解释器，这个解释器使用该表示来解释语言中的句子。\n\n* [状态模式](http://www.cnblogs.com/meet/p/5116415.html)：当一个对象的内在状态改变时允许改变其行为，这个对象看起来像是改变了其类。状态模式主要解决的是当控制一个对象状态转换的条件表达式过于复杂时的情况。当遇到不同的状态遇到不同的行为的时候，可以使用状态模式。例如：酒店房间的状态，是空闲，预定，还是已入住呢？而且这三种状态都对应着不同的行为，空闲的话就可预定，可预定的话就可入住，已入住的话就不能显示空闲。\n\n* [策略模式](http://www.cnblogs.com/meet/p/5116419.html)：它定义了算法家族，分别封装起来，让它们之间可以互相替换，此模式让算法的变化不会影响到使用算法的客户。例如：商场中的打折商品，针对不同的客户可能有不同的折扣。那这些算法该怎么定义呢？可以使用策略模式，给每个会员或者商品都指定一个特定的算法，根据不同的算法，打不同的折扣。\n\n* [职责链模式](http://www.cnblogs.com/meet/p/5116440.html)：将能够处理同一类请求的对象连成一条链，使这些对象都有机会处理请求，所提交的请求沿着链传递。从而避免请求的发送者和接受者之间的耦合关系。链上的对象逐个判断是否有能力处理该请求，如果能则就处理，如果不能，则传给链上的下一个对象。直到有一个对象处理它为止。比如：请假申请，审批人连成一条链，每个人都有机会处理这个假条，但是这个请假申请最终肯定会经过审核（不管审批是否通过）。\n\n* [访问者模式](http://www.cnblogs.com/meet/p/5116422.html)（不常用）：表示一个作用于某对象结构中的各元素的操作。它使你可以在不改变各元素的类的前提下定义作用于这些元素的新操作。\n\n#### 结构型模式：关注对象和类的组织\n\n* [适配器模式](http://www.cnblogs.com/meet/p/5116467.html)：将一个类的接口转换成客户希望的另外一个接口。Adapter模式使得原本由于接口不兼容而不能一起工作的类可以一起工作。例如：NBA中的球员来自不同国家，而世界标准语言是英语。那他们不会英语，也不能各自学习所有国家的语言。所以，最好的办法就是请不同的翻译,将这些球员国家的语言翻译成英语。而这些翻译就是适配器！！\n适配器模式分类：\n1、类适配器模式（不推荐使用）：由于类适配器模式需要多重继承对一个接口对另一个接口进行适配，而C#,Java不支持多重继承。\n2、对象适配器模式：采用组合的方式\n\n* [桥接模式](http://www.cnblogs.com/meet/p/5116458.html)：将抽象部分与它的实现部分分离，使它们都可以独立的变化。而不会直接影响到其他部分。桥接模式解决了多层继承的结构，处理多维度变化的场景，将各个维度设计成独立的继承结构。使各个维度可以独立的扩展在抽象层建立联系。\n\n* [装饰模式](http://www.cnblogs.com/meet/p/5116450.html)：也叫装饰者模式或者装饰器模式，表示动态的给一个对象添加一些新的功能（利用子类继承父类也可以实现），但是比生成子类方式更灵活。例如：我们每个人身上穿的衣服，鞋子，领带，披风都可以理解为是对人的装饰。\n\n* [组合模式](http://www.cnblogs.com/meet/p/5116455.html)：将对象组合成树形结构以表示：部分--整体 的层次结构。组合模式使得用户对单个对象和组合对象的使用具有一致性。基本上见到的树形结构都使用到了组合模式。\n\n* [外观模式](http://www.cnblogs.com/meet/p/5116447.html)：为子系统中的一组接口提供一个一致的界面，此模式定义了一个高层接口。这个接口使得这一子系统更加容易使用。遵守迪米特法则（最少知识原则）。说白了，就可以理解为封装。外观模式的核心：为子系统提供统一的入口，封装子系统的复杂性，便于客户端调用\n\n* [享元模式](http://www.cnblogs.com/meet/p/5116445.html)：运用共享技术有效的支持大量细粒度对象的重用。它能做到共享的关键就是区分了内部状态（可以共享，不会随环境变化而变化）和外部状态（不可以共享，会随环境变化而变化）。如果项目中有很多完全相同或相似的对象，则可以使用享元模式，节省内存。\n\n* [代理模式](http://www.cnblogs.com/meet/p/5116464.html)：为其他对象提供一种代理以便控制对这个对象的访问。可以详细控制访问某个类（对象）的方法，在调用这个方法前作的前置处理（统一的流程代码放到代理中处理）。调用这个方法后做后置处理。例如：明星的经纪人，租房的中介等等都是代理\n代理模式分类：\n1.静态代理（静态定义代理类，我们自己静态定义的代理类。比如我们自己定义一个明星的经纪人类）\n2.动态代理（通过程序动态生成代理类，该代理类不是我们自己定义的。而是由程序自动生成）比较重要！！\n\n#### 参考资料\n\n- 大话设计模式(带目录完整版).pdf\n\n- HEAD_FIRST设计模式（中文版）.pdf\n\n- 尚学堂_高淇_java300集最全视频教程_【GOF23设计模式】\n\n- [FangZheng - 博客园](http://www.cnblogs.com/meet/p/5116504.html)","source":"_posts/2018-02-24-java23种设计模式概括.md","raw":"---\ntitle: java23种设计模式概括\ncategories: 设计模式\ntags:\n  - 设计模式\ncomments: false\ncopyright: true\ntop: 10\nabbrlink: 5c9c5ce0\ndate: 2018-02-24 11:06:09\n---\n\n## <center>java 23种设计模式概括</ceter>\n\n### 目录概览\n\n#### 创建型模式：关注对象的创建过程\n\n* [单例模式](http://www.cnblogs.com/meet/p/5116398.html)：**保证一个类只有一个实例，并且提供一个访问该实例的全局访问点**\n主要：\n饿汉式（线程安全，调用效率高，但是不能延时加载）\n懒汉式（线程安全，调用效率不高，但是可以延时加载）\n其他：\n双重检测锁式（由于JVM底层内部模型原因，偶尔会出问题。不建议使用）\n静态内部类式（线程安全，调用效率高。但是可以延时加载）\n枚举单例（线程安全，调用效率高，不能延时加载）\n\n* [工厂模式](http://www.cnblogs.com/meet/p/5116400.html)：\n简单工厂模式：用来生产同一等级结构中的任意产品（对已有产品新增功能，需要修改源代码）\n虽然能通过工厂来创建对象，但是违反了开闭原则。一旦增加功能需要在原有基础上修改代码。\n工厂方法模式：用来生产同一等级结构中的固定产品（支持增加任意产品，不用修改源代码）\n将工厂类调整为工厂接口，需要什么类型的工厂就使用该类实现该工厂，创建相应的产品。\n\n* [抽象工厂模式](http://www.cnblogs.com/meet/p/5116400.html)：用来生产不同产品族的全部产品（对于增加新的产品，无能为力。可增加一系列的产品族）抽象工厂模式用来生产不同产品族的全部产品，对于只增加产品某一部分则不适用。抽象工厂模式是工厂模式的一种升级版本。\n\n* [建造者​模式](http://www.cnblogs.com/meet/p/5116401.html)：**分离了对象子组件的单独构造（由Builder来负责构建，由Director来负责组装），从而可以构造出复杂的对象**。\n假如一个对象的构建很复杂，需要很多步骤。如果使用了建造者模式，会将其构建对象，和组装成一个对象这两步给分开来构建部分为（builder）和组织部分（director），实现了构建和装配的解耦。\n<!--more-->\n\n* [原型模式](http://www.cnblogs.com/meet/p/5116404.html)：通过new产生一个对象需要非常繁琐的数据准备或访问权限，则可以使用原型模式。\n所谓原型模式就是构建一个对象的原型，通过原型来创建出新的对象。\n\n#### 行为型模式：关注系统中对象之间的相互交互，研究系统在运行时对象之间的相互通信和协作，进一步明确对象的职责。\n\n* [模板方法模式](http://www.cnblogs.com/meet/p/5116417.html)：**定义一个操作中的算法骨架，而将一些步骤延迟到子类中。模板方法使得子类可以不改变一个算法的结构即可重定义该算法的\n某些特定步骤**。也就是说：假如某些操作代码基本相同，只是其中一部分会经常改变，则可以使用模板方法，将不变的部分作为一个模板，将容易变动的部分让子类来实现。\n\n* [命令模式](http://www.cnblogs.com/meet/p/5116430.html)（不常用）：将一个请求封装为一个对象，从而使你可用不同的请求对客户进行参数化，对请求排队或记录请求日志。以及支持可撤销的操作。说白了，就是将一系列的请求命令封装起来，不直接调用真正执行者的方法，这样比较好扩展。\n\n* [迭代器模式](http://www.cnblogs.com/meet/p/5116437.html)：提供一种方法顺序的访问一个聚合对象中各个元素，而又不暴露该对象的内部表示。也就是开发一个用于迭代某个对象中元素的功能。\n\n* [观察者模式](http://www.cnblogs.com/meet/p/5116411.html)：**也叫（发布-订阅模式）定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个主题对象，这个主题对象在状态发生变化时，会通知所有观察者对象。使它们能够自动更新自己**。例如：发广播，游戏中大喇叭，群聊。jdk中提供了抽象主题和抽象观察者的接口，我们可以使用这两个接口来方便的定义自己的观察者模式\n\n* [中介者模式](http://www.cnblogs.com/meet/p/5116432.html)：用一个中介对象来封装一系列的对象交互，中介者使各对象不需要显示地相互引用。从而使其耦合松散，而且可以独立地改变它们之间的交互。中介者模式核心：1.就是将网状结构处理成星型结构 2.将多对多处理成一对多\n\n* [备忘录模式](http://www.cnblogs.com/meet/p/5116407.html)：在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。这样以后就可将该对象恢复到原先保存的状态。也就是说，不破坏源数据的情况下，将源数据进行一次或者多次的备份。\n\n* [解释器模式](http://www.cnblogs.com/meet/p/5116424.html)（不常用）：给定一个语言，定义它的文法一种表示。并定义一个解释器，这个解释器使用该表示来解释语言中的句子。\n\n* [状态模式](http://www.cnblogs.com/meet/p/5116415.html)：当一个对象的内在状态改变时允许改变其行为，这个对象看起来像是改变了其类。状态模式主要解决的是当控制一个对象状态转换的条件表达式过于复杂时的情况。当遇到不同的状态遇到不同的行为的时候，可以使用状态模式。例如：酒店房间的状态，是空闲，预定，还是已入住呢？而且这三种状态都对应着不同的行为，空闲的话就可预定，可预定的话就可入住，已入住的话就不能显示空闲。\n\n* [策略模式](http://www.cnblogs.com/meet/p/5116419.html)：它定义了算法家族，分别封装起来，让它们之间可以互相替换，此模式让算法的变化不会影响到使用算法的客户。例如：商场中的打折商品，针对不同的客户可能有不同的折扣。那这些算法该怎么定义呢？可以使用策略模式，给每个会员或者商品都指定一个特定的算法，根据不同的算法，打不同的折扣。\n\n* [职责链模式](http://www.cnblogs.com/meet/p/5116440.html)：将能够处理同一类请求的对象连成一条链，使这些对象都有机会处理请求，所提交的请求沿着链传递。从而避免请求的发送者和接受者之间的耦合关系。链上的对象逐个判断是否有能力处理该请求，如果能则就处理，如果不能，则传给链上的下一个对象。直到有一个对象处理它为止。比如：请假申请，审批人连成一条链，每个人都有机会处理这个假条，但是这个请假申请最终肯定会经过审核（不管审批是否通过）。\n\n* [访问者模式](http://www.cnblogs.com/meet/p/5116422.html)（不常用）：表示一个作用于某对象结构中的各元素的操作。它使你可以在不改变各元素的类的前提下定义作用于这些元素的新操作。\n\n#### 结构型模式：关注对象和类的组织\n\n* [适配器模式](http://www.cnblogs.com/meet/p/5116467.html)：将一个类的接口转换成客户希望的另外一个接口。Adapter模式使得原本由于接口不兼容而不能一起工作的类可以一起工作。例如：NBA中的球员来自不同国家，而世界标准语言是英语。那他们不会英语，也不能各自学习所有国家的语言。所以，最好的办法就是请不同的翻译,将这些球员国家的语言翻译成英语。而这些翻译就是适配器！！\n适配器模式分类：\n1、类适配器模式（不推荐使用）：由于类适配器模式需要多重继承对一个接口对另一个接口进行适配，而C#,Java不支持多重继承。\n2、对象适配器模式：采用组合的方式\n\n* [桥接模式](http://www.cnblogs.com/meet/p/5116458.html)：将抽象部分与它的实现部分分离，使它们都可以独立的变化。而不会直接影响到其他部分。桥接模式解决了多层继承的结构，处理多维度变化的场景，将各个维度设计成独立的继承结构。使各个维度可以独立的扩展在抽象层建立联系。\n\n* [装饰模式](http://www.cnblogs.com/meet/p/5116450.html)：也叫装饰者模式或者装饰器模式，表示动态的给一个对象添加一些新的功能（利用子类继承父类也可以实现），但是比生成子类方式更灵活。例如：我们每个人身上穿的衣服，鞋子，领带，披风都可以理解为是对人的装饰。\n\n* [组合模式](http://www.cnblogs.com/meet/p/5116455.html)：将对象组合成树形结构以表示：部分--整体 的层次结构。组合模式使得用户对单个对象和组合对象的使用具有一致性。基本上见到的树形结构都使用到了组合模式。\n\n* [外观模式](http://www.cnblogs.com/meet/p/5116447.html)：为子系统中的一组接口提供一个一致的界面，此模式定义了一个高层接口。这个接口使得这一子系统更加容易使用。遵守迪米特法则（最少知识原则）。说白了，就可以理解为封装。外观模式的核心：为子系统提供统一的入口，封装子系统的复杂性，便于客户端调用\n\n* [享元模式](http://www.cnblogs.com/meet/p/5116445.html)：运用共享技术有效的支持大量细粒度对象的重用。它能做到共享的关键就是区分了内部状态（可以共享，不会随环境变化而变化）和外部状态（不可以共享，会随环境变化而变化）。如果项目中有很多完全相同或相似的对象，则可以使用享元模式，节省内存。\n\n* [代理模式](http://www.cnblogs.com/meet/p/5116464.html)：为其他对象提供一种代理以便控制对这个对象的访问。可以详细控制访问某个类（对象）的方法，在调用这个方法前作的前置处理（统一的流程代码放到代理中处理）。调用这个方法后做后置处理。例如：明星的经纪人，租房的中介等等都是代理\n代理模式分类：\n1.静态代理（静态定义代理类，我们自己静态定义的代理类。比如我们自己定义一个明星的经纪人类）\n2.动态代理（通过程序动态生成代理类，该代理类不是我们自己定义的。而是由程序自动生成）比较重要！！\n\n#### 参考资料\n\n- 大话设计模式(带目录完整版).pdf\n\n- HEAD_FIRST设计模式（中文版）.pdf\n\n- 尚学堂_高淇_java300集最全视频教程_【GOF23设计模式】\n\n- [FangZheng - 博客园](http://www.cnblogs.com/meet/p/5116504.html)","slug":"java23种设计模式概括","published":1,"updated":"2018-02-26T10:02:12.628Z","layout":"post","photos":[],"link":"","_id":"cje7yhv3x00147ku60ycxy0gy","content":"<h2 id=\"java-23种设计模式概括\"><a href=\"#java-23种设计模式概括\" class=\"headerlink\" title=\"java 23种设计模式概括\"></a><center>java 23种设计模式概括</center></h2><h3 id=\"目录概览\"><a href=\"#目录概览\" class=\"headerlink\" title=\"目录概览\"></a>目录概览</h3><h4 id=\"创建型模式：关注对象的创建过程\"><a href=\"#创建型模式：关注对象的创建过程\" class=\"headerlink\" title=\"创建型模式：关注对象的创建过程\"></a>创建型模式：关注对象的创建过程</h4><ul>\n<li><p><a href=\"http://www.cnblogs.com/meet/p/5116398.html\" target=\"_blank\" rel=\"external\">单例模式</a>：<strong>保证一个类只有一个实例，并且提供一个访问该实例的全局访问点</strong><br>主要：<br>饿汉式（线程安全，调用效率高，但是不能延时加载）<br>懒汉式（线程安全，调用效率不高，但是可以延时加载）<br>其他：<br>双重检测锁式（由于JVM底层内部模型原因，偶尔会出问题。不建议使用）<br>静态内部类式（线程安全，调用效率高。但是可以延时加载）<br>枚举单例（线程安全，调用效率高，不能延时加载）</p>\n</li>\n<li><p><a href=\"http://www.cnblogs.com/meet/p/5116400.html\" target=\"_blank\" rel=\"external\">工厂模式</a>：<br>简单工厂模式：用来生产同一等级结构中的任意产品（对已有产品新增功能，需要修改源代码）<br>虽然能通过工厂来创建对象，但是违反了开闭原则。一旦增加功能需要在原有基础上修改代码。<br>工厂方法模式：用来生产同一等级结构中的固定产品（支持增加任意产品，不用修改源代码）<br>将工厂类调整为工厂接口，需要什么类型的工厂就使用该类实现该工厂，创建相应的产品。</p>\n</li>\n<li><p><a href=\"http://www.cnblogs.com/meet/p/5116400.html\" target=\"_blank\" rel=\"external\">抽象工厂模式</a>：用来生产不同产品族的全部产品（对于增加新的产品，无能为力。可增加一系列的产品族）抽象工厂模式用来生产不同产品族的全部产品，对于只增加产品某一部分则不适用。抽象工厂模式是工厂模式的一种升级版本。</p>\n</li>\n<li><p><a href=\"http://www.cnblogs.com/meet/p/5116401.html\" target=\"_blank\" rel=\"external\">建造者​模式</a>：<strong>分离了对象子组件的单独构造（由Builder来负责构建，由Director来负责组装），从而可以构造出复杂的对象</strong>。<br>假如一个对象的构建很复杂，需要很多步骤。如果使用了建造者模式，会将其构建对象，和组装成一个对象这两步给分开来构建部分为（builder）和组织部分（director），实现了构建和装配的解耦。</p>\n<a id=\"more\"></a>\n</li>\n<li><p><a href=\"http://www.cnblogs.com/meet/p/5116404.html\" target=\"_blank\" rel=\"external\">原型模式</a>：通过new产生一个对象需要非常繁琐的数据准备或访问权限，则可以使用原型模式。<br>所谓原型模式就是构建一个对象的原型，通过原型来创建出新的对象。</p>\n</li>\n</ul>\n<h4 id=\"行为型模式：关注系统中对象之间的相互交互，研究系统在运行时对象之间的相互通信和协作，进一步明确对象的职责。\"><a href=\"#行为型模式：关注系统中对象之间的相互交互，研究系统在运行时对象之间的相互通信和协作，进一步明确对象的职责。\" class=\"headerlink\" title=\"行为型模式：关注系统中对象之间的相互交互，研究系统在运行时对象之间的相互通信和协作，进一步明确对象的职责。\"></a>行为型模式：关注系统中对象之间的相互交互，研究系统在运行时对象之间的相互通信和协作，进一步明确对象的职责。</h4><ul>\n<li><p><a href=\"http://www.cnblogs.com/meet/p/5116417.html\" target=\"_blank\" rel=\"external\">模板方法模式</a>：<strong>定义一个操作中的算法骨架，而将一些步骤延迟到子类中。模板方法使得子类可以不改变一个算法的结构即可重定义该算法的<br>某些特定步骤</strong>。也就是说：假如某些操作代码基本相同，只是其中一部分会经常改变，则可以使用模板方法，将不变的部分作为一个模板，将容易变动的部分让子类来实现。</p>\n</li>\n<li><p><a href=\"http://www.cnblogs.com/meet/p/5116430.html\" target=\"_blank\" rel=\"external\">命令模式</a>（不常用）：将一个请求封装为一个对象，从而使你可用不同的请求对客户进行参数化，对请求排队或记录请求日志。以及支持可撤销的操作。说白了，就是将一系列的请求命令封装起来，不直接调用真正执行者的方法，这样比较好扩展。</p>\n</li>\n<li><p><a href=\"http://www.cnblogs.com/meet/p/5116437.html\" target=\"_blank\" rel=\"external\">迭代器模式</a>：提供一种方法顺序的访问一个聚合对象中各个元素，而又不暴露该对象的内部表示。也就是开发一个用于迭代某个对象中元素的功能。</p>\n</li>\n<li><p><a href=\"http://www.cnblogs.com/meet/p/5116411.html\" target=\"_blank\" rel=\"external\">观察者模式</a>：<strong>也叫（发布-订阅模式）定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个主题对象，这个主题对象在状态发生变化时，会通知所有观察者对象。使它们能够自动更新自己</strong>。例如：发广播，游戏中大喇叭，群聊。jdk中提供了抽象主题和抽象观察者的接口，我们可以使用这两个接口来方便的定义自己的观察者模式</p>\n</li>\n<li><p><a href=\"http://www.cnblogs.com/meet/p/5116432.html\" target=\"_blank\" rel=\"external\">中介者模式</a>：用一个中介对象来封装一系列的对象交互，中介者使各对象不需要显示地相互引用。从而使其耦合松散，而且可以独立地改变它们之间的交互。中介者模式核心：1.就是将网状结构处理成星型结构 2.将多对多处理成一对多</p>\n</li>\n<li><p><a href=\"http://www.cnblogs.com/meet/p/5116407.html\" target=\"_blank\" rel=\"external\">备忘录模式</a>：在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。这样以后就可将该对象恢复到原先保存的状态。也就是说，不破坏源数据的情况下，将源数据进行一次或者多次的备份。</p>\n</li>\n<li><p><a href=\"http://www.cnblogs.com/meet/p/5116424.html\" target=\"_blank\" rel=\"external\">解释器模式</a>（不常用）：给定一个语言，定义它的文法一种表示。并定义一个解释器，这个解释器使用该表示来解释语言中的句子。</p>\n</li>\n<li><p><a href=\"http://www.cnblogs.com/meet/p/5116415.html\" target=\"_blank\" rel=\"external\">状态模式</a>：当一个对象的内在状态改变时允许改变其行为，这个对象看起来像是改变了其类。状态模式主要解决的是当控制一个对象状态转换的条件表达式过于复杂时的情况。当遇到不同的状态遇到不同的行为的时候，可以使用状态模式。例如：酒店房间的状态，是空闲，预定，还是已入住呢？而且这三种状态都对应着不同的行为，空闲的话就可预定，可预定的话就可入住，已入住的话就不能显示空闲。</p>\n</li>\n<li><p><a href=\"http://www.cnblogs.com/meet/p/5116419.html\" target=\"_blank\" rel=\"external\">策略模式</a>：它定义了算法家族，分别封装起来，让它们之间可以互相替换，此模式让算法的变化不会影响到使用算法的客户。例如：商场中的打折商品，针对不同的客户可能有不同的折扣。那这些算法该怎么定义呢？可以使用策略模式，给每个会员或者商品都指定一个特定的算法，根据不同的算法，打不同的折扣。</p>\n</li>\n<li><p><a href=\"http://www.cnblogs.com/meet/p/5116440.html\" target=\"_blank\" rel=\"external\">职责链模式</a>：将能够处理同一类请求的对象连成一条链，使这些对象都有机会处理请求，所提交的请求沿着链传递。从而避免请求的发送者和接受者之间的耦合关系。链上的对象逐个判断是否有能力处理该请求，如果能则就处理，如果不能，则传给链上的下一个对象。直到有一个对象处理它为止。比如：请假申请，审批人连成一条链，每个人都有机会处理这个假条，但是这个请假申请最终肯定会经过审核（不管审批是否通过）。</p>\n</li>\n<li><p><a href=\"http://www.cnblogs.com/meet/p/5116422.html\" target=\"_blank\" rel=\"external\">访问者模式</a>（不常用）：表示一个作用于某对象结构中的各元素的操作。它使你可以在不改变各元素的类的前提下定义作用于这些元素的新操作。</p>\n</li>\n</ul>\n<h4 id=\"结构型模式：关注对象和类的组织\"><a href=\"#结构型模式：关注对象和类的组织\" class=\"headerlink\" title=\"结构型模式：关注对象和类的组织\"></a>结构型模式：关注对象和类的组织</h4><ul>\n<li><p><a href=\"http://www.cnblogs.com/meet/p/5116467.html\" target=\"_blank\" rel=\"external\">适配器模式</a>：将一个类的接口转换成客户希望的另外一个接口。Adapter模式使得原本由于接口不兼容而不能一起工作的类可以一起工作。例如：NBA中的球员来自不同国家，而世界标准语言是英语。那他们不会英语，也不能各自学习所有国家的语言。所以，最好的办法就是请不同的翻译,将这些球员国家的语言翻译成英语。而这些翻译就是适配器！！<br>适配器模式分类：<br>1、类适配器模式（不推荐使用）：由于类适配器模式需要多重继承对一个接口对另一个接口进行适配，而C#,Java不支持多重继承。<br>2、对象适配器模式：采用组合的方式</p>\n</li>\n<li><p><a href=\"http://www.cnblogs.com/meet/p/5116458.html\" target=\"_blank\" rel=\"external\">桥接模式</a>：将抽象部分与它的实现部分分离，使它们都可以独立的变化。而不会直接影响到其他部分。桥接模式解决了多层继承的结构，处理多维度变化的场景，将各个维度设计成独立的继承结构。使各个维度可以独立的扩展在抽象层建立联系。</p>\n</li>\n<li><p><a href=\"http://www.cnblogs.com/meet/p/5116450.html\" target=\"_blank\" rel=\"external\">装饰模式</a>：也叫装饰者模式或者装饰器模式，表示动态的给一个对象添加一些新的功能（利用子类继承父类也可以实现），但是比生成子类方式更灵活。例如：我们每个人身上穿的衣服，鞋子，领带，披风都可以理解为是对人的装饰。</p>\n</li>\n<li><p><a href=\"http://www.cnblogs.com/meet/p/5116455.html\" target=\"_blank\" rel=\"external\">组合模式</a>：将对象组合成树形结构以表示：部分–整体 的层次结构。组合模式使得用户对单个对象和组合对象的使用具有一致性。基本上见到的树形结构都使用到了组合模式。</p>\n</li>\n<li><p><a href=\"http://www.cnblogs.com/meet/p/5116447.html\" target=\"_blank\" rel=\"external\">外观模式</a>：为子系统中的一组接口提供一个一致的界面，此模式定义了一个高层接口。这个接口使得这一子系统更加容易使用。遵守迪米特法则（最少知识原则）。说白了，就可以理解为封装。外观模式的核心：为子系统提供统一的入口，封装子系统的复杂性，便于客户端调用</p>\n</li>\n<li><p><a href=\"http://www.cnblogs.com/meet/p/5116445.html\" target=\"_blank\" rel=\"external\">享元模式</a>：运用共享技术有效的支持大量细粒度对象的重用。它能做到共享的关键就是区分了内部状态（可以共享，不会随环境变化而变化）和外部状态（不可以共享，会随环境变化而变化）。如果项目中有很多完全相同或相似的对象，则可以使用享元模式，节省内存。</p>\n</li>\n<li><p><a href=\"http://www.cnblogs.com/meet/p/5116464.html\" target=\"_blank\" rel=\"external\">代理模式</a>：为其他对象提供一种代理以便控制对这个对象的访问。可以详细控制访问某个类（对象）的方法，在调用这个方法前作的前置处理（统一的流程代码放到代理中处理）。调用这个方法后做后置处理。例如：明星的经纪人，租房的中介等等都是代理<br>代理模式分类：<br>1.静态代理（静态定义代理类，我们自己静态定义的代理类。比如我们自己定义一个明星的经纪人类）<br>2.动态代理（通过程序动态生成代理类，该代理类不是我们自己定义的。而是由程序自动生成）比较重要！！</p>\n</li>\n</ul>\n<h4 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h4><ul>\n<li><p>大话设计模式(带目录完整版).pdf</p>\n</li>\n<li><p>HEAD_FIRST设计模式（中文版）.pdf</p>\n</li>\n<li><p>尚学堂_高淇<em>java300集最全视频教程</em>【GOF23设计模式】</p>\n</li>\n<li><p><a href=\"http://www.cnblogs.com/meet/p/5116504.html\" target=\"_blank\" rel=\"external\">FangZheng - 博客园</a></p>\n</li>\n</ul>\n","excerpt":"<h2 id=\"java-23种设计模式概括\"><a href=\"#java-23种设计模式概括\" class=\"headerlink\" title=\"java 23种设计模式概括\"></a><center>java 23种设计模式概括</ceter></h2><h3 id=\"目录概览\"><a href=\"#目录概览\" class=\"headerlink\" title=\"目录概览\"></a>目录概览</h3><h4 id=\"创建型模式：关注对象的创建过程\"><a href=\"#创建型模式：关注对象的创建过程\" class=\"headerlink\" title=\"创建型模式：关注对象的创建过程\"></a>创建型模式：关注对象的创建过程</h4><ul>\n<li><p><a href=\"http://www.cnblogs.com/meet/p/5116398.html\">单例模式</a>：<strong>保证一个类只有一个实例，并且提供一个访问该实例的全局访问点</strong><br>主要：<br>饿汉式（线程安全，调用效率高，但是不能延时加载）<br>懒汉式（线程安全，调用效率不高，但是可以延时加载）<br>其他：<br>双重检测锁式（由于JVM底层内部模型原因，偶尔会出问题。不建议使用）<br>静态内部类式（线程安全，调用效率高。但是可以延时加载）<br>枚举单例（线程安全，调用效率高，不能延时加载）</p>\n</li>\n<li><p><a href=\"http://www.cnblogs.com/meet/p/5116400.html\">工厂模式</a>：<br>简单工厂模式：用来生产同一等级结构中的任意产品（对已有产品新增功能，需要修改源代码）<br>虽然能通过工厂来创建对象，但是违反了开闭原则。一旦增加功能需要在原有基础上修改代码。<br>工厂方法模式：用来生产同一等级结构中的固定产品（支持增加任意产品，不用修改源代码）<br>将工厂类调整为工厂接口，需要什么类型的工厂就使用该类实现该工厂，创建相应的产品。</p>\n</li>\n<li><p><a href=\"http://www.cnblogs.com/meet/p/5116400.html\">抽象工厂模式</a>：用来生产不同产品族的全部产品（对于增加新的产品，无能为力。可增加一系列的产品族）抽象工厂模式用来生产不同产品族的全部产品，对于只增加产品某一部分则不适用。抽象工厂模式是工厂模式的一种升级版本。</p>\n</li>\n<li><p><a href=\"http://www.cnblogs.com/meet/p/5116401.html\">建造者​模式</a>：<strong>分离了对象子组件的单独构造（由Builder来负责构建，由Director来负责组装），从而可以构造出复杂的对象</strong>。<br>假如一个对象的构建很复杂，需要很多步骤。如果使用了建造者模式，会将其构建对象，和组装成一个对象这两步给分开来构建部分为（builder）和组织部分（director），实现了构建和装配的解耦。</p>","more":"</li>\n<li><p><a href=\"http://www.cnblogs.com/meet/p/5116404.html\">原型模式</a>：通过new产生一个对象需要非常繁琐的数据准备或访问权限，则可以使用原型模式。<br>所谓原型模式就是构建一个对象的原型，通过原型来创建出新的对象。</p>\n</li>\n</ul>\n<h4 id=\"行为型模式：关注系统中对象之间的相互交互，研究系统在运行时对象之间的相互通信和协作，进一步明确对象的职责。\"><a href=\"#行为型模式：关注系统中对象之间的相互交互，研究系统在运行时对象之间的相互通信和协作，进一步明确对象的职责。\" class=\"headerlink\" title=\"行为型模式：关注系统中对象之间的相互交互，研究系统在运行时对象之间的相互通信和协作，进一步明确对象的职责。\"></a>行为型模式：关注系统中对象之间的相互交互，研究系统在运行时对象之间的相互通信和协作，进一步明确对象的职责。</h4><ul>\n<li><p><a href=\"http://www.cnblogs.com/meet/p/5116417.html\">模板方法模式</a>：<strong>定义一个操作中的算法骨架，而将一些步骤延迟到子类中。模板方法使得子类可以不改变一个算法的结构即可重定义该算法的<br>某些特定步骤</strong>。也就是说：假如某些操作代码基本相同，只是其中一部分会经常改变，则可以使用模板方法，将不变的部分作为一个模板，将容易变动的部分让子类来实现。</p>\n</li>\n<li><p><a href=\"http://www.cnblogs.com/meet/p/5116430.html\">命令模式</a>（不常用）：将一个请求封装为一个对象，从而使你可用不同的请求对客户进行参数化，对请求排队或记录请求日志。以及支持可撤销的操作。说白了，就是将一系列的请求命令封装起来，不直接调用真正执行者的方法，这样比较好扩展。</p>\n</li>\n<li><p><a href=\"http://www.cnblogs.com/meet/p/5116437.html\">迭代器模式</a>：提供一种方法顺序的访问一个聚合对象中各个元素，而又不暴露该对象的内部表示。也就是开发一个用于迭代某个对象中元素的功能。</p>\n</li>\n<li><p><a href=\"http://www.cnblogs.com/meet/p/5116411.html\">观察者模式</a>：<strong>也叫（发布-订阅模式）定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个主题对象，这个主题对象在状态发生变化时，会通知所有观察者对象。使它们能够自动更新自己</strong>。例如：发广播，游戏中大喇叭，群聊。jdk中提供了抽象主题和抽象观察者的接口，我们可以使用这两个接口来方便的定义自己的观察者模式</p>\n</li>\n<li><p><a href=\"http://www.cnblogs.com/meet/p/5116432.html\">中介者模式</a>：用一个中介对象来封装一系列的对象交互，中介者使各对象不需要显示地相互引用。从而使其耦合松散，而且可以独立地改变它们之间的交互。中介者模式核心：1.就是将网状结构处理成星型结构 2.将多对多处理成一对多</p>\n</li>\n<li><p><a href=\"http://www.cnblogs.com/meet/p/5116407.html\">备忘录模式</a>：在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。这样以后就可将该对象恢复到原先保存的状态。也就是说，不破坏源数据的情况下，将源数据进行一次或者多次的备份。</p>\n</li>\n<li><p><a href=\"http://www.cnblogs.com/meet/p/5116424.html\">解释器模式</a>（不常用）：给定一个语言，定义它的文法一种表示。并定义一个解释器，这个解释器使用该表示来解释语言中的句子。</p>\n</li>\n<li><p><a href=\"http://www.cnblogs.com/meet/p/5116415.html\">状态模式</a>：当一个对象的内在状态改变时允许改变其行为，这个对象看起来像是改变了其类。状态模式主要解决的是当控制一个对象状态转换的条件表达式过于复杂时的情况。当遇到不同的状态遇到不同的行为的时候，可以使用状态模式。例如：酒店房间的状态，是空闲，预定，还是已入住呢？而且这三种状态都对应着不同的行为，空闲的话就可预定，可预定的话就可入住，已入住的话就不能显示空闲。</p>\n</li>\n<li><p><a href=\"http://www.cnblogs.com/meet/p/5116419.html\">策略模式</a>：它定义了算法家族，分别封装起来，让它们之间可以互相替换，此模式让算法的变化不会影响到使用算法的客户。例如：商场中的打折商品，针对不同的客户可能有不同的折扣。那这些算法该怎么定义呢？可以使用策略模式，给每个会员或者商品都指定一个特定的算法，根据不同的算法，打不同的折扣。</p>\n</li>\n<li><p><a href=\"http://www.cnblogs.com/meet/p/5116440.html\">职责链模式</a>：将能够处理同一类请求的对象连成一条链，使这些对象都有机会处理请求，所提交的请求沿着链传递。从而避免请求的发送者和接受者之间的耦合关系。链上的对象逐个判断是否有能力处理该请求，如果能则就处理，如果不能，则传给链上的下一个对象。直到有一个对象处理它为止。比如：请假申请，审批人连成一条链，每个人都有机会处理这个假条，但是这个请假申请最终肯定会经过审核（不管审批是否通过）。</p>\n</li>\n<li><p><a href=\"http://www.cnblogs.com/meet/p/5116422.html\">访问者模式</a>（不常用）：表示一个作用于某对象结构中的各元素的操作。它使你可以在不改变各元素的类的前提下定义作用于这些元素的新操作。</p>\n</li>\n</ul>\n<h4 id=\"结构型模式：关注对象和类的组织\"><a href=\"#结构型模式：关注对象和类的组织\" class=\"headerlink\" title=\"结构型模式：关注对象和类的组织\"></a>结构型模式：关注对象和类的组织</h4><ul>\n<li><p><a href=\"http://www.cnblogs.com/meet/p/5116467.html\">适配器模式</a>：将一个类的接口转换成客户希望的另外一个接口。Adapter模式使得原本由于接口不兼容而不能一起工作的类可以一起工作。例如：NBA中的球员来自不同国家，而世界标准语言是英语。那他们不会英语，也不能各自学习所有国家的语言。所以，最好的办法就是请不同的翻译,将这些球员国家的语言翻译成英语。而这些翻译就是适配器！！<br>适配器模式分类：<br>1、类适配器模式（不推荐使用）：由于类适配器模式需要多重继承对一个接口对另一个接口进行适配，而C#,Java不支持多重继承。<br>2、对象适配器模式：采用组合的方式</p>\n</li>\n<li><p><a href=\"http://www.cnblogs.com/meet/p/5116458.html\">桥接模式</a>：将抽象部分与它的实现部分分离，使它们都可以独立的变化。而不会直接影响到其他部分。桥接模式解决了多层继承的结构，处理多维度变化的场景，将各个维度设计成独立的继承结构。使各个维度可以独立的扩展在抽象层建立联系。</p>\n</li>\n<li><p><a href=\"http://www.cnblogs.com/meet/p/5116450.html\">装饰模式</a>：也叫装饰者模式或者装饰器模式，表示动态的给一个对象添加一些新的功能（利用子类继承父类也可以实现），但是比生成子类方式更灵活。例如：我们每个人身上穿的衣服，鞋子，领带，披风都可以理解为是对人的装饰。</p>\n</li>\n<li><p><a href=\"http://www.cnblogs.com/meet/p/5116455.html\">组合模式</a>：将对象组合成树形结构以表示：部分–整体 的层次结构。组合模式使得用户对单个对象和组合对象的使用具有一致性。基本上见到的树形结构都使用到了组合模式。</p>\n</li>\n<li><p><a href=\"http://www.cnblogs.com/meet/p/5116447.html\">外观模式</a>：为子系统中的一组接口提供一个一致的界面，此模式定义了一个高层接口。这个接口使得这一子系统更加容易使用。遵守迪米特法则（最少知识原则）。说白了，就可以理解为封装。外观模式的核心：为子系统提供统一的入口，封装子系统的复杂性，便于客户端调用</p>\n</li>\n<li><p><a href=\"http://www.cnblogs.com/meet/p/5116445.html\">享元模式</a>：运用共享技术有效的支持大量细粒度对象的重用。它能做到共享的关键就是区分了内部状态（可以共享，不会随环境变化而变化）和外部状态（不可以共享，会随环境变化而变化）。如果项目中有很多完全相同或相似的对象，则可以使用享元模式，节省内存。</p>\n</li>\n<li><p><a href=\"http://www.cnblogs.com/meet/p/5116464.html\">代理模式</a>：为其他对象提供一种代理以便控制对这个对象的访问。可以详细控制访问某个类（对象）的方法，在调用这个方法前作的前置处理（统一的流程代码放到代理中处理）。调用这个方法后做后置处理。例如：明星的经纪人，租房的中介等等都是代理<br>代理模式分类：<br>1.静态代理（静态定义代理类，我们自己静态定义的代理类。比如我们自己定义一个明星的经纪人类）<br>2.动态代理（通过程序动态生成代理类，该代理类不是我们自己定义的。而是由程序自动生成）比较重要！！</p>\n</li>\n</ul>\n<h4 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h4><ul>\n<li><p>大话设计模式(带目录完整版).pdf</p>\n</li>\n<li><p>HEAD_FIRST设计模式（中文版）.pdf</p>\n</li>\n<li><p>尚学堂_高淇<em>java300集最全视频教程</em>【GOF23设计模式】</p>\n</li>\n<li><p><a href=\"http://www.cnblogs.com/meet/p/5116504.html\">FangZheng - 博客园</a></p>\n</li>\n</ul>"},{"title":"JVM垃圾回收算法及回收器详解","comments":0,"copyright":true,"top":10,"abbrlink":"62414ee6","date":"2018-02-25T06:37:20.000Z","_content":"\n## <center>JVM垃圾回收算法及回收器详解</center>\n\n### GC Roots\n\n我们先来了解一下在Java中是如何判断一个对象的生死的，有些语言比如Python是采用引用计数来统计的，但是这种做法可能会遇见循环引用的问题，在Java以及C#等语言中是采用GC Roots来解决这个问题。如果一个对象和GC Roots之间没有链接，那么这个对象也可以被视作是一个可回收的对象。\n\nJava中可以被作为GC Roots中的对象有：\n\n虚拟机栈中的引用的对象。\n方法区中的类静态属性引用的对象。\n方法区中的常量引用的对象。\n本地方法栈（jni）即一般说的Native的引用对象。\n\n### 垃圾回收算法\n\n#### 标记清除\n\n标记-清除算法将垃圾回收分为两个阶段：标记阶段和清除阶段。在标记阶段首先通过根节点，标记所有从根节点开始的对象，未被标记的对象就是未被引用的垃圾对象。然后，在清除阶段，清除所有未被标记的对象。标记清除算法带来的一个问题是会存在大量的**空间碎片**，因为回收后的空间是不连续的，这样给大对象分配内存的时候可能会提前触发full gc。\n\n#### 复制算法\n\n将现有的内存空间分为两快，**每次只使用其中一块，在垃圾回收时将正在使用的内存中的存活对象复制到未被使用的内存块中，之后，清除正在使用的内存块中的所有对象，交换两个内存的角色，完成垃圾回收**。\n\n现在的商业虚拟机都采用这种收集算法来回收新生代，IBM研究表明新生代中的对象98%是朝夕生死的，所以并不需要按照1:1的比例划分内存空间，而是将内存分为一块较大的Eden空间和两块较小的Survivor空间，每次使用Eden和其中的一块Survivor。当回收时，将Eden和Survivor中还存活着的对象一次性地拷贝到另外一个Survivor空间上，最后清理掉Eden和刚才用过的Survivor的空间。HotSpot虚拟机默认Eden和Survivor的大小比例是8:1(可以通过-SurvivorRattio来配置)，也就是每次新生代中可用内存空间为整个新生代容量的90%，只有10%的内存会被“浪费”。当然，98%的对象可回收只是一般场景下的数据，我们没有办法保证回收都只有不多于10%的对象存活，当Survivor空间不够用时，需要依赖其他内存（这里指老年代）进行分配担保。\n\n#### 标记整理\n\n复制算法的高效性是建立在存活对象少、垃圾对象多的前提下的。这种情况在新生代经常发生，但是在老年代更常见的情况是大部分对象都是存活对象。如果依然使用复制算法，由于存活的对象较多，复制的成本也将很高。\n标记-压缩算法是一种**老年代的回收算法**，它在标记-清除算法的基础上做了一些优化。首先也需要从根节点开始对所有可达对象做一次标记，但之后，它并不简单地清理未标记的对象，而是**将所有的存活对象压缩到内存的一端。之后，清理边界外所有的空间**。这种方法既避免了碎片的产生，又不需要两块相同的内存空间，因此，其性价比比较高。\n<!--more-->\n#### 增量算法\n\n增量算法的基本思想是，如果一次性将所有的垃圾进行处理，需要造成系统长时间的停顿，那么就可以让垃圾收集线程和应用程序线程交替执行。每次，垃圾收集线程只收集一小片区域的内存空间，接着切换到应用程序线程。依次反复，直到垃圾收集完成。使用这种方式，由于在垃圾回收过程中，间断性地还执行了应用程序代码，所以能减少系统的停顿时间。但是，因为线程切换和上下文转换的消耗，会使得垃圾回收的总体成本上升，造成系统吞吐量的下降。\n\n### 垃圾回收器\n\n#### Serial收集器\n\nSerial收集器是**最古老的收集器**，它的缺点是当**Serial收集器想进行垃圾回收的时候，必须暂停用户的所有进程，即stop the world**。到现在为止，它依然是虚拟机运行在client模式下的默认新生代收集器，与其他收集器相比，对于限定在单个CPU的运行环境来说，Serial收集器由于没有线程交互的开销，专心做垃圾回收自然可以获得最高的单线程收集效率。\n\n**Serial Old是Serial收集器的老年代版本，它同样是一个单线程收集器，使用”标记－整理“算法**。这个收集器的主要意义也是被Client模式下的虚拟机使用。在Server模式下，它主要还有两大用途：一个是在JDK1.5及以前的版本中与Parallel Scanvenge收集器搭配使用，另外一个就是作为CMS收集器的后备预案，在并发收集发生Concurrent Mode Failure的时候使用。\n\n通过指定-UseSerialGC参数，使用Serial + Serial Old的串行收集器组合进行内存回收。\n\n#### ParNew收集器\n\nParNew收集器是Serial收集器新生代的多线程实现，注意在进行垃圾回收的时候依然会stop the world，只是相比较Serial收集器而言它会运行多条进程进行垃圾回收。\n\nParNew收集器在单CPU的环境中绝对不会有比Serial收集器更好的效果，甚至由于存在线程交互的开销，该收集器在通过超线程技术实现的两个CPU的环境中都不能百分之百的保证能超越Serial收集器。当然，随着可以使用的CPU的数量增加，它对于GC时系统资源的利用还是很有好处的。它默认开启的收集线程数与CPU的数量相同，在CPU非常多（譬如32个，现在CPU动辄4核加超线程，服务器超过32个逻辑CPU的情况越来越多了）的环境下，可以使用-XX:ParallelGCThreads参数来限制垃圾收集的线程数。\n\n-UseParNewGC: 打开此开关后，使用ParNew + Serial Old的收集器组合进行内存回收，这样**新生代使用并行收集器，老年代使用串行收集器**。\n\n#### Parallel Scavenge收集器\n\nParallel是采用复制算法的多线程新生代垃圾回收器，似乎和ParNew收集器有很多的相似的地方。但是Parallel Scanvenge收集器的一个特点是它所关注的目标是吞吐量(Throughput)。所谓吞吐量就是CPU用于运行用户代码的时间与CPU总消耗时间的比值，即吞吐量=运行用户代码时间 / (运行用户代码时间 + 垃圾收集时间)。停顿时间越短就越适合需要与用户交互的程序，良好的响应速度能够提升用户的体验；而高吞吐量则可以最高效率地利用CPU时间，尽快地完成程序的运算任务，主要适合在后台运算而不需要太多交互的任务。\n\nParallel Old收集器是Parallel Scavenge收集器的老年代版本，采用多线程和”标记－整理”算法。这个收集器是在jdk1.6中才开始提供的，在此之前，新生代的Parallel Scavenge收集器一直处于比较尴尬的状态。原因是如果新生代Parallel Scavenge收集器，那么老年代除了Serial Old(PS MarkSweep)收集器外别无选择。由于单线程的老年代Serial Old收集器在服务端应用性能上的”拖累“，即使使用了Parallel Scavenge收集器也未必能在整体应用上获得吞吐量最大化的效果，又因为老年代收集中无法充分利用服务器多CPU的处理能力，在老年代很大而且硬件比较高级的环境中，这种组合的吞吐量甚至还不一定有ParNew加CMS的组合”给力“。直到Parallel Old收集器出现后，”吞吐量优先“收集器终于有了比较名副其实的应用祝贺，在注重吞吐量及CPU资源敏感的场合，都可以优先考虑Parallel Scavenge加Parallel Old收集器。\n\n-UseParallelGC: 虚拟机运行在Server模式下的默认值，打开此开关后，使用Parallel Scavenge + Serial Old的收集器组合进行内存回收。-UseParallelOldGC: 打开此开关后，使用Parallel Scavenge + Parallel Old的收集器组合进行垃圾回收\n\n#### CMS收集器\n\nCMS(Concurrent Mark Swep)收集器是一个比较重要的回收器，现在应用非常广泛，我们重点来看一下，CMS一种获取最短回收停顿时间为目标的收集器，这使得它很适合用于和用户交互的业务。从名字(Mark Swep)就可以看出，CMS收集器是基于标记清除算法实现的。它的收集过程分为四个步骤：\n\n1.初始标记(initial mark)\n2.并发标记(concurrent mark)\n3.重新标记(remark)\n4.并发清除(concurrent sweep)\n注意初始标记和重新标记还是会stop the world，但是在耗费时间更长的并发标记和并发清除两个阶段都可以和用户进程同时工作。\n\n不过由于CMS收集器是基于标记清除算法实现的，会导致有大量的空间碎片产生，在为大对象分配内存的时候，往往会出现老年代还有很大的空间剩余，但是无法找到足够大的连续空间来分配当前对象，不得不提前开启一次Full GC。为了解决这个问题，CMS收集器默认提供了一个-XX:+UseCMSCompactAtFullCollection收集开关参数（默认就是开启的)，用于在CMS收集器进行FullGC完开启内存碎片的合并整理过程，内存整理的过程是无法并发的，这样内存碎片问题倒是没有了，不过停顿时间不得不变长。虚拟机设计者还提供了另外一个参数-XX:CMSFullGCsBeforeCompaction参数用于设置执行多少次不压缩的FULL GC后跟着来一次带压缩的（默认值为0，表示每次进入Full GC时都进行碎片整理）。\n\n不幸的是，它作为老年代的收集器，却无法与jdk1.4中已经存在的新生代收集器Parallel Scavenge配合工作，所以在jdk1.5中使用cms来收集老年代的时候，新生代只能选择ParNew或Serial收集器中的一个。ParNew收集器是使用-XX:+UseConcMarkSweepGC选项启用CMS收集器之后的默认新生代收集器，也可以使用-XX:+UseParNewGC选项来强制指定它。\n\n由于CMS收集器现在比较常用，下面我们再额外了解一下CMS算法的几个常用参数：\n\nUseCMSInitatingOccupancyOnly：表示只在到达阈值的时候，才进行 CMS 回收。\n为了减少第二次暂停的时间，通过-XX:+CMSParallelRemarkEnabled开启并行remark。如果ramark时间还是过长的话，可以开启-XX:+CMSScavengeBeforeRemark选项，强制remark之前开启一次minor gc，减少remark的暂停时间，但是在remark之后也立即开始一次minor gc。\nCMS默认启动的回收线程数目是(ParallelGCThreads + 3)/4，如果你需要明确设定，可以通过-XX:+ParallelCMSThreads来设定，其中-XX:+ParallelGCThreads代表的年轻代的并发收集线程数目。\nCMSClassUnloadingEnabled： 允许对类元数据进行回收。\nCMSInitatingPermOccupancyFraction：当永久区占用率达到这一百分比后，启动 CMS 回收 (前提是-XX:+CMSClassUnloadingEnabled 激活了)。\nCMSIncrementalMode：使用增量模式，比较适合单 CPU。\nUseCMSCompactAtFullCollection参数可以使 CMS 在垃圾收集完成后，进行一次内存碎片整理。内存碎片的整理并不是并发进行的。\nUseFullGCsBeforeCompaction：设定进行多少次 CMS 垃圾回收后，进行一次内存压缩。\n一些建议\n对于Native Memory:\n\n* 使用了NIO或者NIO框架（Mina/Netty）\n* 使用了DirectByteBuffer分配字节缓冲区\n* 使用了MappedByteBuffer做内存映射\n\n由于Native Memory只能通过FullGC回收，所以除非你非常清楚这时真的有必要，否则不要轻易调用System.gc()。\n\n另外为了防止某些框架中的System.gc调用（例如NIO框架、Java RMI），建议在启动参数中加上-XX:+DisableExplicitGC来禁用显式GC。这个参数有个巨大的坑，如果你禁用了System.gc()，那么上面的3种场景下的内存就无法回收，可能造成OOM，如果你使用了CMS GC，那么可以用这个参数替代：-XX:+ExplicitGCInvokesConcurrent。\n\n此外除了CMS的GC，其实其他针对old gen的回收器都会在对old gen回收的同时回收young gen。\n\n#### G1收集器\n\nG1收集器是一款面向服务端应用的垃圾收集器。HotSpot团队赋予它的使命是在未来替换掉JDK1.5中发布的CMS收集器。与其他GC收集器相比，G1具备如下特点：\n\n1.并行与并发：G1能更充分的利用CPU，多核环境下的硬件优势来缩短stop the world的停顿时间。\n2.分代收集：和其他收集器一样，分代的概念在G1中依然存在，不过G1不需要其他的垃圾回收器的配合就可以独自管理整个GC堆。\n3.空间整合：G1收集器有利于程序长时间运行，分配大对象时不会无法得到连续的空间而提前触发一次GC。\n4.可预测的非停顿：这是G1相对于CMS的另一大优势，降低停顿时间是G1和CMS共同的关注点，能让使用者明确指定在一个长度为M毫秒的时间片段内，消耗在垃圾收集上的时间不得超过N毫秒。\n在使用G1收集器时，Java堆的内存布局和其他收集器有很大的差别，它将这个Java堆分为多个大小相等的独立区域，虽然还保留新生代和老年代的概念，但是新生代和老年代不再是物理隔离的了，它们都是一部分Region（不需要连续）的集合。\n\n虽然G1看起来有很多优点，实际上CMS还是主流。\n\n#### 与GC相关的常用参数\n\n除了上面提及的一些参数，下面补充一些和GC相关的常用参数：\n\n* -Xmx: 设置堆内存的最大值。\n* -Xms: 设置堆内存的初始值。\n* -Xmn: 设置新生代的大小。\n* -Xss: 设置栈的大小。\n* -PretenureSizeThreshold: 直接晋升到老年代的对象大小，设置这个参数后，大于这个参数的对象将直接在老年代分配。\n* -MaxTenuringThrehold: 晋升到老年代的对象年龄。每个对象在坚持过一次Minor GC之后，年龄就会加1，当超过这个参数值时就进入老年代。\n* -UseAdaptiveSizePolicy: 在这种模式下，新生代的大小、eden 和 survivor 的比例、晋升老年代的对象年龄等参数会被自动调整，以达到在堆大小、吞吐量和停顿时间之间的平衡点。在手工调优比较困难的场合，可以直接使用这种自适应的方式，仅指定虚拟机的最大堆、目标的吞吐量 (GCTimeRatio) 和停顿时间 (MaxGCPauseMills)，让虚拟机自己完成调优工作。\n* -SurvivorRattio: 新生代Eden区域与Survivor区域的容量比值，默认为8，代表Eden: Suvivor= 8: 1。\n* -XX:ParallelGCThreads：设置用于垃圾回收的线程数。通常情况下可以和 CPU 数量相等。但在 CPU 数量比较多的情况下，设置相对较小的数值也是合理的。\n* -XX:MaxGCPauseMills：设置最大垃圾收集停顿时间。它的值是一个大于 0 的整数。收集器在工作时，会调整 Java 堆大小或者其他一些参数，尽可能地把停顿时间控制在 MaxGCPauseMills 以内。\n* -XX:GCTimeRatio:设置吞吐量大小，它的值是一个 0-100 之间的整数。假设 GCTimeRatio 的值为 n，那么系统将花费不超过 1/(1+n) 的时间用于垃圾收集。\n\n### 相关文章\n\n* [JVM（3）：Java GC算法 垃圾收集器](http://www.importnew.com/23752.html)\n\n* [JVM初探——使用堆外内存减少Full GC](http://www.importnew.com/23186.html)\n\n* [JVM GC参数以及GC算法的应用](http://www.importnew.com/23146.html)\n\n* [JVM内存管理–GC算法精解（五分钟让你彻底明白标记/清除算法）](http://www.importnew.com/22996.html)\n\n* [JVM 调优 —— GC 长时间停顿问题及解决方法](http://www.importnew.com/22886.html)\n\n* [JVM 优化经验总结](http://www.importnew.com/16327.html)\n\n* [高吞吐低延迟Java应用的垃圾回收优化](http://www.importnew.com/11336.html)\n\n* [Linux HotSopt虚拟机GC线程的CPU占用率](http://www.importnew.com/10910.html)\n\n* [如何估算内存消耗](http://www.importnew.com/10570.html)\n\n### 参考资料\n\n* 原文出处： [ZIWENXIE](https://www.ziwenxie.site/2017/07/24/java-jvm-gc/)\n\n* [JVM 垃圾回收算法及回收器详解](http://www.importnew.com/26383.html)","source":"_posts/2018-02-25-JVM垃圾回收算法及回收器详解.md","raw":"---\ntitle: JVM垃圾回收算法及回收器详解\ncategories: java\ntags:\n  - JVM垃圾回收\ncomments: false\ncopyright: true\ntop: 10\nabbrlink: 62414ee6\ndate: 2018-02-25 14:37:20\n---\n\n## <center>JVM垃圾回收算法及回收器详解</center>\n\n### GC Roots\n\n我们先来了解一下在Java中是如何判断一个对象的生死的，有些语言比如Python是采用引用计数来统计的，但是这种做法可能会遇见循环引用的问题，在Java以及C#等语言中是采用GC Roots来解决这个问题。如果一个对象和GC Roots之间没有链接，那么这个对象也可以被视作是一个可回收的对象。\n\nJava中可以被作为GC Roots中的对象有：\n\n虚拟机栈中的引用的对象。\n方法区中的类静态属性引用的对象。\n方法区中的常量引用的对象。\n本地方法栈（jni）即一般说的Native的引用对象。\n\n### 垃圾回收算法\n\n#### 标记清除\n\n标记-清除算法将垃圾回收分为两个阶段：标记阶段和清除阶段。在标记阶段首先通过根节点，标记所有从根节点开始的对象，未被标记的对象就是未被引用的垃圾对象。然后，在清除阶段，清除所有未被标记的对象。标记清除算法带来的一个问题是会存在大量的**空间碎片**，因为回收后的空间是不连续的，这样给大对象分配内存的时候可能会提前触发full gc。\n\n#### 复制算法\n\n将现有的内存空间分为两快，**每次只使用其中一块，在垃圾回收时将正在使用的内存中的存活对象复制到未被使用的内存块中，之后，清除正在使用的内存块中的所有对象，交换两个内存的角色，完成垃圾回收**。\n\n现在的商业虚拟机都采用这种收集算法来回收新生代，IBM研究表明新生代中的对象98%是朝夕生死的，所以并不需要按照1:1的比例划分内存空间，而是将内存分为一块较大的Eden空间和两块较小的Survivor空间，每次使用Eden和其中的一块Survivor。当回收时，将Eden和Survivor中还存活着的对象一次性地拷贝到另外一个Survivor空间上，最后清理掉Eden和刚才用过的Survivor的空间。HotSpot虚拟机默认Eden和Survivor的大小比例是8:1(可以通过-SurvivorRattio来配置)，也就是每次新生代中可用内存空间为整个新生代容量的90%，只有10%的内存会被“浪费”。当然，98%的对象可回收只是一般场景下的数据，我们没有办法保证回收都只有不多于10%的对象存活，当Survivor空间不够用时，需要依赖其他内存（这里指老年代）进行分配担保。\n\n#### 标记整理\n\n复制算法的高效性是建立在存活对象少、垃圾对象多的前提下的。这种情况在新生代经常发生，但是在老年代更常见的情况是大部分对象都是存活对象。如果依然使用复制算法，由于存活的对象较多，复制的成本也将很高。\n标记-压缩算法是一种**老年代的回收算法**，它在标记-清除算法的基础上做了一些优化。首先也需要从根节点开始对所有可达对象做一次标记，但之后，它并不简单地清理未标记的对象，而是**将所有的存活对象压缩到内存的一端。之后，清理边界外所有的空间**。这种方法既避免了碎片的产生，又不需要两块相同的内存空间，因此，其性价比比较高。\n<!--more-->\n#### 增量算法\n\n增量算法的基本思想是，如果一次性将所有的垃圾进行处理，需要造成系统长时间的停顿，那么就可以让垃圾收集线程和应用程序线程交替执行。每次，垃圾收集线程只收集一小片区域的内存空间，接着切换到应用程序线程。依次反复，直到垃圾收集完成。使用这种方式，由于在垃圾回收过程中，间断性地还执行了应用程序代码，所以能减少系统的停顿时间。但是，因为线程切换和上下文转换的消耗，会使得垃圾回收的总体成本上升，造成系统吞吐量的下降。\n\n### 垃圾回收器\n\n#### Serial收集器\n\nSerial收集器是**最古老的收集器**，它的缺点是当**Serial收集器想进行垃圾回收的时候，必须暂停用户的所有进程，即stop the world**。到现在为止，它依然是虚拟机运行在client模式下的默认新生代收集器，与其他收集器相比，对于限定在单个CPU的运行环境来说，Serial收集器由于没有线程交互的开销，专心做垃圾回收自然可以获得最高的单线程收集效率。\n\n**Serial Old是Serial收集器的老年代版本，它同样是一个单线程收集器，使用”标记－整理“算法**。这个收集器的主要意义也是被Client模式下的虚拟机使用。在Server模式下，它主要还有两大用途：一个是在JDK1.5及以前的版本中与Parallel Scanvenge收集器搭配使用，另外一个就是作为CMS收集器的后备预案，在并发收集发生Concurrent Mode Failure的时候使用。\n\n通过指定-UseSerialGC参数，使用Serial + Serial Old的串行收集器组合进行内存回收。\n\n#### ParNew收集器\n\nParNew收集器是Serial收集器新生代的多线程实现，注意在进行垃圾回收的时候依然会stop the world，只是相比较Serial收集器而言它会运行多条进程进行垃圾回收。\n\nParNew收集器在单CPU的环境中绝对不会有比Serial收集器更好的效果，甚至由于存在线程交互的开销，该收集器在通过超线程技术实现的两个CPU的环境中都不能百分之百的保证能超越Serial收集器。当然，随着可以使用的CPU的数量增加，它对于GC时系统资源的利用还是很有好处的。它默认开启的收集线程数与CPU的数量相同，在CPU非常多（譬如32个，现在CPU动辄4核加超线程，服务器超过32个逻辑CPU的情况越来越多了）的环境下，可以使用-XX:ParallelGCThreads参数来限制垃圾收集的线程数。\n\n-UseParNewGC: 打开此开关后，使用ParNew + Serial Old的收集器组合进行内存回收，这样**新生代使用并行收集器，老年代使用串行收集器**。\n\n#### Parallel Scavenge收集器\n\nParallel是采用复制算法的多线程新生代垃圾回收器，似乎和ParNew收集器有很多的相似的地方。但是Parallel Scanvenge收集器的一个特点是它所关注的目标是吞吐量(Throughput)。所谓吞吐量就是CPU用于运行用户代码的时间与CPU总消耗时间的比值，即吞吐量=运行用户代码时间 / (运行用户代码时间 + 垃圾收集时间)。停顿时间越短就越适合需要与用户交互的程序，良好的响应速度能够提升用户的体验；而高吞吐量则可以最高效率地利用CPU时间，尽快地完成程序的运算任务，主要适合在后台运算而不需要太多交互的任务。\n\nParallel Old收集器是Parallel Scavenge收集器的老年代版本，采用多线程和”标记－整理”算法。这个收集器是在jdk1.6中才开始提供的，在此之前，新生代的Parallel Scavenge收集器一直处于比较尴尬的状态。原因是如果新生代Parallel Scavenge收集器，那么老年代除了Serial Old(PS MarkSweep)收集器外别无选择。由于单线程的老年代Serial Old收集器在服务端应用性能上的”拖累“，即使使用了Parallel Scavenge收集器也未必能在整体应用上获得吞吐量最大化的效果，又因为老年代收集中无法充分利用服务器多CPU的处理能力，在老年代很大而且硬件比较高级的环境中，这种组合的吞吐量甚至还不一定有ParNew加CMS的组合”给力“。直到Parallel Old收集器出现后，”吞吐量优先“收集器终于有了比较名副其实的应用祝贺，在注重吞吐量及CPU资源敏感的场合，都可以优先考虑Parallel Scavenge加Parallel Old收集器。\n\n-UseParallelGC: 虚拟机运行在Server模式下的默认值，打开此开关后，使用Parallel Scavenge + Serial Old的收集器组合进行内存回收。-UseParallelOldGC: 打开此开关后，使用Parallel Scavenge + Parallel Old的收集器组合进行垃圾回收\n\n#### CMS收集器\n\nCMS(Concurrent Mark Swep)收集器是一个比较重要的回收器，现在应用非常广泛，我们重点来看一下，CMS一种获取最短回收停顿时间为目标的收集器，这使得它很适合用于和用户交互的业务。从名字(Mark Swep)就可以看出，CMS收集器是基于标记清除算法实现的。它的收集过程分为四个步骤：\n\n1.初始标记(initial mark)\n2.并发标记(concurrent mark)\n3.重新标记(remark)\n4.并发清除(concurrent sweep)\n注意初始标记和重新标记还是会stop the world，但是在耗费时间更长的并发标记和并发清除两个阶段都可以和用户进程同时工作。\n\n不过由于CMS收集器是基于标记清除算法实现的，会导致有大量的空间碎片产生，在为大对象分配内存的时候，往往会出现老年代还有很大的空间剩余，但是无法找到足够大的连续空间来分配当前对象，不得不提前开启一次Full GC。为了解决这个问题，CMS收集器默认提供了一个-XX:+UseCMSCompactAtFullCollection收集开关参数（默认就是开启的)，用于在CMS收集器进行FullGC完开启内存碎片的合并整理过程，内存整理的过程是无法并发的，这样内存碎片问题倒是没有了，不过停顿时间不得不变长。虚拟机设计者还提供了另外一个参数-XX:CMSFullGCsBeforeCompaction参数用于设置执行多少次不压缩的FULL GC后跟着来一次带压缩的（默认值为0，表示每次进入Full GC时都进行碎片整理）。\n\n不幸的是，它作为老年代的收集器，却无法与jdk1.4中已经存在的新生代收集器Parallel Scavenge配合工作，所以在jdk1.5中使用cms来收集老年代的时候，新生代只能选择ParNew或Serial收集器中的一个。ParNew收集器是使用-XX:+UseConcMarkSweepGC选项启用CMS收集器之后的默认新生代收集器，也可以使用-XX:+UseParNewGC选项来强制指定它。\n\n由于CMS收集器现在比较常用，下面我们再额外了解一下CMS算法的几个常用参数：\n\nUseCMSInitatingOccupancyOnly：表示只在到达阈值的时候，才进行 CMS 回收。\n为了减少第二次暂停的时间，通过-XX:+CMSParallelRemarkEnabled开启并行remark。如果ramark时间还是过长的话，可以开启-XX:+CMSScavengeBeforeRemark选项，强制remark之前开启一次minor gc，减少remark的暂停时间，但是在remark之后也立即开始一次minor gc。\nCMS默认启动的回收线程数目是(ParallelGCThreads + 3)/4，如果你需要明确设定，可以通过-XX:+ParallelCMSThreads来设定，其中-XX:+ParallelGCThreads代表的年轻代的并发收集线程数目。\nCMSClassUnloadingEnabled： 允许对类元数据进行回收。\nCMSInitatingPermOccupancyFraction：当永久区占用率达到这一百分比后，启动 CMS 回收 (前提是-XX:+CMSClassUnloadingEnabled 激活了)。\nCMSIncrementalMode：使用增量模式，比较适合单 CPU。\nUseCMSCompactAtFullCollection参数可以使 CMS 在垃圾收集完成后，进行一次内存碎片整理。内存碎片的整理并不是并发进行的。\nUseFullGCsBeforeCompaction：设定进行多少次 CMS 垃圾回收后，进行一次内存压缩。\n一些建议\n对于Native Memory:\n\n* 使用了NIO或者NIO框架（Mina/Netty）\n* 使用了DirectByteBuffer分配字节缓冲区\n* 使用了MappedByteBuffer做内存映射\n\n由于Native Memory只能通过FullGC回收，所以除非你非常清楚这时真的有必要，否则不要轻易调用System.gc()。\n\n另外为了防止某些框架中的System.gc调用（例如NIO框架、Java RMI），建议在启动参数中加上-XX:+DisableExplicitGC来禁用显式GC。这个参数有个巨大的坑，如果你禁用了System.gc()，那么上面的3种场景下的内存就无法回收，可能造成OOM，如果你使用了CMS GC，那么可以用这个参数替代：-XX:+ExplicitGCInvokesConcurrent。\n\n此外除了CMS的GC，其实其他针对old gen的回收器都会在对old gen回收的同时回收young gen。\n\n#### G1收集器\n\nG1收集器是一款面向服务端应用的垃圾收集器。HotSpot团队赋予它的使命是在未来替换掉JDK1.5中发布的CMS收集器。与其他GC收集器相比，G1具备如下特点：\n\n1.并行与并发：G1能更充分的利用CPU，多核环境下的硬件优势来缩短stop the world的停顿时间。\n2.分代收集：和其他收集器一样，分代的概念在G1中依然存在，不过G1不需要其他的垃圾回收器的配合就可以独自管理整个GC堆。\n3.空间整合：G1收集器有利于程序长时间运行，分配大对象时不会无法得到连续的空间而提前触发一次GC。\n4.可预测的非停顿：这是G1相对于CMS的另一大优势，降低停顿时间是G1和CMS共同的关注点，能让使用者明确指定在一个长度为M毫秒的时间片段内，消耗在垃圾收集上的时间不得超过N毫秒。\n在使用G1收集器时，Java堆的内存布局和其他收集器有很大的差别，它将这个Java堆分为多个大小相等的独立区域，虽然还保留新生代和老年代的概念，但是新生代和老年代不再是物理隔离的了，它们都是一部分Region（不需要连续）的集合。\n\n虽然G1看起来有很多优点，实际上CMS还是主流。\n\n#### 与GC相关的常用参数\n\n除了上面提及的一些参数，下面补充一些和GC相关的常用参数：\n\n* -Xmx: 设置堆内存的最大值。\n* -Xms: 设置堆内存的初始值。\n* -Xmn: 设置新生代的大小。\n* -Xss: 设置栈的大小。\n* -PretenureSizeThreshold: 直接晋升到老年代的对象大小，设置这个参数后，大于这个参数的对象将直接在老年代分配。\n* -MaxTenuringThrehold: 晋升到老年代的对象年龄。每个对象在坚持过一次Minor GC之后，年龄就会加1，当超过这个参数值时就进入老年代。\n* -UseAdaptiveSizePolicy: 在这种模式下，新生代的大小、eden 和 survivor 的比例、晋升老年代的对象年龄等参数会被自动调整，以达到在堆大小、吞吐量和停顿时间之间的平衡点。在手工调优比较困难的场合，可以直接使用这种自适应的方式，仅指定虚拟机的最大堆、目标的吞吐量 (GCTimeRatio) 和停顿时间 (MaxGCPauseMills)，让虚拟机自己完成调优工作。\n* -SurvivorRattio: 新生代Eden区域与Survivor区域的容量比值，默认为8，代表Eden: Suvivor= 8: 1。\n* -XX:ParallelGCThreads：设置用于垃圾回收的线程数。通常情况下可以和 CPU 数量相等。但在 CPU 数量比较多的情况下，设置相对较小的数值也是合理的。\n* -XX:MaxGCPauseMills：设置最大垃圾收集停顿时间。它的值是一个大于 0 的整数。收集器在工作时，会调整 Java 堆大小或者其他一些参数，尽可能地把停顿时间控制在 MaxGCPauseMills 以内。\n* -XX:GCTimeRatio:设置吞吐量大小，它的值是一个 0-100 之间的整数。假设 GCTimeRatio 的值为 n，那么系统将花费不超过 1/(1+n) 的时间用于垃圾收集。\n\n### 相关文章\n\n* [JVM（3）：Java GC算法 垃圾收集器](http://www.importnew.com/23752.html)\n\n* [JVM初探——使用堆外内存减少Full GC](http://www.importnew.com/23186.html)\n\n* [JVM GC参数以及GC算法的应用](http://www.importnew.com/23146.html)\n\n* [JVM内存管理–GC算法精解（五分钟让你彻底明白标记/清除算法）](http://www.importnew.com/22996.html)\n\n* [JVM 调优 —— GC 长时间停顿问题及解决方法](http://www.importnew.com/22886.html)\n\n* [JVM 优化经验总结](http://www.importnew.com/16327.html)\n\n* [高吞吐低延迟Java应用的垃圾回收优化](http://www.importnew.com/11336.html)\n\n* [Linux HotSopt虚拟机GC线程的CPU占用率](http://www.importnew.com/10910.html)\n\n* [如何估算内存消耗](http://www.importnew.com/10570.html)\n\n### 参考资料\n\n* 原文出处： [ZIWENXIE](https://www.ziwenxie.site/2017/07/24/java-jvm-gc/)\n\n* [JVM 垃圾回收算法及回收器详解](http://www.importnew.com/26383.html)","slug":"JVM垃圾回收算法及回收器详解","published":1,"updated":"2018-02-26T10:02:36.958Z","layout":"post","photos":[],"link":"","_id":"cje7yhv4000177ku6rk1i9zqv","content":"<h2 id=\"JVM垃圾回收算法及回收器详解\"><a href=\"#JVM垃圾回收算法及回收器详解\" class=\"headerlink\" title=\"JVM垃圾回收算法及回收器详解\"></a><center>JVM垃圾回收算法及回收器详解</center></h2><h3 id=\"GC-Roots\"><a href=\"#GC-Roots\" class=\"headerlink\" title=\"GC Roots\"></a>GC Roots</h3><p>我们先来了解一下在Java中是如何判断一个对象的生死的，有些语言比如Python是采用引用计数来统计的，但是这种做法可能会遇见循环引用的问题，在Java以及C#等语言中是采用GC Roots来解决这个问题。如果一个对象和GC Roots之间没有链接，那么这个对象也可以被视作是一个可回收的对象。</p>\n<p>Java中可以被作为GC Roots中的对象有：</p>\n<p>虚拟机栈中的引用的对象。<br>方法区中的类静态属性引用的对象。<br>方法区中的常量引用的对象。<br>本地方法栈（jni）即一般说的Native的引用对象。</p>\n<h3 id=\"垃圾回收算法\"><a href=\"#垃圾回收算法\" class=\"headerlink\" title=\"垃圾回收算法\"></a>垃圾回收算法</h3><h4 id=\"标记清除\"><a href=\"#标记清除\" class=\"headerlink\" title=\"标记清除\"></a>标记清除</h4><p>标记-清除算法将垃圾回收分为两个阶段：标记阶段和清除阶段。在标记阶段首先通过根节点，标记所有从根节点开始的对象，未被标记的对象就是未被引用的垃圾对象。然后，在清除阶段，清除所有未被标记的对象。标记清除算法带来的一个问题是会存在大量的<strong>空间碎片</strong>，因为回收后的空间是不连续的，这样给大对象分配内存的时候可能会提前触发full gc。</p>\n<h4 id=\"复制算法\"><a href=\"#复制算法\" class=\"headerlink\" title=\"复制算法\"></a>复制算法</h4><p>将现有的内存空间分为两快，<strong>每次只使用其中一块，在垃圾回收时将正在使用的内存中的存活对象复制到未被使用的内存块中，之后，清除正在使用的内存块中的所有对象，交换两个内存的角色，完成垃圾回收</strong>。</p>\n<p>现在的商业虚拟机都采用这种收集算法来回收新生代，IBM研究表明新生代中的对象98%是朝夕生死的，所以并不需要按照1:1的比例划分内存空间，而是将内存分为一块较大的Eden空间和两块较小的Survivor空间，每次使用Eden和其中的一块Survivor。当回收时，将Eden和Survivor中还存活着的对象一次性地拷贝到另外一个Survivor空间上，最后清理掉Eden和刚才用过的Survivor的空间。HotSpot虚拟机默认Eden和Survivor的大小比例是8:1(可以通过-SurvivorRattio来配置)，也就是每次新生代中可用内存空间为整个新生代容量的90%，只有10%的内存会被“浪费”。当然，98%的对象可回收只是一般场景下的数据，我们没有办法保证回收都只有不多于10%的对象存活，当Survivor空间不够用时，需要依赖其他内存（这里指老年代）进行分配担保。</p>\n<h4 id=\"标记整理\"><a href=\"#标记整理\" class=\"headerlink\" title=\"标记整理\"></a>标记整理</h4><p>复制算法的高效性是建立在存活对象少、垃圾对象多的前提下的。这种情况在新生代经常发生，但是在老年代更常见的情况是大部分对象都是存活对象。如果依然使用复制算法，由于存活的对象较多，复制的成本也将很高。<br>标记-压缩算法是一种<strong>老年代的回收算法</strong>，它在标记-清除算法的基础上做了一些优化。首先也需要从根节点开始对所有可达对象做一次标记，但之后，它并不简单地清理未标记的对象，而是<strong>将所有的存活对象压缩到内存的一端。之后，清理边界外所有的空间</strong>。这种方法既避免了碎片的产生，又不需要两块相同的内存空间，因此，其性价比比较高。<br><a id=\"more\"></a></p>\n<h4 id=\"增量算法\"><a href=\"#增量算法\" class=\"headerlink\" title=\"增量算法\"></a>增量算法</h4><p>增量算法的基本思想是，如果一次性将所有的垃圾进行处理，需要造成系统长时间的停顿，那么就可以让垃圾收集线程和应用程序线程交替执行。每次，垃圾收集线程只收集一小片区域的内存空间，接着切换到应用程序线程。依次反复，直到垃圾收集完成。使用这种方式，由于在垃圾回收过程中，间断性地还执行了应用程序代码，所以能减少系统的停顿时间。但是，因为线程切换和上下文转换的消耗，会使得垃圾回收的总体成本上升，造成系统吞吐量的下降。</p>\n<h3 id=\"垃圾回收器\"><a href=\"#垃圾回收器\" class=\"headerlink\" title=\"垃圾回收器\"></a>垃圾回收器</h3><h4 id=\"Serial收集器\"><a href=\"#Serial收集器\" class=\"headerlink\" title=\"Serial收集器\"></a>Serial收集器</h4><p>Serial收集器是<strong>最古老的收集器</strong>，它的缺点是当<strong>Serial收集器想进行垃圾回收的时候，必须暂停用户的所有进程，即stop the world</strong>。到现在为止，它依然是虚拟机运行在client模式下的默认新生代收集器，与其他收集器相比，对于限定在单个CPU的运行环境来说，Serial收集器由于没有线程交互的开销，专心做垃圾回收自然可以获得最高的单线程收集效率。</p>\n<p><strong>Serial Old是Serial收集器的老年代版本，它同样是一个单线程收集器，使用”标记－整理“算法</strong>。这个收集器的主要意义也是被Client模式下的虚拟机使用。在Server模式下，它主要还有两大用途：一个是在JDK1.5及以前的版本中与Parallel Scanvenge收集器搭配使用，另外一个就是作为CMS收集器的后备预案，在并发收集发生Concurrent Mode Failure的时候使用。</p>\n<p>通过指定-UseSerialGC参数，使用Serial + Serial Old的串行收集器组合进行内存回收。</p>\n<h4 id=\"ParNew收集器\"><a href=\"#ParNew收集器\" class=\"headerlink\" title=\"ParNew收集器\"></a>ParNew收集器</h4><p>ParNew收集器是Serial收集器新生代的多线程实现，注意在进行垃圾回收的时候依然会stop the world，只是相比较Serial收集器而言它会运行多条进程进行垃圾回收。</p>\n<p>ParNew收集器在单CPU的环境中绝对不会有比Serial收集器更好的效果，甚至由于存在线程交互的开销，该收集器在通过超线程技术实现的两个CPU的环境中都不能百分之百的保证能超越Serial收集器。当然，随着可以使用的CPU的数量增加，它对于GC时系统资源的利用还是很有好处的。它默认开启的收集线程数与CPU的数量相同，在CPU非常多（譬如32个，现在CPU动辄4核加超线程，服务器超过32个逻辑CPU的情况越来越多了）的环境下，可以使用-XX:ParallelGCThreads参数来限制垃圾收集的线程数。</p>\n<p>-UseParNewGC: 打开此开关后，使用ParNew + Serial Old的收集器组合进行内存回收，这样<strong>新生代使用并行收集器，老年代使用串行收集器</strong>。</p>\n<h4 id=\"Parallel-Scavenge收集器\"><a href=\"#Parallel-Scavenge收集器\" class=\"headerlink\" title=\"Parallel Scavenge收集器\"></a>Parallel Scavenge收集器</h4><p>Parallel是采用复制算法的多线程新生代垃圾回收器，似乎和ParNew收集器有很多的相似的地方。但是Parallel Scanvenge收集器的一个特点是它所关注的目标是吞吐量(Throughput)。所谓吞吐量就是CPU用于运行用户代码的时间与CPU总消耗时间的比值，即吞吐量=运行用户代码时间 / (运行用户代码时间 + 垃圾收集时间)。停顿时间越短就越适合需要与用户交互的程序，良好的响应速度能够提升用户的体验；而高吞吐量则可以最高效率地利用CPU时间，尽快地完成程序的运算任务，主要适合在后台运算而不需要太多交互的任务。</p>\n<p>Parallel Old收集器是Parallel Scavenge收集器的老年代版本，采用多线程和”标记－整理”算法。这个收集器是在jdk1.6中才开始提供的，在此之前，新生代的Parallel Scavenge收集器一直处于比较尴尬的状态。原因是如果新生代Parallel Scavenge收集器，那么老年代除了Serial Old(PS MarkSweep)收集器外别无选择。由于单线程的老年代Serial Old收集器在服务端应用性能上的”拖累“，即使使用了Parallel Scavenge收集器也未必能在整体应用上获得吞吐量最大化的效果，又因为老年代收集中无法充分利用服务器多CPU的处理能力，在老年代很大而且硬件比较高级的环境中，这种组合的吞吐量甚至还不一定有ParNew加CMS的组合”给力“。直到Parallel Old收集器出现后，”吞吐量优先“收集器终于有了比较名副其实的应用祝贺，在注重吞吐量及CPU资源敏感的场合，都可以优先考虑Parallel Scavenge加Parallel Old收集器。</p>\n<p>-UseParallelGC: 虚拟机运行在Server模式下的默认值，打开此开关后，使用Parallel Scavenge + Serial Old的收集器组合进行内存回收。-UseParallelOldGC: 打开此开关后，使用Parallel Scavenge + Parallel Old的收集器组合进行垃圾回收</p>\n<h4 id=\"CMS收集器\"><a href=\"#CMS收集器\" class=\"headerlink\" title=\"CMS收集器\"></a>CMS收集器</h4><p>CMS(Concurrent Mark Swep)收集器是一个比较重要的回收器，现在应用非常广泛，我们重点来看一下，CMS一种获取最短回收停顿时间为目标的收集器，这使得它很适合用于和用户交互的业务。从名字(Mark Swep)就可以看出，CMS收集器是基于标记清除算法实现的。它的收集过程分为四个步骤：</p>\n<p>1.初始标记(initial mark)<br>2.并发标记(concurrent mark)<br>3.重新标记(remark)<br>4.并发清除(concurrent sweep)<br>注意初始标记和重新标记还是会stop the world，但是在耗费时间更长的并发标记和并发清除两个阶段都可以和用户进程同时工作。</p>\n<p>不过由于CMS收集器是基于标记清除算法实现的，会导致有大量的空间碎片产生，在为大对象分配内存的时候，往往会出现老年代还有很大的空间剩余，但是无法找到足够大的连续空间来分配当前对象，不得不提前开启一次Full GC。为了解决这个问题，CMS收集器默认提供了一个-XX:+UseCMSCompactAtFullCollection收集开关参数（默认就是开启的)，用于在CMS收集器进行FullGC完开启内存碎片的合并整理过程，内存整理的过程是无法并发的，这样内存碎片问题倒是没有了，不过停顿时间不得不变长。虚拟机设计者还提供了另外一个参数-XX:CMSFullGCsBeforeCompaction参数用于设置执行多少次不压缩的FULL GC后跟着来一次带压缩的（默认值为0，表示每次进入Full GC时都进行碎片整理）。</p>\n<p>不幸的是，它作为老年代的收集器，却无法与jdk1.4中已经存在的新生代收集器Parallel Scavenge配合工作，所以在jdk1.5中使用cms来收集老年代的时候，新生代只能选择ParNew或Serial收集器中的一个。ParNew收集器是使用-XX:+UseConcMarkSweepGC选项启用CMS收集器之后的默认新生代收集器，也可以使用-XX:+UseParNewGC选项来强制指定它。</p>\n<p>由于CMS收集器现在比较常用，下面我们再额外了解一下CMS算法的几个常用参数：</p>\n<p>UseCMSInitatingOccupancyOnly：表示只在到达阈值的时候，才进行 CMS 回收。<br>为了减少第二次暂停的时间，通过-XX:+CMSParallelRemarkEnabled开启并行remark。如果ramark时间还是过长的话，可以开启-XX:+CMSScavengeBeforeRemark选项，强制remark之前开启一次minor gc，减少remark的暂停时间，但是在remark之后也立即开始一次minor gc。<br>CMS默认启动的回收线程数目是(ParallelGCThreads + 3)/4，如果你需要明确设定，可以通过-XX:+ParallelCMSThreads来设定，其中-XX:+ParallelGCThreads代表的年轻代的并发收集线程数目。<br>CMSClassUnloadingEnabled： 允许对类元数据进行回收。<br>CMSInitatingPermOccupancyFraction：当永久区占用率达到这一百分比后，启动 CMS 回收 (前提是-XX:+CMSClassUnloadingEnabled 激活了)。<br>CMSIncrementalMode：使用增量模式，比较适合单 CPU。<br>UseCMSCompactAtFullCollection参数可以使 CMS 在垃圾收集完成后，进行一次内存碎片整理。内存碎片的整理并不是并发进行的。<br>UseFullGCsBeforeCompaction：设定进行多少次 CMS 垃圾回收后，进行一次内存压缩。<br>一些建议<br>对于Native Memory:</p>\n<ul>\n<li>使用了NIO或者NIO框架（Mina/Netty）</li>\n<li>使用了DirectByteBuffer分配字节缓冲区</li>\n<li>使用了MappedByteBuffer做内存映射</li>\n</ul>\n<p>由于Native Memory只能通过FullGC回收，所以除非你非常清楚这时真的有必要，否则不要轻易调用System.gc()。</p>\n<p>另外为了防止某些框架中的System.gc调用（例如NIO框架、Java RMI），建议在启动参数中加上-XX:+DisableExplicitGC来禁用显式GC。这个参数有个巨大的坑，如果你禁用了System.gc()，那么上面的3种场景下的内存就无法回收，可能造成OOM，如果你使用了CMS GC，那么可以用这个参数替代：-XX:+ExplicitGCInvokesConcurrent。</p>\n<p>此外除了CMS的GC，其实其他针对old gen的回收器都会在对old gen回收的同时回收young gen。</p>\n<h4 id=\"G1收集器\"><a href=\"#G1收集器\" class=\"headerlink\" title=\"G1收集器\"></a>G1收集器</h4><p>G1收集器是一款面向服务端应用的垃圾收集器。HotSpot团队赋予它的使命是在未来替换掉JDK1.5中发布的CMS收集器。与其他GC收集器相比，G1具备如下特点：</p>\n<p>1.并行与并发：G1能更充分的利用CPU，多核环境下的硬件优势来缩短stop the world的停顿时间。<br>2.分代收集：和其他收集器一样，分代的概念在G1中依然存在，不过G1不需要其他的垃圾回收器的配合就可以独自管理整个GC堆。<br>3.空间整合：G1收集器有利于程序长时间运行，分配大对象时不会无法得到连续的空间而提前触发一次GC。<br>4.可预测的非停顿：这是G1相对于CMS的另一大优势，降低停顿时间是G1和CMS共同的关注点，能让使用者明确指定在一个长度为M毫秒的时间片段内，消耗在垃圾收集上的时间不得超过N毫秒。<br>在使用G1收集器时，Java堆的内存布局和其他收集器有很大的差别，它将这个Java堆分为多个大小相等的独立区域，虽然还保留新生代和老年代的概念，但是新生代和老年代不再是物理隔离的了，它们都是一部分Region（不需要连续）的集合。</p>\n<p>虽然G1看起来有很多优点，实际上CMS还是主流。</p>\n<h4 id=\"与GC相关的常用参数\"><a href=\"#与GC相关的常用参数\" class=\"headerlink\" title=\"与GC相关的常用参数\"></a>与GC相关的常用参数</h4><p>除了上面提及的一些参数，下面补充一些和GC相关的常用参数：</p>\n<ul>\n<li>-Xmx: 设置堆内存的最大值。</li>\n<li>-Xms: 设置堆内存的初始值。</li>\n<li>-Xmn: 设置新生代的大小。</li>\n<li>-Xss: 设置栈的大小。</li>\n<li>-PretenureSizeThreshold: 直接晋升到老年代的对象大小，设置这个参数后，大于这个参数的对象将直接在老年代分配。</li>\n<li>-MaxTenuringThrehold: 晋升到老年代的对象年龄。每个对象在坚持过一次Minor GC之后，年龄就会加1，当超过这个参数值时就进入老年代。</li>\n<li>-UseAdaptiveSizePolicy: 在这种模式下，新生代的大小、eden 和 survivor 的比例、晋升老年代的对象年龄等参数会被自动调整，以达到在堆大小、吞吐量和停顿时间之间的平衡点。在手工调优比较困难的场合，可以直接使用这种自适应的方式，仅指定虚拟机的最大堆、目标的吞吐量 (GCTimeRatio) 和停顿时间 (MaxGCPauseMills)，让虚拟机自己完成调优工作。</li>\n<li>-SurvivorRattio: 新生代Eden区域与Survivor区域的容量比值，默认为8，代表Eden: Suvivor= 8: 1。</li>\n<li>-XX:ParallelGCThreads：设置用于垃圾回收的线程数。通常情况下可以和 CPU 数量相等。但在 CPU 数量比较多的情况下，设置相对较小的数值也是合理的。</li>\n<li>-XX:MaxGCPauseMills：设置最大垃圾收集停顿时间。它的值是一个大于 0 的整数。收集器在工作时，会调整 Java 堆大小或者其他一些参数，尽可能地把停顿时间控制在 MaxGCPauseMills 以内。</li>\n<li>-XX:GCTimeRatio:设置吞吐量大小，它的值是一个 0-100 之间的整数。假设 GCTimeRatio 的值为 n，那么系统将花费不超过 1/(1+n) 的时间用于垃圾收集。</li>\n</ul>\n<h3 id=\"相关文章\"><a href=\"#相关文章\" class=\"headerlink\" title=\"相关文章\"></a>相关文章</h3><ul>\n<li><p><a href=\"http://www.importnew.com/23752.html\" target=\"_blank\" rel=\"external\">JVM（3）：Java GC算法 垃圾收集器</a></p>\n</li>\n<li><p><a href=\"http://www.importnew.com/23186.html\" target=\"_blank\" rel=\"external\">JVM初探——使用堆外内存减少Full GC</a></p>\n</li>\n<li><p><a href=\"http://www.importnew.com/23146.html\" target=\"_blank\" rel=\"external\">JVM GC参数以及GC算法的应用</a></p>\n</li>\n<li><p><a href=\"http://www.importnew.com/22996.html\" target=\"_blank\" rel=\"external\">JVM内存管理–GC算法精解（五分钟让你彻底明白标记/清除算法）</a></p>\n</li>\n<li><p><a href=\"http://www.importnew.com/22886.html\" target=\"_blank\" rel=\"external\">JVM 调优 —— GC 长时间停顿问题及解决方法</a></p>\n</li>\n<li><p><a href=\"http://www.importnew.com/16327.html\" target=\"_blank\" rel=\"external\">JVM 优化经验总结</a></p>\n</li>\n<li><p><a href=\"http://www.importnew.com/11336.html\" target=\"_blank\" rel=\"external\">高吞吐低延迟Java应用的垃圾回收优化</a></p>\n</li>\n<li><p><a href=\"http://www.importnew.com/10910.html\" target=\"_blank\" rel=\"external\">Linux HotSopt虚拟机GC线程的CPU占用率</a></p>\n</li>\n<li><p><a href=\"http://www.importnew.com/10570.html\" target=\"_blank\" rel=\"external\">如何估算内存消耗</a></p>\n</li>\n</ul>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><ul>\n<li><p>原文出处： <a href=\"https://www.ziwenxie.site/2017/07/24/java-jvm-gc/\" target=\"_blank\" rel=\"external\">ZIWENXIE</a></p>\n</li>\n<li><p><a href=\"http://www.importnew.com/26383.html\" target=\"_blank\" rel=\"external\">JVM 垃圾回收算法及回收器详解</a></p>\n</li>\n</ul>\n","excerpt":"<h2 id=\"JVM垃圾回收算法及回收器详解\"><a href=\"#JVM垃圾回收算法及回收器详解\" class=\"headerlink\" title=\"JVM垃圾回收算法及回收器详解\"></a><center>JVM垃圾回收算法及回收器详解</center></h2><h3 id=\"GC-Roots\"><a href=\"#GC-Roots\" class=\"headerlink\" title=\"GC Roots\"></a>GC Roots</h3><p>我们先来了解一下在Java中是如何判断一个对象的生死的，有些语言比如Python是采用引用计数来统计的，但是这种做法可能会遇见循环引用的问题，在Java以及C#等语言中是采用GC Roots来解决这个问题。如果一个对象和GC Roots之间没有链接，那么这个对象也可以被视作是一个可回收的对象。</p>\n<p>Java中可以被作为GC Roots中的对象有：</p>\n<p>虚拟机栈中的引用的对象。<br>方法区中的类静态属性引用的对象。<br>方法区中的常量引用的对象。<br>本地方法栈（jni）即一般说的Native的引用对象。</p>\n<h3 id=\"垃圾回收算法\"><a href=\"#垃圾回收算法\" class=\"headerlink\" title=\"垃圾回收算法\"></a>垃圾回收算法</h3><h4 id=\"标记清除\"><a href=\"#标记清除\" class=\"headerlink\" title=\"标记清除\"></a>标记清除</h4><p>标记-清除算法将垃圾回收分为两个阶段：标记阶段和清除阶段。在标记阶段首先通过根节点，标记所有从根节点开始的对象，未被标记的对象就是未被引用的垃圾对象。然后，在清除阶段，清除所有未被标记的对象。标记清除算法带来的一个问题是会存在大量的<strong>空间碎片</strong>，因为回收后的空间是不连续的，这样给大对象分配内存的时候可能会提前触发full gc。</p>\n<h4 id=\"复制算法\"><a href=\"#复制算法\" class=\"headerlink\" title=\"复制算法\"></a>复制算法</h4><p>将现有的内存空间分为两快，<strong>每次只使用其中一块，在垃圾回收时将正在使用的内存中的存活对象复制到未被使用的内存块中，之后，清除正在使用的内存块中的所有对象，交换两个内存的角色，完成垃圾回收</strong>。</p>\n<p>现在的商业虚拟机都采用这种收集算法来回收新生代，IBM研究表明新生代中的对象98%是朝夕生死的，所以并不需要按照1:1的比例划分内存空间，而是将内存分为一块较大的Eden空间和两块较小的Survivor空间，每次使用Eden和其中的一块Survivor。当回收时，将Eden和Survivor中还存活着的对象一次性地拷贝到另外一个Survivor空间上，最后清理掉Eden和刚才用过的Survivor的空间。HotSpot虚拟机默认Eden和Survivor的大小比例是8:1(可以通过-SurvivorRattio来配置)，也就是每次新生代中可用内存空间为整个新生代容量的90%，只有10%的内存会被“浪费”。当然，98%的对象可回收只是一般场景下的数据，我们没有办法保证回收都只有不多于10%的对象存活，当Survivor空间不够用时，需要依赖其他内存（这里指老年代）进行分配担保。</p>\n<h4 id=\"标记整理\"><a href=\"#标记整理\" class=\"headerlink\" title=\"标记整理\"></a>标记整理</h4><p>复制算法的高效性是建立在存活对象少、垃圾对象多的前提下的。这种情况在新生代经常发生，但是在老年代更常见的情况是大部分对象都是存活对象。如果依然使用复制算法，由于存活的对象较多，复制的成本也将很高。<br>标记-压缩算法是一种<strong>老年代的回收算法</strong>，它在标记-清除算法的基础上做了一些优化。首先也需要从根节点开始对所有可达对象做一次标记，但之后，它并不简单地清理未标记的对象，而是<strong>将所有的存活对象压缩到内存的一端。之后，清理边界外所有的空间</strong>。这种方法既避免了碎片的产生，又不需要两块相同的内存空间，因此，其性价比比较高。<br>","more":"</p>\n<h4 id=\"增量算法\"><a href=\"#增量算法\" class=\"headerlink\" title=\"增量算法\"></a>增量算法</h4><p>增量算法的基本思想是，如果一次性将所有的垃圾进行处理，需要造成系统长时间的停顿，那么就可以让垃圾收集线程和应用程序线程交替执行。每次，垃圾收集线程只收集一小片区域的内存空间，接着切换到应用程序线程。依次反复，直到垃圾收集完成。使用这种方式，由于在垃圾回收过程中，间断性地还执行了应用程序代码，所以能减少系统的停顿时间。但是，因为线程切换和上下文转换的消耗，会使得垃圾回收的总体成本上升，造成系统吞吐量的下降。</p>\n<h3 id=\"垃圾回收器\"><a href=\"#垃圾回收器\" class=\"headerlink\" title=\"垃圾回收器\"></a>垃圾回收器</h3><h4 id=\"Serial收集器\"><a href=\"#Serial收集器\" class=\"headerlink\" title=\"Serial收集器\"></a>Serial收集器</h4><p>Serial收集器是<strong>最古老的收集器</strong>，它的缺点是当<strong>Serial收集器想进行垃圾回收的时候，必须暂停用户的所有进程，即stop the world</strong>。到现在为止，它依然是虚拟机运行在client模式下的默认新生代收集器，与其他收集器相比，对于限定在单个CPU的运行环境来说，Serial收集器由于没有线程交互的开销，专心做垃圾回收自然可以获得最高的单线程收集效率。</p>\n<p><strong>Serial Old是Serial收集器的老年代版本，它同样是一个单线程收集器，使用”标记－整理“算法</strong>。这个收集器的主要意义也是被Client模式下的虚拟机使用。在Server模式下，它主要还有两大用途：一个是在JDK1.5及以前的版本中与Parallel Scanvenge收集器搭配使用，另外一个就是作为CMS收集器的后备预案，在并发收集发生Concurrent Mode Failure的时候使用。</p>\n<p>通过指定-UseSerialGC参数，使用Serial + Serial Old的串行收集器组合进行内存回收。</p>\n<h4 id=\"ParNew收集器\"><a href=\"#ParNew收集器\" class=\"headerlink\" title=\"ParNew收集器\"></a>ParNew收集器</h4><p>ParNew收集器是Serial收集器新生代的多线程实现，注意在进行垃圾回收的时候依然会stop the world，只是相比较Serial收集器而言它会运行多条进程进行垃圾回收。</p>\n<p>ParNew收集器在单CPU的环境中绝对不会有比Serial收集器更好的效果，甚至由于存在线程交互的开销，该收集器在通过超线程技术实现的两个CPU的环境中都不能百分之百的保证能超越Serial收集器。当然，随着可以使用的CPU的数量增加，它对于GC时系统资源的利用还是很有好处的。它默认开启的收集线程数与CPU的数量相同，在CPU非常多（譬如32个，现在CPU动辄4核加超线程，服务器超过32个逻辑CPU的情况越来越多了）的环境下，可以使用-XX:ParallelGCThreads参数来限制垃圾收集的线程数。</p>\n<p>-UseParNewGC: 打开此开关后，使用ParNew + Serial Old的收集器组合进行内存回收，这样<strong>新生代使用并行收集器，老年代使用串行收集器</strong>。</p>\n<h4 id=\"Parallel-Scavenge收集器\"><a href=\"#Parallel-Scavenge收集器\" class=\"headerlink\" title=\"Parallel Scavenge收集器\"></a>Parallel Scavenge收集器</h4><p>Parallel是采用复制算法的多线程新生代垃圾回收器，似乎和ParNew收集器有很多的相似的地方。但是Parallel Scanvenge收集器的一个特点是它所关注的目标是吞吐量(Throughput)。所谓吞吐量就是CPU用于运行用户代码的时间与CPU总消耗时间的比值，即吞吐量=运行用户代码时间 / (运行用户代码时间 + 垃圾收集时间)。停顿时间越短就越适合需要与用户交互的程序，良好的响应速度能够提升用户的体验；而高吞吐量则可以最高效率地利用CPU时间，尽快地完成程序的运算任务，主要适合在后台运算而不需要太多交互的任务。</p>\n<p>Parallel Old收集器是Parallel Scavenge收集器的老年代版本，采用多线程和”标记－整理”算法。这个收集器是在jdk1.6中才开始提供的，在此之前，新生代的Parallel Scavenge收集器一直处于比较尴尬的状态。原因是如果新生代Parallel Scavenge收集器，那么老年代除了Serial Old(PS MarkSweep)收集器外别无选择。由于单线程的老年代Serial Old收集器在服务端应用性能上的”拖累“，即使使用了Parallel Scavenge收集器也未必能在整体应用上获得吞吐量最大化的效果，又因为老年代收集中无法充分利用服务器多CPU的处理能力，在老年代很大而且硬件比较高级的环境中，这种组合的吞吐量甚至还不一定有ParNew加CMS的组合”给力“。直到Parallel Old收集器出现后，”吞吐量优先“收集器终于有了比较名副其实的应用祝贺，在注重吞吐量及CPU资源敏感的场合，都可以优先考虑Parallel Scavenge加Parallel Old收集器。</p>\n<p>-UseParallelGC: 虚拟机运行在Server模式下的默认值，打开此开关后，使用Parallel Scavenge + Serial Old的收集器组合进行内存回收。-UseParallelOldGC: 打开此开关后，使用Parallel Scavenge + Parallel Old的收集器组合进行垃圾回收</p>\n<h4 id=\"CMS收集器\"><a href=\"#CMS收集器\" class=\"headerlink\" title=\"CMS收集器\"></a>CMS收集器</h4><p>CMS(Concurrent Mark Swep)收集器是一个比较重要的回收器，现在应用非常广泛，我们重点来看一下，CMS一种获取最短回收停顿时间为目标的收集器，这使得它很适合用于和用户交互的业务。从名字(Mark Swep)就可以看出，CMS收集器是基于标记清除算法实现的。它的收集过程分为四个步骤：</p>\n<p>1.初始标记(initial mark)<br>2.并发标记(concurrent mark)<br>3.重新标记(remark)<br>4.并发清除(concurrent sweep)<br>注意初始标记和重新标记还是会stop the world，但是在耗费时间更长的并发标记和并发清除两个阶段都可以和用户进程同时工作。</p>\n<p>不过由于CMS收集器是基于标记清除算法实现的，会导致有大量的空间碎片产生，在为大对象分配内存的时候，往往会出现老年代还有很大的空间剩余，但是无法找到足够大的连续空间来分配当前对象，不得不提前开启一次Full GC。为了解决这个问题，CMS收集器默认提供了一个-XX:+UseCMSCompactAtFullCollection收集开关参数（默认就是开启的)，用于在CMS收集器进行FullGC完开启内存碎片的合并整理过程，内存整理的过程是无法并发的，这样内存碎片问题倒是没有了，不过停顿时间不得不变长。虚拟机设计者还提供了另外一个参数-XX:CMSFullGCsBeforeCompaction参数用于设置执行多少次不压缩的FULL GC后跟着来一次带压缩的（默认值为0，表示每次进入Full GC时都进行碎片整理）。</p>\n<p>不幸的是，它作为老年代的收集器，却无法与jdk1.4中已经存在的新生代收集器Parallel Scavenge配合工作，所以在jdk1.5中使用cms来收集老年代的时候，新生代只能选择ParNew或Serial收集器中的一个。ParNew收集器是使用-XX:+UseConcMarkSweepGC选项启用CMS收集器之后的默认新生代收集器，也可以使用-XX:+UseParNewGC选项来强制指定它。</p>\n<p>由于CMS收集器现在比较常用，下面我们再额外了解一下CMS算法的几个常用参数：</p>\n<p>UseCMSInitatingOccupancyOnly：表示只在到达阈值的时候，才进行 CMS 回收。<br>为了减少第二次暂停的时间，通过-XX:+CMSParallelRemarkEnabled开启并行remark。如果ramark时间还是过长的话，可以开启-XX:+CMSScavengeBeforeRemark选项，强制remark之前开启一次minor gc，减少remark的暂停时间，但是在remark之后也立即开始一次minor gc。<br>CMS默认启动的回收线程数目是(ParallelGCThreads + 3)/4，如果你需要明确设定，可以通过-XX:+ParallelCMSThreads来设定，其中-XX:+ParallelGCThreads代表的年轻代的并发收集线程数目。<br>CMSClassUnloadingEnabled： 允许对类元数据进行回收。<br>CMSInitatingPermOccupancyFraction：当永久区占用率达到这一百分比后，启动 CMS 回收 (前提是-XX:+CMSClassUnloadingEnabled 激活了)。<br>CMSIncrementalMode：使用增量模式，比较适合单 CPU。<br>UseCMSCompactAtFullCollection参数可以使 CMS 在垃圾收集完成后，进行一次内存碎片整理。内存碎片的整理并不是并发进行的。<br>UseFullGCsBeforeCompaction：设定进行多少次 CMS 垃圾回收后，进行一次内存压缩。<br>一些建议<br>对于Native Memory:</p>\n<ul>\n<li>使用了NIO或者NIO框架（Mina/Netty）</li>\n<li>使用了DirectByteBuffer分配字节缓冲区</li>\n<li>使用了MappedByteBuffer做内存映射</li>\n</ul>\n<p>由于Native Memory只能通过FullGC回收，所以除非你非常清楚这时真的有必要，否则不要轻易调用System.gc()。</p>\n<p>另外为了防止某些框架中的System.gc调用（例如NIO框架、Java RMI），建议在启动参数中加上-XX:+DisableExplicitGC来禁用显式GC。这个参数有个巨大的坑，如果你禁用了System.gc()，那么上面的3种场景下的内存就无法回收，可能造成OOM，如果你使用了CMS GC，那么可以用这个参数替代：-XX:+ExplicitGCInvokesConcurrent。</p>\n<p>此外除了CMS的GC，其实其他针对old gen的回收器都会在对old gen回收的同时回收young gen。</p>\n<h4 id=\"G1收集器\"><a href=\"#G1收集器\" class=\"headerlink\" title=\"G1收集器\"></a>G1收集器</h4><p>G1收集器是一款面向服务端应用的垃圾收集器。HotSpot团队赋予它的使命是在未来替换掉JDK1.5中发布的CMS收集器。与其他GC收集器相比，G1具备如下特点：</p>\n<p>1.并行与并发：G1能更充分的利用CPU，多核环境下的硬件优势来缩短stop the world的停顿时间。<br>2.分代收集：和其他收集器一样，分代的概念在G1中依然存在，不过G1不需要其他的垃圾回收器的配合就可以独自管理整个GC堆。<br>3.空间整合：G1收集器有利于程序长时间运行，分配大对象时不会无法得到连续的空间而提前触发一次GC。<br>4.可预测的非停顿：这是G1相对于CMS的另一大优势，降低停顿时间是G1和CMS共同的关注点，能让使用者明确指定在一个长度为M毫秒的时间片段内，消耗在垃圾收集上的时间不得超过N毫秒。<br>在使用G1收集器时，Java堆的内存布局和其他收集器有很大的差别，它将这个Java堆分为多个大小相等的独立区域，虽然还保留新生代和老年代的概念，但是新生代和老年代不再是物理隔离的了，它们都是一部分Region（不需要连续）的集合。</p>\n<p>虽然G1看起来有很多优点，实际上CMS还是主流。</p>\n<h4 id=\"与GC相关的常用参数\"><a href=\"#与GC相关的常用参数\" class=\"headerlink\" title=\"与GC相关的常用参数\"></a>与GC相关的常用参数</h4><p>除了上面提及的一些参数，下面补充一些和GC相关的常用参数：</p>\n<ul>\n<li>-Xmx: 设置堆内存的最大值。</li>\n<li>-Xms: 设置堆内存的初始值。</li>\n<li>-Xmn: 设置新生代的大小。</li>\n<li>-Xss: 设置栈的大小。</li>\n<li>-PretenureSizeThreshold: 直接晋升到老年代的对象大小，设置这个参数后，大于这个参数的对象将直接在老年代分配。</li>\n<li>-MaxTenuringThrehold: 晋升到老年代的对象年龄。每个对象在坚持过一次Minor GC之后，年龄就会加1，当超过这个参数值时就进入老年代。</li>\n<li>-UseAdaptiveSizePolicy: 在这种模式下，新生代的大小、eden 和 survivor 的比例、晋升老年代的对象年龄等参数会被自动调整，以达到在堆大小、吞吐量和停顿时间之间的平衡点。在手工调优比较困难的场合，可以直接使用这种自适应的方式，仅指定虚拟机的最大堆、目标的吞吐量 (GCTimeRatio) 和停顿时间 (MaxGCPauseMills)，让虚拟机自己完成调优工作。</li>\n<li>-SurvivorRattio: 新生代Eden区域与Survivor区域的容量比值，默认为8，代表Eden: Suvivor= 8: 1。</li>\n<li>-XX:ParallelGCThreads：设置用于垃圾回收的线程数。通常情况下可以和 CPU 数量相等。但在 CPU 数量比较多的情况下，设置相对较小的数值也是合理的。</li>\n<li>-XX:MaxGCPauseMills：设置最大垃圾收集停顿时间。它的值是一个大于 0 的整数。收集器在工作时，会调整 Java 堆大小或者其他一些参数，尽可能地把停顿时间控制在 MaxGCPauseMills 以内。</li>\n<li>-XX:GCTimeRatio:设置吞吐量大小，它的值是一个 0-100 之间的整数。假设 GCTimeRatio 的值为 n，那么系统将花费不超过 1/(1+n) 的时间用于垃圾收集。</li>\n</ul>\n<h3 id=\"相关文章\"><a href=\"#相关文章\" class=\"headerlink\" title=\"相关文章\"></a>相关文章</h3><ul>\n<li><p><a href=\"http://www.importnew.com/23752.html\">JVM（3）：Java GC算法 垃圾收集器</a></p>\n</li>\n<li><p><a href=\"http://www.importnew.com/23186.html\">JVM初探——使用堆外内存减少Full GC</a></p>\n</li>\n<li><p><a href=\"http://www.importnew.com/23146.html\">JVM GC参数以及GC算法的应用</a></p>\n</li>\n<li><p><a href=\"http://www.importnew.com/22996.html\">JVM内存管理–GC算法精解（五分钟让你彻底明白标记/清除算法）</a></p>\n</li>\n<li><p><a href=\"http://www.importnew.com/22886.html\">JVM 调优 —— GC 长时间停顿问题及解决方法</a></p>\n</li>\n<li><p><a href=\"http://www.importnew.com/16327.html\">JVM 优化经验总结</a></p>\n</li>\n<li><p><a href=\"http://www.importnew.com/11336.html\">高吞吐低延迟Java应用的垃圾回收优化</a></p>\n</li>\n<li><p><a href=\"http://www.importnew.com/10910.html\">Linux HotSopt虚拟机GC线程的CPU占用率</a></p>\n</li>\n<li><p><a href=\"http://www.importnew.com/10570.html\">如何估算内存消耗</a></p>\n</li>\n</ul>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><ul>\n<li><p>原文出处： <a href=\"https://www.ziwenxie.site/2017/07/24/java-jvm-gc/\">ZIWENXIE</a></p>\n</li>\n<li><p><a href=\"http://www.importnew.com/26383.html\">JVM 垃圾回收算法及回收器详解</a></p>\n</li>\n</ul>"},{"title":"spring ioc 控制反转","comments":1,"abbrlink":"50de3585","date":"2017-03-04T13:15:00.000Z","copyright":true,"_content":"\n## <center>Spring -- IOC<center>\n\n### spring ioc 控制反转\n\n    IOC（Inversion of Control）控制反转：本来是由应用程序管理的对象之间的依赖关系，现在交给了容器管理，这就叫控制反转，即交给了IOC容器，Spring的IOC容器主要使用DI方式实现的。不需要主动查找，对象的查找、定位和创建全部由容器管理。\n\n    通俗点说就是不创建对象。以前我们要调用一个对象的方法，首先要new一个对象。但使用IOC容器，在代码中不直接与对象连接，而是在配置文件中描述要使用哪一个对象。容器负责将这些联系在一起。\n\n### 实现方法\n\n      IOC容器的对象实例化是通过配置文件来实现的。术语上这叫做注入。注入有两种形式，采用构造方法注入和采用setter注入。具体的注入形式如下\n<!--more--> \n采用set方法注入，给属性添加一个set方法，并对其进行赋值\n```java\npublicclass UserManagerImplimplements UserManager {\n\n    private UserDaouserDao;\n\n    publicvoid setUserDao(UserDao userDao) {\n\n        this.userDao = userDao;\n\n    }\n\n}\n```\n#### 配置文件：\n```java\n<beanid=\"userManager\"class=\"com.bjpowernode.spring.manager.UserManagerImpl\">\n\n     <propertyname=\"userDao\"ref=\"usrDao4Oracle\"/>\n\n  </bean>\n```\nset注入特点：\n\n        与传统的JavaBean的写法更相似，程序员更容易理解、接受，通过setter方式设定依赖关系显得更加直观、明显；\n\n        对于复杂的依赖关系，如果采用构造注入，会导致构造器过于臃肿，难以阅读。Spring在创建Bean实例时，需要同时实例化其依赖的全部实例，因而导致死你功能下降。而使用设置注入，则避免这下问题；\n\n       尤其在某些属性可选的情况下，多参数的构造器更加笨拙。\n\n采用构造方法注入，在构造方法中对属性进行赋值\n```java\npublicclass UserManagerImplimplements UserManager {\n\n    private UserDaouserDao;\n\n    public UserManagerImpl(UserDao userDao) {\n        this.userDao = userDao;\n    }\n}\n```\n配置文件：\n```java\n<beanid=\"userManager\"class=\"com.bjpowernode.spring.manager.UserManagerImpl\">\n\n    <constructor-argref=\"userDao4Mysql\"/>\n\n</bean>\n```\n构造方法注入特点：\n\n       构造注入可以在构造器中决定依赖关系的注入顺序，优先依赖的优先注入。\n\n       对于依赖关系无须变化的Bean，构造注入更有用处；因为没有setter方法，所有的依赖关系全部在构造器内设定，因此，不用担心后续代码对依赖关系的破坏。\n      依赖关系只能在构造器中设定，则只有组件的创建者才能改变组件的依赖关系。对组件的调用者而言，组件内部的依赖关系完全透明，更符合高内聚的原则；\n","source":"_posts/spring ioc 控制反转.md","raw":"---\ntitle: spring ioc 控制反转\ncategories: java学习之路\ntags:\n  - java\n  - IOC（Inversion of Control）控制反转\ncomments: true\nabbrlink: 50de3585\ndate: 2017-03-04 21:15:00\ncopyright: true\n---\n\n## <center>Spring -- IOC<center>\n\n### spring ioc 控制反转\n\n    IOC（Inversion of Control）控制反转：本来是由应用程序管理的对象之间的依赖关系，现在交给了容器管理，这就叫控制反转，即交给了IOC容器，Spring的IOC容器主要使用DI方式实现的。不需要主动查找，对象的查找、定位和创建全部由容器管理。\n\n    通俗点说就是不创建对象。以前我们要调用一个对象的方法，首先要new一个对象。但使用IOC容器，在代码中不直接与对象连接，而是在配置文件中描述要使用哪一个对象。容器负责将这些联系在一起。\n\n### 实现方法\n\n      IOC容器的对象实例化是通过配置文件来实现的。术语上这叫做注入。注入有两种形式，采用构造方法注入和采用setter注入。具体的注入形式如下\n<!--more--> \n采用set方法注入，给属性添加一个set方法，并对其进行赋值\n```java\npublicclass UserManagerImplimplements UserManager {\n\n    private UserDaouserDao;\n\n    publicvoid setUserDao(UserDao userDao) {\n\n        this.userDao = userDao;\n\n    }\n\n}\n```\n#### 配置文件：\n```java\n<beanid=\"userManager\"class=\"com.bjpowernode.spring.manager.UserManagerImpl\">\n\n     <propertyname=\"userDao\"ref=\"usrDao4Oracle\"/>\n\n  </bean>\n```\nset注入特点：\n\n        与传统的JavaBean的写法更相似，程序员更容易理解、接受，通过setter方式设定依赖关系显得更加直观、明显；\n\n        对于复杂的依赖关系，如果采用构造注入，会导致构造器过于臃肿，难以阅读。Spring在创建Bean实例时，需要同时实例化其依赖的全部实例，因而导致死你功能下降。而使用设置注入，则避免这下问题；\n\n       尤其在某些属性可选的情况下，多参数的构造器更加笨拙。\n\n采用构造方法注入，在构造方法中对属性进行赋值\n```java\npublicclass UserManagerImplimplements UserManager {\n\n    private UserDaouserDao;\n\n    public UserManagerImpl(UserDao userDao) {\n        this.userDao = userDao;\n    }\n}\n```\n配置文件：\n```java\n<beanid=\"userManager\"class=\"com.bjpowernode.spring.manager.UserManagerImpl\">\n\n    <constructor-argref=\"userDao4Mysql\"/>\n\n</bean>\n```\n构造方法注入特点：\n\n       构造注入可以在构造器中决定依赖关系的注入顺序，优先依赖的优先注入。\n\n       对于依赖关系无须变化的Bean，构造注入更有用处；因为没有setter方法，所有的依赖关系全部在构造器内设定，因此，不用担心后续代码对依赖关系的破坏。\n      依赖关系只能在构造器中设定，则只有组件的创建者才能改变组件的依赖关系。对组件的调用者而言，组件内部的依赖关系完全透明，更符合高内聚的原则；\n","slug":"spring-ioc-控制反转","published":1,"updated":"2018-02-26T10:03:01.263Z","layout":"post","photos":[],"link":"","_id":"cje7yhv6l002g7ku6dqc26il8","content":"<h2 id=\"Spring-–-IOC\"><a href=\"#Spring-–-IOC\" class=\"headerlink\" title=\"Spring – IOC\"></a><center>Spring – IOC<center></center></center></h2><h3 id=\"spring-ioc-控制反转\"><a href=\"#spring-ioc-控制反转\" class=\"headerlink\" title=\"spring ioc 控制反转\"></a>spring ioc 控制反转</h3><pre><code>IOC（Inversion of Control）控制反转：本来是由应用程序管理的对象之间的依赖关系，现在交给了容器管理，这就叫控制反转，即交给了IOC容器，Spring的IOC容器主要使用DI方式实现的。不需要主动查找，对象的查找、定位和创建全部由容器管理。\n\n通俗点说就是不创建对象。以前我们要调用一个对象的方法，首先要new一个对象。但使用IOC容器，在代码中不直接与对象连接，而是在配置文件中描述要使用哪一个对象。容器负责将这些联系在一起。\n</code></pre><h3 id=\"实现方法\"><a href=\"#实现方法\" class=\"headerlink\" title=\"实现方法\"></a>实现方法</h3><pre><code>IOC容器的对象实例化是通过配置文件来实现的。术语上这叫做注入。注入有两种形式，采用构造方法注入和采用setter注入。具体的注入形式如下\n</code></pre><a id=\"more\"></a> \n<p>采用set方法注入，给属性添加一个set方法，并对其进行赋值<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">publicclass UserManagerImplimplements UserManager &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> UserDaouserDao;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\">publicvoid <span class=\"title\">setUserDao</span><span class=\"params\">(UserDao userDao)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">this</span>.userDao = userDao;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"配置文件：\"><a href=\"#配置文件：\" class=\"headerlink\" title=\"配置文件：\"></a>配置文件：</h4><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;beanid=\"userManager\"class=\"com.bjpowernode.spring.manager.UserManagerImpl\"&gt;</div><div class=\"line\"></div><div class=\"line\">     &lt;propertyname=\"userDao\"ref=\"usrDao4Oracle\"/&gt;</div><div class=\"line\"></div><div class=\"line\">  &lt;/bean&gt;</div></pre></td></tr></table></figure>\n<p>set注入特点：</p>\n<pre><code> 与传统的JavaBean的写法更相似，程序员更容易理解、接受，通过setter方式设定依赖关系显得更加直观、明显；\n\n 对于复杂的依赖关系，如果采用构造注入，会导致构造器过于臃肿，难以阅读。Spring在创建Bean实例时，需要同时实例化其依赖的全部实例，因而导致死你功能下降。而使用设置注入，则避免这下问题；\n\n尤其在某些属性可选的情况下，多参数的构造器更加笨拙。\n</code></pre><p>采用构造方法注入，在构造方法中对属性进行赋值<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">publicclass UserManagerImplimplements UserManager &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> UserDaouserDao;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">UserManagerImpl</span><span class=\"params\">(UserDao userDao)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.userDao = userDao;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>配置文件：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;beanid=\"userManager\"class=\"com.bjpowernode.spring.manager.UserManagerImpl\"&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;constructor-argref=\"userDao4Mysql\"/&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/bean&gt;</div></pre></td></tr></table></figure></p>\n<p>构造方法注入特点：</p>\n<pre><code> 构造注入可以在构造器中决定依赖关系的注入顺序，优先依赖的优先注入。\n\n 对于依赖关系无须变化的Bean，构造注入更有用处；因为没有setter方法，所有的依赖关系全部在构造器内设定，因此，不用担心后续代码对依赖关系的破坏。\n依赖关系只能在构造器中设定，则只有组件的创建者才能改变组件的依赖关系。对组件的调用者而言，组件内部的依赖关系完全透明，更符合高内聚的原则；\n</code></pre>","excerpt":"<h2 id=\"Spring-–-IOC\"><a href=\"#Spring-–-IOC\" class=\"headerlink\" title=\"Spring – IOC\"></a><center>Spring – IOC<center></h2><h3 id=\"spring-ioc-控制反转\"><a href=\"#spring-ioc-控制反转\" class=\"headerlink\" title=\"spring ioc 控制反转\"></a>spring ioc 控制反转</h3><pre><code>IOC（Inversion of Control）控制反转：本来是由应用程序管理的对象之间的依赖关系，现在交给了容器管理，这就叫控制反转，即交给了IOC容器，Spring的IOC容器主要使用DI方式实现的。不需要主动查找，对象的查找、定位和创建全部由容器管理。\n\n通俗点说就是不创建对象。以前我们要调用一个对象的方法，首先要new一个对象。但使用IOC容器，在代码中不直接与对象连接，而是在配置文件中描述要使用哪一个对象。容器负责将这些联系在一起。\n</code></pre><h3 id=\"实现方法\"><a href=\"#实现方法\" class=\"headerlink\" title=\"实现方法\"></a>实现方法</h3><pre><code>IOC容器的对象实例化是通过配置文件来实现的。术语上这叫做注入。注入有两种形式，采用构造方法注入和采用setter注入。具体的注入形式如下\n</code></pre>","more":"<p>采用set方法注入，给属性添加一个set方法，并对其进行赋值<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">publicclass UserManagerImplimplements UserManager &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> UserDaouserDao;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\">publicvoid <span class=\"title\">setUserDao</span><span class=\"params\">(UserDao userDao)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">this</span>.userDao = userDao;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"配置文件：\"><a href=\"#配置文件：\" class=\"headerlink\" title=\"配置文件：\"></a>配置文件：</h4><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;beanid=\"userManager\"class=\"com.bjpowernode.spring.manager.UserManagerImpl\"&gt;</div><div class=\"line\"></div><div class=\"line\">     &lt;propertyname=\"userDao\"ref=\"usrDao4Oracle\"/&gt;</div><div class=\"line\"></div><div class=\"line\">  &lt;/bean&gt;</div></pre></td></tr></table></figure>\n<p>set注入特点：</p>\n<pre><code> 与传统的JavaBean的写法更相似，程序员更容易理解、接受，通过setter方式设定依赖关系显得更加直观、明显；\n\n 对于复杂的依赖关系，如果采用构造注入，会导致构造器过于臃肿，难以阅读。Spring在创建Bean实例时，需要同时实例化其依赖的全部实例，因而导致死你功能下降。而使用设置注入，则避免这下问题；\n\n尤其在某些属性可选的情况下，多参数的构造器更加笨拙。\n</code></pre><p>采用构造方法注入，在构造方法中对属性进行赋值<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">publicclass UserManagerImplimplements UserManager &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> UserDaouserDao;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">UserManagerImpl</span><span class=\"params\">(UserDao userDao)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.userDao = userDao;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>配置文件：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;beanid=\"userManager\"class=\"com.bjpowernode.spring.manager.UserManagerImpl\"&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;constructor-argref=\"userDao4Mysql\"/&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/bean&gt;</div></pre></td></tr></table></figure></p>\n<p>构造方法注入特点：</p>\n<pre><code> 构造注入可以在构造器中决定依赖关系的注入顺序，优先依赖的优先注入。\n\n 对于依赖关系无须变化的Bean，构造注入更有用处；因为没有setter方法，所有的依赖关系全部在构造器内设定，因此，不用担心后续代码对依赖关系的破坏。\n依赖关系只能在构造器中设定，则只有组件的创建者才能改变组件的依赖关系。对组件的调用者而言，组件内部的依赖关系完全透明，更符合高内聚的原则；\n</code></pre>"}],"PostAsset":[],"PostCategory":[{"post_id":"cje7yhv2v00027ku615l060l4","category_id":"cje7yhv3000067ku6a9lofg63","_id":"cje7yhv3a000f7ku6nv31x9fu"},{"post_id":"cje7yhv2y00047ku60sf92kds","category_id":"cje7yhv38000b7ku689dska8i","_id":"cje7yhv3e000l7ku6fjgff67s"},{"post_id":"cje7yhv3400087ku6g42sgibo","category_id":"cje7yhv3c000h7ku6k2jqvshz","_id":"cje7yhv3l000r7ku6u7g3ehyf"},{"post_id":"cje7yhv3700097ku6cdei4uc0","category_id":"cje7yhv3c000h7ku6k2jqvshz","_id":"cje7yhv3q000y7ku63kjjt3w9"},{"post_id":"cje7yhv38000a7ku6l576n2gz","category_id":"cje7yhv3m000t7ku6sdqbwceh","_id":"cje7yhv4000157ku638g25jf1"},{"post_id":"cje7yhv3x00147ku60ycxy0gy","category_id":"cje7yhv3c000h7ku6k2jqvshz","_id":"cje7yhv44001b7ku6uxyhgboa"},{"post_id":"cje7yhv39000e7ku6zcor2ybf","category_id":"cje7yhv3r00107ku6vx31mfsd","_id":"cje7yhv46001f7ku6rgpsslue"},{"post_id":"cje7yhv3b000g7ku6bvtdvu96","category_id":"cje7yhv3r00107ku6vx31mfsd","_id":"cje7yhv46001h7ku6riybwrro"},{"post_id":"cje7yhv3c000j7ku69n7lx5wb","category_id":"cje7yhv45001d7ku63tju0y96","_id":"cje7yhv47001k7ku6o52wlt4d"},{"post_id":"cje7yhv3d000k7ku62zw2b8kp","category_id":"cje7yhv46001i7ku6wqpe2d08","_id":"cje7yhv49001o7ku6w9788p3s"},{"post_id":"cje7yhv3i000o7ku6u93d90ep","category_id":"cje7yhv46001i7ku6wqpe2d08","_id":"cje7yhv4a001t7ku6b7jnrann"},{"post_id":"cje7yhv3k000q7ku6rmo6hbdk","category_id":"cje7yhv3r00107ku6vx31mfsd","_id":"cje7yhv4c001x7ku6a81j923e"},{"post_id":"cje7yhv3o000v7ku63eslljhi","category_id":"cje7yhv3r00107ku6vx31mfsd","_id":"cje7yhv4e00217ku60drhre34"},{"post_id":"cje7yhv3q000x7ku68hpgl24e","category_id":"cje7yhv46001i7ku6wqpe2d08","_id":"cje7yhv4i00257ku6fvcksuov"},{"post_id":"cje7yhv3r00127ku6gav2q4e2","category_id":"cje7yhv3r00107ku6vx31mfsd","_id":"cje7yhv4k00287ku624yyr9zd"},{"post_id":"cje7yhv4000177ku6rk1i9zqv","category_id":"cje7yhv46001i7ku6wqpe2d08","_id":"cje7yhv4l002a7ku62zk6hkx1"},{"post_id":"cje7yhv6l002g7ku6dqc26il8","category_id":"cje7yhv6n002h7ku64b99ff7q","_id":"cje7yhv6t002k7ku66neliwd1"}],"PostTag":[{"post_id":"cje7yhv2v00027ku615l060l4","tag_id":"cje7yhv3300077ku607ihu5v6","_id":"cje7yhv39000d7ku6376x9d8x"},{"post_id":"cje7yhv2y00047ku60sf92kds","tag_id":"cje7yhv38000c7ku6ychlcjc5","_id":"cje7yhv3j000p7ku63pxwjh5m"},{"post_id":"cje7yhv2y00047ku60sf92kds","tag_id":"cje7yhv3c000i7ku6s1c8bma1","_id":"cje7yhv3m000s7ku6ycazz0c5"},{"post_id":"cje7yhv3400087ku6g42sgibo","tag_id":"cje7yhv3e000n7ku69ir5abxw","_id":"cje7yhv3p000w7ku6k2qnmjmo"},{"post_id":"cje7yhv3k000q7ku6rmo6hbdk","tag_id":"cje7yhv3300077ku607ihu5v6","_id":"cje7yhv3r000z7ku6twcyexeo"},{"post_id":"cje7yhv3o000v7ku63eslljhi","tag_id":"cje7yhv3300077ku607ihu5v6","_id":"cje7yhv3w00137ku6o6prmw9w"},{"post_id":"cje7yhv3700097ku6cdei4uc0","tag_id":"cje7yhv3e000n7ku69ir5abxw","_id":"cje7yhv4000167ku69oiroy9n"},{"post_id":"cje7yhv3x00147ku60ycxy0gy","tag_id":"cje7yhv3e000n7ku69ir5abxw","_id":"cje7yhv43001a7ku66ux2wwk3"},{"post_id":"cje7yhv38000a7ku6l576n2gz","tag_id":"cje7yhv3r00117ku6n8ovx3s0","_id":"cje7yhv45001c7ku6qx0t06e2"},{"post_id":"cje7yhv39000e7ku6zcor2ybf","tag_id":"cje7yhv4100197ku6gpct8m3y","_id":"cje7yhv46001g7ku6inow0rt8"},{"post_id":"cje7yhv3b000g7ku6bvtdvu96","tag_id":"cje7yhv4100197ku6gpct8m3y","_id":"cje7yhv48001n7ku62mel9glv"},{"post_id":"cje7yhv3b000g7ku6bvtdvu96","tag_id":"cje7yhv47001j7ku6mgsiqqdd","_id":"cje7yhv49001p7ku667jwdh2p"},{"post_id":"cje7yhv3c000j7ku69n7lx5wb","tag_id":"cje7yhv48001m7ku6jtpmcvmk","_id":"cje7yhv4a001s7ku62o0ykxj7"},{"post_id":"cje7yhv3d000k7ku62zw2b8kp","tag_id":"cje7yhv49001r7ku63veiif5m","_id":"cje7yhv4c001w7ku6hyxfgbrm"},{"post_id":"cje7yhv3i000o7ku6u93d90ep","tag_id":"cje7yhv49001r7ku63veiif5m","_id":"cje7yhv4e00207ku6nk2dwngw"},{"post_id":"cje7yhv3q000x7ku68hpgl24e","tag_id":"cje7yhv4d001z7ku6g8g3odgo","_id":"cje7yhv4i00247ku602a5b30n"},{"post_id":"cje7yhv3r00127ku6gav2q4e2","tag_id":"cje7yhv4h00237ku6fgwojh3o","_id":"cje7yhv4m002c7ku6vgodrlfe"},{"post_id":"cje7yhv3r00127ku6gav2q4e2","tag_id":"cje7yhv4j00277ku63ryl671b","_id":"cje7yhv4m002d7ku6vqahd044"},{"post_id":"cje7yhv3r00127ku6gav2q4e2","tag_id":"cje7yhv4l00297ku6xpucucg5","_id":"cje7yhv4m002e7ku6zfkupc21"},{"post_id":"cje7yhv4000177ku6rk1i9zqv","tag_id":"cje7yhv4l002b7ku6plykdore","_id":"cje7yhv4n002f7ku6r3377bpo"},{"post_id":"cje7yhv6l002g7ku6dqc26il8","tag_id":"cje7yhv4h00237ku6fgwojh3o","_id":"cje7yhv6s002j7ku6n0ezzq6n"},{"post_id":"cje7yhv6l002g7ku6dqc26il8","tag_id":"cje7yhv6n002i7ku6ftifge83","_id":"cje7yhv6v002l7ku6it6sz1uo"}],"Tag":[{"name":"hexo","_id":"cje7yhv3300077ku607ihu5v6"},{"name":"js","_id":"cje7yhv38000c7ku6ychlcjc5"},{"name":"nodejs","_id":"cje7yhv3c000i7ku6s1c8bma1"},{"name":"设计模式","_id":"cje7yhv3e000n7ku69ir5abxw"},{"name":"Let's Encrypt","_id":"cje7yhv3r00117ku6n8ovx3s0"},{"name":"IM即时通讯","_id":"cje7yhv4100197ku6gpct8m3y"},{"name":"开源项目","_id":"cje7yhv47001j7ku6mgsiqqdd"},{"name":"Docker","_id":"cje7yhv48001m7ku6jtpmcvmk"},{"name":"concurrent并发包","_id":"cje7yhv49001r7ku63veiif5m"},{"name":"java面试","_id":"cje7yhv4d001z7ku6g8g3odgo"},{"name":"java","_id":"cje7yhv4h00237ku6fgwojh3o"},{"name":"书单","_id":"cje7yhv4j00277ku63ryl671b"},{"name":"计划","_id":"cje7yhv4l00297ku6xpucucg5"},{"name":"JVM垃圾回收","_id":"cje7yhv4l002b7ku6plykdore"},{"name":"IOC（Inversion of Control）控制反转","_id":"cje7yhv6n002i7ku6ftifge83"}]}}